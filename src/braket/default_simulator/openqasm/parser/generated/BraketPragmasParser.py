# Generated from BraketPragmasParser.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0082")
        buf.write("\u03e0\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\3\2\3\2\3\2\5\2\u00b4\n\2\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\7\4\u00c1\n\4\f\4\16\4")
        buf.write("\u00c4\13\4\3\4\3\4\3\5\3\5\3\5\3\5\7\5\u00cc\n\5\f\5")
        buf.write("\16\5\u00cf\13\5\3\5\3\5\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3")
        buf.write("\7\5\7\u00db\n\7\3\b\3\b\3\t\3\t\3\n\3\n\5\n\u00e3\n\n")
        buf.write("\3\13\3\13\3\f\3\f\3\f\7\f\u00ea\n\f\f\f\16\f\u00ed\13")
        buf.write("\f\3\r\3\r\3\r\3\16\3\16\3\17\3\17\3\17\7\17\u00f7\n\17")
        buf.write("\f\17\16\17\u00fa\13\17\3\20\3\20\3\20\3\21\3\21\3\21")
        buf.write("\5\21\u0102\n\21\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u010a")
        buf.write("\n\22\3\23\3\23\5\23\u010e\n\23\3\23\3\23\3\23\3\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\27")
        buf.write("\5\27\u012a\n\27\3\27\3\27\5\27\u012e\n\27\3\27\3\27\3")
        buf.write("\27\5\27\u0133\n\27\3\30\3\30\3\30\3\30\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u0145")
        buf.write("\n\31\3\32\3\32\3\32\7\32\u014a\n\32\f\32\16\32\u014d")
        buf.write("\13\32\3\33\3\33\3\33\7\33\u0152\n\33\f\33\16\33\u0155")
        buf.write("\13\33\3\34\3\34\3\35\5\35\u015a\n\35\3\35\7\35\u015d")
        buf.write("\n\35\f\35\16\35\u0160\13\35\3\35\3\35\3\36\3\36\3\36")
        buf.write("\3\36\3\37\3\37\7\37\u016a\n\37\f\37\16\37\u016d\13\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\5\37\u018a\n\37\5\37\u018c\n")
        buf.write("\37\3 \3 \5 \u0190\n \3!\3!\7!\u0194\n!\f!\16!\u0197\13")
        buf.write("!\3!\3!\3\"\3\"\3\"\3#\3#\5#\u01a0\n#\3$\3$\3$\3$\3%\3")
        buf.write("%\3%\3%\3&\3&\3&\3\'\3\'\3\'\3(\3(\3(\3)\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\5)\u01bd\n)\3)\3)\3*\3*\3*\3*\3*\3*\3*\5")
        buf.write("*\u01c8\n*\3+\3+\3+\5+\u01cd\n+\3+\3+\3,\3,\3,\3,\3,\3")
        buf.write(",\3-\3-\5-\u01d9\n-\3-\3-\3.\3.\5.\u01df\n.\3.\3.\3/\3")
        buf.write("/\3/\5/\u01e6\n/\3/\3/\3\60\7\60\u01eb\n\60\f\60\16\60")
        buf.write("\u01ee\13\60\3\60\3\60\3\60\5\60\u01f3\n\60\3\60\5\60")
        buf.write("\u01f6\n\60\3\60\5\60\u01f9\n\60\3\60\3\60\3\60\3\60\7")
        buf.write("\60\u01ff\n\60\f\60\16\60\u0202\13\60\3\60\3\60\3\60\5")
        buf.write("\60\u0207\n\60\3\60\5\60\u020a\n\60\3\60\5\60\u020d\n")
        buf.write("\60\3\60\5\60\u0210\n\60\3\60\5\60\u0213\n\60\3\61\3\61")
        buf.write("\3\61\5\61\u0218\n\61\3\61\3\61\3\62\3\62\3\62\3\62\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\64\3\64\5\64\u0228\n\64")
        buf.write("\3\64\3\64\3\64\5\64\u022d\n\64\3\64\3\64\3\65\3\65\3")
        buf.write("\65\3\65\3\65\3\65\3\65\3\66\3\66\3\66\5\66\u023b\n\66")
        buf.write("\3\66\3\66\3\66\3\67\3\67\3\67\5\67\u0243\n\67\3\67\3")
        buf.write("\67\38\38\38\38\39\39\39\39\59\u024f\n9\39\39\59\u0253")
        buf.write("\n9\39\39\3:\3:\3:\3:\5:\u025b\n:\3:\3:\5:\u025f\n:\3")
        buf.write(":\3:\3;\3;\3;\3;\5;\u0267\n;\3;\5;\u026a\n;\3;\3;\3;\3")
        buf.write("<\3<\3<\3<\5<\u0273\n<\3<\3<\3=\3=\3=\3>\3>\3>\3>\5>\u027e")
        buf.write("\n>\3>\5>\u0281\n>\3>\3>\5>\u0285\n>\3>\3>\7>\u0289\n")
        buf.write(">\f>\16>\u028c\13>\3>\3>\3?\3?\3?\3?\3?\3?\3?\3?\3?\5")
        buf.write("?\u0299\n?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u02a7")
        buf.write("\n?\3?\3?\5?\u02ab\n?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\7?\u02d0\n?\f?\16?\u02d3\13?\3@\3")
        buf.write("@\3@\7@\u02d8\n@\f@\16@\u02db\13@\3A\3A\3A\5A\u02e0\n")
        buf.write("A\3B\3B\3B\3C\5C\u02e6\nC\3C\3C\5C\u02ea\nC\3C\3C\5C\u02ee")
        buf.write("\nC\3D\3D\3D\3D\7D\u02f4\nD\fD\16D\u02f7\13D\3D\5D\u02fa")
        buf.write("\nD\3D\3D\3E\3E\3E\5E\u0301\nE\3E\3E\3E\5E\u0306\nE\7")
        buf.write("E\u0308\nE\fE\16E\u030b\13E\3E\5E\u030e\nE\3E\3E\3F\3")
        buf.write("F\3F\3F\5F\u0316\nF\3F\3F\3F\5F\u031b\nF\7F\u031d\nF\f")
        buf.write("F\16F\u0320\13F\3F\5F\u0323\nF\5F\u0325\nF\3F\3F\3G\3")
        buf.write("G\7G\u032b\nG\fG\16G\u032e\13G\3H\3H\3H\3I\3I\3I\3I\3")
        buf.write("I\3I\3I\3I\3I\3I\3I\5I\u033e\nI\5I\u0340\nI\3I\3I\3J\3")
        buf.write("J\5J\u0346\nJ\3J\3J\5J\u034a\nJ\3J\3J\5J\u034e\nJ\3J\3")
        buf.write("J\5J\u0352\nJ\3J\3J\5J\u0356\nJ\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\5J\u0360\nJ\5J\u0362\nJ\3K\3K\5K\u0366\nK\3L\3L\3L\3")
        buf.write("L\3L\3L\3L\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u0378\nM\3M\3")
        buf.write("M\3N\3N\3N\3N\3O\3O\5O\u0382\nO\3P\3P\3P\3P\5P\u0388\n")
        buf.write("P\5P\u038a\nP\3Q\3Q\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0397")
        buf.write("\nR\3R\3R\3R\5R\u039c\nR\3S\3S\3S\7S\u03a1\nS\fS\16S\u03a4")
        buf.write("\13S\3S\5S\u03a7\nS\3T\3T\3T\7T\u03ac\nT\fT\16T\u03af")
        buf.write("\13T\3T\5T\u03b2\nT\3U\3U\3U\7U\u03b7\nU\fU\16U\u03ba")
        buf.write("\13U\3U\5U\u03bd\nU\3V\3V\3V\7V\u03c2\nV\fV\16V\u03c5")
        buf.write("\13V\3V\5V\u03c8\nV\3W\3W\3W\7W\u03cd\nW\fW\16W\u03d0")
        buf.write("\13W\3W\5W\u03d3\nW\3X\3X\3X\7X\u03d8\nX\fX\16X\u03db")
        buf.write("\13X\3X\5X\u03de\nX\3X\3\u028a\3|Y\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\2\22\3\2\b\t\3\2\13\r\3\2\16\22\5\2oorrvv\4\2r")
        buf.write("rvv\4\2\\\\^^\3\2\25\35\3\2\63\64\4\2\67\6799\4\2ZZkk")
        buf.write("\4\2^^hi\4\2OOox\4\2__ab\3\2GH\3\2\65\66\3\2tu\2\u042b")
        buf.write("\2\u00b3\3\2\2\2\4\u00b5\3\2\2\2\6\u00bc\3\2\2\2\b\u00c7")
        buf.write("\3\2\2\2\n\u00d2\3\2\2\2\f\u00da\3\2\2\2\16\u00dc\3\2")
        buf.write("\2\2\20\u00de\3\2\2\2\22\u00e0\3\2\2\2\24\u00e4\3\2\2")
        buf.write("\2\26\u00e6\3\2\2\2\30\u00ee\3\2\2\2\32\u00f1\3\2\2\2")
        buf.write("\34\u00f3\3\2\2\2\36\u00fb\3\2\2\2 \u0101\3\2\2\2\"\u0109")
        buf.write("\3\2\2\2$\u010d\3\2\2\2&\u0112\3\2\2\2(\u0124\3\2\2\2")
        buf.write("*\u0126\3\2\2\2,\u0132\3\2\2\2.\u0134\3\2\2\2\60\u0144")
        buf.write("\3\2\2\2\62\u0146\3\2\2\2\64\u014e\3\2\2\2\66\u0156\3")
        buf.write("\2\2\28\u0159\3\2\2\2:\u0163\3\2\2\2<\u018b\3\2\2\2>\u018d")
        buf.write("\3\2\2\2@\u0191\3\2\2\2B\u019a\3\2\2\2D\u019f\3\2\2\2")
        buf.write("F\u01a1\3\2\2\2H\u01a5\3\2\2\2J\u01a9\3\2\2\2L\u01ac\3")
        buf.write("\2\2\2N\u01af\3\2\2\2P\u01b2\3\2\2\2R\u01c0\3\2\2\2T\u01c9")
        buf.write("\3\2\2\2V\u01d0\3\2\2\2X\u01d6\3\2\2\2Z\u01dc\3\2\2\2")
        buf.write("\\\u01e2\3\2\2\2^\u0212\3\2\2\2`\u0214\3\2\2\2b\u021b")
        buf.write("\3\2\2\2d\u021f\3\2\2\2f\u0227\3\2\2\2h\u0230\3\2\2\2")
        buf.write("j\u0237\3\2\2\2l\u023f\3\2\2\2n\u0246\3\2\2\2p\u024a\3")
        buf.write("\2\2\2r\u0256\3\2\2\2t\u0262\3\2\2\2v\u026e\3\2\2\2x\u0276")
        buf.write("\3\2\2\2z\u0279\3\2\2\2|\u02aa\3\2\2\2~\u02d4\3\2\2\2")
        buf.write("\u0080\u02df\3\2\2\2\u0082\u02e1\3\2\2\2\u0084\u02e5\3")
        buf.write("\2\2\2\u0086\u02ef\3\2\2\2\u0088\u02fd\3\2\2\2\u008a\u0311")
        buf.write("\3\2\2\2\u008c\u0328\3\2\2\2\u008e\u032f\3\2\2\2\u0090")
        buf.write("\u033f\3\2\2\2\u0092\u0361\3\2\2\2\u0094\u0363\3\2\2\2")
        buf.write("\u0096\u0367\3\2\2\2\u0098\u036e\3\2\2\2\u009a\u037b\3")
        buf.write("\2\2\2\u009c\u0381\3\2\2\2\u009e\u0389\3\2\2\2\u00a0\u038b")
        buf.write("\3\2\2\2\u00a2\u039b\3\2\2\2\u00a4\u039d\3\2\2\2\u00a6")
        buf.write("\u03a8\3\2\2\2\u00a8\u03b3\3\2\2\2\u00aa\u03be\3\2\2\2")
        buf.write("\u00ac\u03c9\3\2\2\2\u00ae\u03d4\3\2\2\2\u00b0\u00b4\5")
        buf.write("\n\6\2\u00b1\u00b4\5\4\3\2\u00b2\u00b4\5.\30\2\u00b3\u00b0")
        buf.write("\3\2\2\2\u00b3\u00b1\3\2\2\2\u00b3\u00b2\3\2\2\2\u00b4")
        buf.write("\3\3\2\2\2\u00b5\u00b6\7\3\2\2\u00b6\u00b7\7\4\2\2\u00b7")
        buf.write("\u00b8\7T\2\2\u00b8\u00b9\5\6\4\2\u00b9\u00ba\7U\2\2\u00ba")
        buf.write("\u00bb\5\26\f\2\u00bb\5\3\2\2\2\u00bc\u00bd\7P\2\2\u00bd")
        buf.write("\u00c2\5\b\5\2\u00be\u00bf\7Y\2\2\u00bf\u00c1\5\b\5\2")
        buf.write("\u00c0\u00be\3\2\2\2\u00c1\u00c4\3\2\2\2\u00c2\u00c0\3")
        buf.write("\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00c5\3\2\2\2\u00c4\u00c2")
        buf.write("\3\2\2\2\u00c5\u00c6\7Q\2\2\u00c6\7\3\2\2\2\u00c7\u00c8")
        buf.write("\7P\2\2\u00c8\u00cd\5,\27\2\u00c9\u00ca\7Y\2\2\u00ca\u00cc")
        buf.write("\5,\27\2\u00cb\u00c9\3\2\2\2\u00cc\u00cf\3\2\2\2\u00cd")
        buf.write("\u00cb\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00d0\3\2\2\2")
        buf.write("\u00cf\u00cd\3\2\2\2\u00d0\u00d1\7Q\2\2\u00d1\t\3\2\2")
        buf.write("\2\u00d2\u00d3\7\3\2\2\u00d3\u00d4\7\5\2\2\u00d4\u00d5")
        buf.write("\5\f\7\2\u00d5\13\3\2\2\2\u00d6\u00db\5\16\b\2\u00d7\u00db")
        buf.write("\5\22\n\2\u00d8\u00db\5\30\r\2\u00d9\u00db\5\36\20\2\u00da")
        buf.write("\u00d6\3\2\2\2\u00da\u00d7\3\2\2\2\u00da\u00d8\3\2\2\2")
        buf.write("\u00da\u00d9\3\2\2\2\u00db\r\3\2\2\2\u00dc\u00dd\5\20")
        buf.write("\t\2\u00dd\17\3\2\2\2\u00de\u00df\7\7\2\2\u00df\21\3\2")
        buf.write("\2\2\u00e0\u00e2\5\24\13\2\u00e1\u00e3\5\26\f\2\u00e2")
        buf.write("\u00e1\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\23\3\2\2\2\u00e4")
        buf.write("\u00e5\t\2\2\2\u00e5\25\3\2\2\2\u00e6\u00eb\5\u008cG\2")
        buf.write("\u00e7\u00e8\7Y\2\2\u00e8\u00ea\5\u008cG\2\u00e9\u00e7")
        buf.write("\3\2\2\2\u00ea\u00ed\3\2\2\2\u00eb\u00e9\3\2\2\2\u00eb")
        buf.write("\u00ec\3\2\2\2\u00ec\27\3\2\2\2\u00ed\u00eb\3\2\2\2\u00ee")
        buf.write("\u00ef\5\32\16\2\u00ef\u00f0\5\34\17\2\u00f0\31\3\2\2")
        buf.write("\2\u00f1\u00f2\7\n\2\2\u00f2\33\3\2\2\2\u00f3\u00f8\7")
        buf.write("x\2\2\u00f4\u00f5\7Y\2\2\u00f5\u00f7\7x\2\2\u00f6\u00f4")
        buf.write("\3\2\2\2\u00f7\u00fa\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f8")
        buf.write("\u00f9\3\2\2\2\u00f9\35\3\2\2\2\u00fa\u00f8\3\2\2\2\u00fb")
        buf.write("\u00fc\5(\25\2\u00fc\u00fd\5 \21\2\u00fd\37\3\2\2\2\u00fe")
        buf.write("\u0102\5\"\22\2\u00ff\u0102\5$\23\2\u0100\u0102\5&\24")
        buf.write("\2\u0101\u00fe\3\2\2\2\u0101\u00ff\3\2\2\2\u0101\u0100")
        buf.write("\3\2\2\2\u0102!\3\2\2\2\u0103\u010a\5*\26\2\u0104\u0105")
        buf.write("\5*\26\2\u0105\u0106\7T\2\2\u0106\u0107\5\u008cG\2\u0107")
        buf.write("\u0108\7U\2\2\u0108\u010a\3\2\2\2\u0109\u0103\3\2\2\2")
        buf.write("\u0109\u0104\3\2\2\2\u010a#\3\2\2\2\u010b\u010e\5\"\22")
        buf.write("\2\u010c\u010e\5&\24\2\u010d\u010b\3\2\2\2\u010d\u010c")
        buf.write("\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0110\7\24\2\2\u0110")
        buf.write("\u0111\5 \21\2\u0111%\3\2\2\2\u0112\u0113\7\23\2\2\u0113")
        buf.write("\u0114\7T\2\2\u0114\u0115\7P\2\2\u0115\u0116\7P\2\2\u0116")
        buf.write("\u0117\5,\27\2\u0117\u0118\7Y\2\2\u0118\u0119\5,\27\2")
        buf.write("\u0119\u011a\7Q\2\2\u011a\u011b\7Y\2\2\u011b\u011c\7P")
        buf.write("\2\2\u011c\u011d\5,\27\2\u011d\u011e\7Y\2\2\u011e\u011f")
        buf.write("\5,\27\2\u011f\u0120\7Q\2\2\u0120\u0121\7Q\2\2\u0121\u0122")
        buf.write("\7U\2\2\u0122\u0123\5\u008cG\2\u0123\'\3\2\2\2\u0124\u0125")
        buf.write("\t\3\2\2\u0125)\3\2\2\2\u0126\u0127\t\4\2\2\u0127+\3\2")
        buf.write("\2\2\u0128\u012a\7^\2\2\u0129\u0128\3\2\2\2\u0129\u012a")
        buf.write("\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u0133\t\5\2\2\u012c")
        buf.write("\u012e\7^\2\2\u012d\u012c\3\2\2\2\u012d\u012e\3\2\2\2")
        buf.write("\u012e\u012f\3\2\2\2\u012f\u0130\t\6\2\2\u0130\u0131\t")
        buf.write("\7\2\2\u0131\u0133\7o\2\2\u0132\u0129\3\2\2\2\u0132\u012d")
        buf.write("\3\2\2\2\u0133-\3\2\2\2\u0134\u0135\7\3\2\2\u0135\u0136")
        buf.write("\7\6\2\2\u0136\u0137\5\60\31\2\u0137/\3\2\2\2\u0138\u0139")
        buf.write("\5\66\34\2\u0139\u013a\7T\2\2\u013a\u013b\5\64\33\2\u013b")
        buf.write("\u013c\7U\2\2\u013c\u013d\5\26\f\2\u013d\u0145\3\2\2\2")
        buf.write("\u013e\u013f\7\36\2\2\u013f\u0140\7T\2\2\u0140\u0141\5")
        buf.write("\62\32\2\u0141\u0142\7U\2\2\u0142\u0143\5\26\f\2\u0143")
        buf.write("\u0145\3\2\2\2\u0144\u0138\3\2\2\2\u0144\u013e\3\2\2\2")
        buf.write("\u0145\61\3\2\2\2\u0146\u014b\5\6\4\2\u0147\u0148\7Y\2")
        buf.write("\2\u0148\u014a\5\6\4\2\u0149\u0147\3\2\2\2\u014a\u014d")
        buf.write("\3\2\2\2\u014b\u0149\3\2\2\2\u014b\u014c\3\2\2\2\u014c")
        buf.write("\63\3\2\2\2\u014d\u014b\3\2\2\2\u014e\u0153\7v\2\2\u014f")
        buf.write("\u0150\7Y\2\2\u0150\u0152\7v\2\2\u0151\u014f\3\2\2\2\u0152")
        buf.write("\u0155\3\2\2\2\u0153\u0151\3\2\2\2\u0153\u0154\3\2\2\2")
        buf.write("\u0154\65\3\2\2\2\u0155\u0153\3\2\2\2\u0156\u0157\t\b")
        buf.write("\2\2\u0157\67\3\2\2\2\u0158\u015a\5:\36\2\u0159\u0158")
        buf.write("\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015e\3\2\2\2\u015b")
        buf.write("\u015d\5<\37\2\u015c\u015b\3\2\2\2\u015d\u0160\3\2\2\2")
        buf.write("\u015e\u015c\3\2\2\2\u015e\u015f\3\2\2\2\u015f\u0161\3")
        buf.write("\2\2\2\u0160\u015e\3\2\2\2\u0161\u0162\7\2\2\3\u01629")
        buf.write("\3\2\2\2\u0163\u0164\7\37\2\2\u0164\u0165\7\177\2\2\u0165")
        buf.write("\u0166\7W\2\2\u0166;\3\2\2\2\u0167\u018c\5B\"\2\u0168")
        buf.write("\u016a\5> \2\u0169\u0168\3\2\2\2\u016a\u016d\3\2\2\2\u016b")
        buf.write("\u0169\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u0189\3\2\2\2")
        buf.write("\u016d\u016b\3\2\2\2\u016e\u018a\5d\63\2\u016f\u018a\5")
        buf.write("v<\2\u0170\u018a\5X-\2\u0171\u018a\5Z.\2\u0172\u018a\5")
        buf.write("J&\2\u0173\u018a\5F$\2\u0174\u018a\5f\64\2\u0175\u018a")
        buf.write("\5h\65\2\u0176\u018a\5L\'\2\u0177\u018a\5p9\2\u0178\u018a")
        buf.write("\5z>\2\u0179\u018a\5\\/\2\u017a\u018a\5N(\2\u017b\u018a")
        buf.write("\5x=\2\u017c\u018a\5r:\2\u017d\u018a\5P)\2\u017e\u018a")
        buf.write("\5^\60\2\u017f\u018a\5t;\2\u0180\u018a\5R*\2\u0181\u018a")
        buf.write("\5H%\2\u0182\u018a\5j\66\2\u0183\u018a\5`\61\2\u0184\u018a")
        buf.write("\5l\67\2\u0185\u018a\5n8\2\u0186\u018a\5b\62\2\u0187\u018a")
        buf.write("\5T+\2\u0188\u018a\5V,\2\u0189\u016e\3\2\2\2\u0189\u016f")
        buf.write("\3\2\2\2\u0189\u0170\3\2\2\2\u0189\u0171\3\2\2\2\u0189")
        buf.write("\u0172\3\2\2\2\u0189\u0173\3\2\2\2\u0189\u0174\3\2\2\2")
        buf.write("\u0189\u0175\3\2\2\2\u0189\u0176\3\2\2\2\u0189\u0177\3")
        buf.write("\2\2\2\u0189\u0178\3\2\2\2\u0189\u0179\3\2\2\2\u0189\u017a")
        buf.write("\3\2\2\2\u0189\u017b\3\2\2\2\u0189\u017c\3\2\2\2\u0189")
        buf.write("\u017d\3\2\2\2\u0189\u017e\3\2\2\2\u0189\u017f\3\2\2\2")
        buf.write("\u0189\u0180\3\2\2\2\u0189\u0181\3\2\2\2\u0189\u0182\3")
        buf.write("\2\2\2\u0189\u0183\3\2\2\2\u0189\u0184\3\2\2\2\u0189\u0185")
        buf.write("\3\2\2\2\u0189\u0186\3\2\2\2\u0189\u0187\3\2\2\2\u0189")
        buf.write("\u0188\3\2\2\2\u018a\u018c\3\2\2\2\u018b\u0167\3\2\2\2")
        buf.write("\u018b\u016b\3\2\2\2\u018c=\3\2\2\2\u018d\u018f\7\62\2")
        buf.write("\2\u018e\u0190\7\u0082\2\2\u018f\u018e\3\2\2\2\u018f\u0190")
        buf.write("\3\2\2\2\u0190?\3\2\2\2\u0191\u0195\7R\2\2\u0192\u0194")
        buf.write("\5<\37\2\u0193\u0192\3\2\2\2\u0194\u0197\3\2\2\2\u0195")
        buf.write("\u0193\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0198\3\2\2\2")
        buf.write("\u0197\u0195\3\2\2\2\u0198\u0199\7S\2\2\u0199A\3\2\2\2")
        buf.write("\u019a\u019b\7\61\2\2\u019b\u019c\7\u0082\2\2\u019cC\3")
        buf.write("\2\2\2\u019d\u01a0\5<\37\2\u019e\u01a0\5@!\2\u019f\u019d")
        buf.write("\3\2\2\2\u019f\u019e\3\2\2\2\u01a0E\3\2\2\2\u01a1\u01a2")
        buf.write("\7!\2\2\u01a2\u01a3\7y\2\2\u01a3\u01a4\7W\2\2\u01a4G\3")
        buf.write("\2\2\2\u01a5\u01a6\7 \2\2\u01a6\u01a7\7y\2\2\u01a7\u01a8")
        buf.write("\7W\2\2\u01a8I\3\2\2\2\u01a9\u01aa\7(\2\2\u01aa\u01ab")
        buf.write("\7W\2\2\u01abK\3\2\2\2\u01ac\u01ad\7)\2\2\u01ad\u01ae")
        buf.write("\7W\2\2\u01aeM\3\2\2\2\u01af\u01b0\7,\2\2\u01b0\u01b1")
        buf.write("\7W\2\2\u01b1O\3\2\2\2\u01b2\u01b3\7.\2\2\u01b3\u01b4")
        buf.write("\5\u0092J\2\u01b4\u01b5\7t\2\2\u01b5\u01bc\7\60\2\2\u01b6")
        buf.write("\u01bd\5\u0086D\2\u01b7\u01b8\7P\2\2\u01b8\u01b9\5\u0084")
        buf.write("C\2\u01b9\u01ba\7Q\2\2\u01ba\u01bd\3\2\2\2\u01bb\u01bd")
        buf.write("\7t\2\2\u01bc\u01b6\3\2\2\2\u01bc\u01b7\3\2\2\2\u01bc")
        buf.write("\u01bb\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01bf\5D#\2\u01bf")
        buf.write("Q\3\2\2\2\u01c0\u01c1\7*\2\2\u01c1\u01c2\7T\2\2\u01c2")
        buf.write("\u01c3\5|?\2\u01c3\u01c4\7U\2\2\u01c4\u01c7\5D#\2\u01c5")
        buf.write("\u01c6\7+\2\2\u01c6\u01c8\5D#\2\u01c7\u01c5\3\2\2\2\u01c7")
        buf.write("\u01c8\3\2\2\2\u01c8S\3\2\2\2\u01c9\u01cc\7-\2\2\u01ca")
        buf.write("\u01cd\5|?\2\u01cb\u01cd\5\u0082B\2\u01cc\u01ca\3\2\2")
        buf.write("\2\u01cc\u01cb\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01ce")
        buf.write("\3\2\2\2\u01ce\u01cf\7W\2\2\u01cfU\3\2\2\2\u01d0\u01d1")
        buf.write("\7/\2\2\u01d1\u01d2\7T\2\2\u01d2\u01d3\5|?\2\u01d3\u01d4")
        buf.write("\7U\2\2\u01d4\u01d5\5D#\2\u01d5W\3\2\2\2\u01d6\u01d8\7")
        buf.write("N\2\2\u01d7\u01d9\5\u00acW\2\u01d8\u01d7\3\2\2\2\u01d8")
        buf.write("\u01d9\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01db\7W\2\2")
        buf.write("\u01dbY\3\2\2\2\u01dc\u01de\7&\2\2\u01dd\u01df\5\u009a")
        buf.write("N\2\u01de\u01dd\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e0")
        buf.write("\3\2\2\2\u01e0\u01e1\5@!\2\u01e1[\3\2\2\2\u01e2\u01e3")
        buf.write("\7K\2\2\u01e3\u01e5\5\u009aN\2\u01e4\u01e6\5\u00acW\2")
        buf.write("\u01e5\u01e4\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e7\3")
        buf.write("\2\2\2\u01e7\u01e8\7W\2\2\u01e8]\3\2\2\2\u01e9\u01eb\5")
        buf.write("\u0090I\2\u01ea\u01e9\3\2\2\2\u01eb\u01ee\3\2\2\2\u01ec")
        buf.write("\u01ea\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed\u01ef\3\2\2\2")
        buf.write("\u01ee\u01ec\3\2\2\2\u01ef\u01f5\7t\2\2\u01f0\u01f2\7")
        buf.write("T\2\2\u01f1\u01f3\5\u00a6T\2\u01f2\u01f1\3\2\2\2\u01f2")
        buf.write("\u01f3\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4\u01f6\7U\2\2")
        buf.write("\u01f5\u01f0\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u01f8\3")
        buf.write("\2\2\2\u01f7\u01f9\5\u009aN\2\u01f8\u01f7\3\2\2\2\u01f8")
        buf.write("\u01f9\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fb\5\u00ac")
        buf.write("W\2\u01fb\u01fc\7W\2\2\u01fc\u0213\3\2\2\2\u01fd\u01ff")
        buf.write("\5\u0090I\2\u01fe\u01fd\3\2\2\2\u01ff\u0202\3\2\2\2\u0200")
        buf.write("\u01fe\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0203\3\2\2\2")
        buf.write("\u0202\u0200\3\2\2\2\u0203\u0209\7D\2\2\u0204\u0206\7")
        buf.write("T\2\2\u0205\u0207\5\u00a6T\2\u0206\u0205\3\2\2\2\u0206")
        buf.write("\u0207\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u020a\7U\2\2")
        buf.write("\u0209\u0204\3\2\2\2\u0209\u020a\3\2\2\2\u020a\u020c\3")
        buf.write("\2\2\2\u020b\u020d\5\u009aN\2\u020c\u020b\3\2\2\2\u020c")
        buf.write("\u020d\3\2\2\2\u020d\u020f\3\2\2\2\u020e\u0210\5\u00ac")
        buf.write("W\2\u020f\u020e\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0211")
        buf.write("\3\2\2\2\u0211\u0213\7W\2\2\u0212\u01ec\3\2\2\2\u0212")
        buf.write("\u0200\3\2\2\2\u0213_\3\2\2\2\u0214\u0217\5\u0082B\2\u0215")
        buf.write("\u0216\7[\2\2\u0216\u0218\5\u008cG\2\u0217\u0215\3\2\2")
        buf.write("\2\u0217\u0218\3\2\2\2\u0218\u0219\3\2\2\2\u0219\u021a")
        buf.write("\7W\2\2\u021aa\3\2\2\2\u021b\u021c\7L\2\2\u021c\u021d")
        buf.write("\5\u009cO\2\u021d\u021e\7W\2\2\u021ec\3\2\2\2\u021f\u0220")
        buf.write("\7\'\2\2\u0220\u0221\7t\2\2\u0221\u0222\7Z\2\2\u0222\u0223")
        buf.write("\5~@\2\u0223\u0224\7W\2\2\u0224e\3\2\2\2\u0225\u0228\5")
        buf.write("\u0092J\2\u0226\u0228\5\u0096L\2\u0227\u0225\3\2\2\2\u0227")
        buf.write("\u0226\3\2\2\2\u0228\u0229\3\2\2\2\u0229\u022c\7t\2\2")
        buf.write("\u022a\u022b\7Z\2\2\u022b\u022d\5\u0080A\2\u022c\u022a")
        buf.write("\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u022e\3\2\2\2\u022e")
        buf.write("\u022f\7W\2\2\u022fg\3\2\2\2\u0230\u0231\7\65\2\2\u0231")
        buf.write("\u0232\5\u0092J\2\u0232\u0233\7t\2\2\u0233\u0234\7Z\2")
        buf.write("\2\u0234\u0235\5\u0080A\2\u0235\u0236\7W\2\2\u0236i\3")
        buf.write("\2\2\2\u0237\u023a\t\t\2\2\u0238\u023b\5\u0092J\2\u0239")
        buf.write("\u023b\5\u0096L\2\u023a\u0238\3\2\2\2\u023a\u0239\3\2")
        buf.write("\2\2\u023b\u023c\3\2\2\2\u023c\u023d\7t\2\2\u023d\u023e")
        buf.write("\7W\2\2\u023ek\3\2\2\2\u023f\u0240\t\n\2\2\u0240\u0242")
        buf.write("\7t\2\2\u0241\u0243\5\u009aN\2\u0242\u0241\3\2\2\2\u0242")
        buf.write("\u0243\3\2\2\2\u0243\u0244\3\2\2\2\u0244\u0245\7W\2\2")
        buf.write("\u0245m\3\2\2\2\u0246\u0247\5\u0094K\2\u0247\u0248\7t")
        buf.write("\2\2\u0248\u0249\7W\2\2\u0249o\3\2\2\2\u024a\u024b\7\"")
        buf.write("\2\2\u024b\u024c\7t\2\2\u024c\u024e\7T\2\2\u024d\u024f")
        buf.write("\5\u00a4S\2\u024e\u024d\3\2\2\2\u024e\u024f\3\2\2\2\u024f")
        buf.write("\u0250\3\2\2\2\u0250\u0252\7U\2\2\u0251\u0253\5\u008e")
        buf.write("H\2\u0252\u0251\3\2\2\2\u0252\u0253\3\2\2\2\u0253\u0254")
        buf.write("\3\2\2\2\u0254\u0255\5@!\2\u0255q\3\2\2\2\u0256\u0257")
        buf.write("\7%\2\2\u0257\u0258\7t\2\2\u0258\u025a\7T\2\2\u0259\u025b")
        buf.write("\5\u00aeX\2\u025a\u0259\3\2\2\2\u025a\u025b\3\2\2\2\u025b")
        buf.write("\u025c\3\2\2\2\u025c\u025e\7U\2\2\u025d\u025f\5\u008e")
        buf.write("H\2\u025e\u025d\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0260")
        buf.write("\3\2\2\2\u0260\u0261\7W\2\2\u0261s\3\2\2\2\u0262\u0263")
        buf.write("\7$\2\2\u0263\u0269\7t\2\2\u0264\u0266\7T\2\2\u0265\u0267")
        buf.write("\5\u00aaV\2\u0266\u0265\3\2\2\2\u0266\u0267\3\2\2\2\u0267")
        buf.write("\u0268\3\2\2\2\u0268\u026a\7U\2\2\u0269\u0264\3\2\2\2")
        buf.write("\u0269\u026a\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026c\5")
        buf.write("\u00aaV\2\u026c\u026d\5@!\2\u026du\3\2\2\2\u026e\u026f")
        buf.write("\5\u008cG\2\u026f\u0272\t\13\2\2\u0270\u0273\5|?\2\u0271")
        buf.write("\u0273\5\u0082B\2\u0272\u0270\3\2\2\2\u0272\u0271\3\2")
        buf.write("\2\2\u0273\u0274\3\2\2\2\u0274\u0275\7W\2\2\u0275w\3\2")
        buf.write("\2\2\u0276\u0277\5|?\2\u0277\u0278\7W\2\2\u0278y\3\2\2")
        buf.write("\2\u0279\u027a\7#\2\2\u027a\u0280\7t\2\2\u027b\u027d\7")
        buf.write("T\2\2\u027c\u027e\5\u00a4S\2\u027d\u027c\3\2\2\2\u027d")
        buf.write("\u027e\3\2\2\2\u027e\u027f\3\2\2\2\u027f\u0281\7U\2\2")
        buf.write("\u0280\u027b\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u0282\3")
        buf.write("\2\2\2\u0282\u0284\5\u00a8U\2\u0283\u0285\5\u008eH\2\u0284")
        buf.write("\u0283\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u0286\3\2\2\2")
        buf.write("\u0286\u028a\7R\2\2\u0287\u0289\13\2\2\2\u0288\u0287\3")
        buf.write("\2\2\2\u0289\u028c\3\2\2\2\u028a\u028b\3\2\2\2\u028a\u0288")
        buf.write("\3\2\2\2\u028b\u028d\3\2\2\2\u028c\u028a\3\2\2\2\u028d")
        buf.write("\u028e\7S\2\2\u028e{\3\2\2\2\u028f\u0290\b?\1\2\u0290")
        buf.write("\u0291\7T\2\2\u0291\u0292\5|?\2\u0292\u0293\7U\2\2\u0293")
        buf.write("\u02ab\3\2\2\2\u0294\u0295\t\f\2\2\u0295\u02ab\5|?\21")
        buf.write("\u0296\u0299\5\u0092J\2\u0297\u0299\5\u0096L\2\u0298\u0296")
        buf.write("\3\2\2\2\u0298\u0297\3\2\2\2\u0299\u029a\3\2\2\2\u029a")
        buf.write("\u029b\7T\2\2\u029b\u029c\5|?\2\u029c\u029d\7U\2\2\u029d")
        buf.write("\u02ab\3\2\2\2\u029e\u029f\7J\2\2\u029f\u02a0\7T\2\2\u02a0")
        buf.write("\u02a1\5@!\2\u02a1\u02a2\7U\2\2\u02a2\u02ab\3\2\2\2\u02a3")
        buf.write("\u02a4\7t\2\2\u02a4\u02a6\7T\2\2\u02a5\u02a7\5\u00a6T")
        buf.write("\2\u02a6\u02a5\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a8")
        buf.write("\3\2\2\2\u02a8\u02ab\7U\2\2\u02a9\u02ab\t\r\2\2\u02aa")
        buf.write("\u028f\3\2\2\2\u02aa\u0294\3\2\2\2\u02aa\u0298\3\2\2\2")
        buf.write("\u02aa\u029e\3\2\2\2\u02aa\u02a3\3\2\2\2\u02aa\u02a9\3")
        buf.write("\2\2\2\u02ab\u02d1\3\2\2\2\u02ac\u02ad\f\22\2\2\u02ad")
        buf.write("\u02ae\7`\2\2\u02ae\u02d0\5|?\22\u02af\u02b0\f\20\2\2")
        buf.write("\u02b0\u02b1\t\16\2\2\u02b1\u02d0\5|?\21\u02b2\u02b3\f")
        buf.write("\17\2\2\u02b3\u02b4\t\7\2\2\u02b4\u02d0\5|?\20\u02b5\u02b6")
        buf.write("\f\16\2\2\u02b6\u02b7\7m\2\2\u02b7\u02d0\5|?\17\u02b8")
        buf.write("\u02b9\f\r\2\2\u02b9\u02ba\7l\2\2\u02ba\u02d0\5|?\16\u02bb")
        buf.write("\u02bc\f\f\2\2\u02bc\u02bd\7j\2\2\u02bd\u02d0\5|?\r\u02be")
        buf.write("\u02bf\f\13\2\2\u02bf\u02c0\7e\2\2\u02c0\u02d0\5|?\f\u02c1")
        buf.write("\u02c2\f\n\2\2\u02c2\u02c3\7g\2\2\u02c3\u02d0\5|?\13\u02c4")
        buf.write("\u02c5\f\t\2\2\u02c5\u02c6\7c\2\2\u02c6\u02d0\5|?\n\u02c7")
        buf.write("\u02c8\f\b\2\2\u02c8\u02c9\7f\2\2\u02c9\u02d0\5|?\t\u02ca")
        buf.write("\u02cb\f\7\2\2\u02cb\u02cc\7d\2\2\u02cc\u02d0\5|?\b\u02cd")
        buf.write("\u02ce\f\23\2\2\u02ce\u02d0\5\u008aF\2\u02cf\u02ac\3\2")
        buf.write("\2\2\u02cf\u02af\3\2\2\2\u02cf\u02b2\3\2\2\2\u02cf\u02b5")
        buf.write("\3\2\2\2\u02cf\u02b8\3\2\2\2\u02cf\u02bb\3\2\2\2\u02cf")
        buf.write("\u02be\3\2\2\2\u02cf\u02c1\3\2\2\2\u02cf\u02c4\3\2\2\2")
        buf.write("\u02cf\u02c7\3\2\2\2\u02cf\u02ca\3\2\2\2\u02cf\u02cd\3")
        buf.write("\2\2\2\u02d0\u02d3\3\2\2\2\u02d1\u02cf\3\2\2\2\u02d1\u02d2")
        buf.write("\3\2\2\2\u02d2}\3\2\2\2\u02d3\u02d1\3\2\2\2\u02d4\u02d9")
        buf.write("\5|?\2\u02d5\u02d6\7]\2\2\u02d6\u02d8\5|?\2\u02d7\u02d5")
        buf.write("\3\2\2\2\u02d8\u02db\3\2\2\2\u02d9\u02d7\3\2\2\2\u02d9")
        buf.write("\u02da\3\2\2\2\u02da\177\3\2\2\2\u02db\u02d9\3\2\2\2\u02dc")
        buf.write("\u02e0\5\u0088E\2\u02dd\u02e0\5|?\2\u02de\u02e0\5\u0082")
        buf.write("B\2\u02df\u02dc\3\2\2\2\u02df\u02dd\3\2\2\2\u02df\u02de")
        buf.write("\3\2\2\2\u02e0\u0081\3\2\2\2\u02e1\u02e2\7M\2\2\u02e2")
        buf.write("\u02e3\5\u009cO\2\u02e3\u0083\3\2\2\2\u02e4\u02e6\5|?")
        buf.write("\2\u02e5\u02e4\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7")
        buf.write("\3\2\2\2\u02e7\u02e9\7V\2\2\u02e8\u02ea\5|?\2\u02e9\u02e8")
        buf.write("\3\2\2\2\u02e9\u02ea\3\2\2\2\u02ea\u02ed\3\2\2\2\u02eb")
        buf.write("\u02ec\7V\2\2\u02ec\u02ee\5|?\2\u02ed\u02eb\3\2\2\2\u02ed")
        buf.write("\u02ee\3\2\2\2\u02ee\u0085\3\2\2\2\u02ef\u02f0\7R\2\2")
        buf.write("\u02f0\u02f5\5|?\2\u02f1\u02f2\7Y\2\2\u02f2\u02f4\5|?")
        buf.write("\2\u02f3\u02f1\3\2\2\2\u02f4\u02f7\3\2\2\2\u02f5\u02f3")
        buf.write("\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u02f9\3\2\2\2\u02f7")
        buf.write("\u02f5\3\2\2\2\u02f8\u02fa\7Y\2\2\u02f9\u02f8\3\2\2\2")
        buf.write("\u02f9\u02fa\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02fc\7")
        buf.write("S\2\2\u02fc\u0087\3\2\2\2\u02fd\u0300\7R\2\2\u02fe\u0301")
        buf.write("\5|?\2\u02ff\u0301\5\u0088E\2\u0300\u02fe\3\2\2\2\u0300")
        buf.write("\u02ff\3\2\2\2\u0301\u0309\3\2\2\2\u0302\u0305\7Y\2\2")
        buf.write("\u0303\u0306\5|?\2\u0304\u0306\5\u0088E\2\u0305\u0303")
        buf.write("\3\2\2\2\u0305\u0304\3\2\2\2\u0306\u0308\3\2\2\2\u0307")
        buf.write("\u0302\3\2\2\2\u0308\u030b\3\2\2\2\u0309\u0307\3\2\2\2")
        buf.write("\u0309\u030a\3\2\2\2\u030a\u030d\3\2\2\2\u030b\u0309\3")
        buf.write("\2\2\2\u030c\u030e\7Y\2\2\u030d\u030c\3\2\2\2\u030d\u030e")
        buf.write("\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0310\7S\2\2\u0310")
        buf.write("\u0089\3\2\2\2\u0311\u0324\7P\2\2\u0312\u0325\5\u0086")
        buf.write("D\2\u0313\u0316\5|?\2\u0314\u0316\5\u0084C\2\u0315\u0313")
        buf.write("\3\2\2\2\u0315\u0314\3\2\2\2\u0316\u031e\3\2\2\2\u0317")
        buf.write("\u031a\7Y\2\2\u0318\u031b\5|?\2\u0319\u031b\5\u0084C\2")
        buf.write("\u031a\u0318\3\2\2\2\u031a\u0319\3\2\2\2\u031b\u031d\3")
        buf.write("\2\2\2\u031c\u0317\3\2\2\2\u031d\u0320\3\2\2\2\u031e\u031c")
        buf.write("\3\2\2\2\u031e\u031f\3\2\2\2\u031f\u0322\3\2\2\2\u0320")
        buf.write("\u031e\3\2\2\2\u0321\u0323\7Y\2\2\u0322\u0321\3\2\2\2")
        buf.write("\u0322\u0323\3\2\2\2\u0323\u0325\3\2\2\2\u0324\u0312\3")
        buf.write("\2\2\2\u0324\u0315\3\2\2\2\u0325\u0326\3\2\2\2\u0326\u0327")
        buf.write("\7Q\2\2\u0327\u008b\3\2\2\2\u0328\u032c\7t\2\2\u0329\u032b")
        buf.write("\5\u008aF\2\u032a\u0329\3\2\2\2\u032b\u032e\3\2\2\2\u032c")
        buf.write("\u032a\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u008d\3\2\2\2")
        buf.write("\u032e\u032c\3\2\2\2\u032f\u0330\7[\2\2\u0330\u0331\5")
        buf.write("\u0092J\2\u0331\u008f\3\2\2\2\u0332\u0340\7E\2\2\u0333")
        buf.write("\u0334\7F\2\2\u0334\u0335\7T\2\2\u0335\u0336\5|?\2\u0336")
        buf.write("\u0337\7U\2\2\u0337\u0340\3\2\2\2\u0338\u033d\t\17\2\2")
        buf.write("\u0339\u033a\7T\2\2\u033a\u033b\5|?\2\u033b\u033c\7U\2")
        buf.write("\2\u033c\u033e\3\2\2\2\u033d\u0339\3\2\2\2\u033d\u033e")
        buf.write("\3\2\2\2\u033e\u0340\3\2\2\2\u033f\u0332\3\2\2\2\u033f")
        buf.write("\u0333\3\2\2\2\u033f\u0338\3\2\2\2\u0340\u0341\3\2\2\2")
        buf.write("\u0341\u0342\7\24\2\2\u0342\u0091\3\2\2\2\u0343\u0345")
        buf.write("\7;\2\2\u0344\u0346\5\u009aN\2\u0345\u0344\3\2\2\2\u0345")
        buf.write("\u0346\3\2\2\2\u0346\u0362\3\2\2\2\u0347\u0349\7<\2\2")
        buf.write("\u0348\u034a\5\u009aN\2\u0349\u0348\3\2\2\2\u0349\u034a")
        buf.write("\3\2\2\2\u034a\u0362\3\2\2\2\u034b\u034d\7=\2\2\u034c")
        buf.write("\u034e\5\u009aN\2\u034d\u034c\3\2\2\2\u034d\u034e\3\2")
        buf.write("\2\2\u034e\u0362\3\2\2\2\u034f\u0351\7>\2\2\u0350\u0352")
        buf.write("\5\u009aN\2\u0351\u0350\3\2\2\2\u0351\u0352\3\2\2\2\u0352")
        buf.write("\u0362\3\2\2\2\u0353\u0355\7?\2\2\u0354\u0356\5\u009a")
        buf.write("N\2\u0355\u0354\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u0362")
        buf.write("\3\2\2\2\u0357\u0362\7:\2\2\u0358\u0362\7B\2\2\u0359\u0362")
        buf.write("\7C\2\2\u035a\u035f\7@\2\2\u035b\u035c\7P\2\2\u035c\u035d")
        buf.write("\5\u0092J\2\u035d\u035e\7Q\2\2\u035e\u0360\3\2\2\2\u035f")
        buf.write("\u035b\3\2\2\2\u035f\u0360\3\2\2\2\u0360\u0362\3\2\2\2")
        buf.write("\u0361\u0343\3\2\2\2\u0361\u0347\3\2\2\2\u0361\u034b\3")
        buf.write("\2\2\2\u0361\u034f\3\2\2\2\u0361\u0353\3\2\2\2\u0361\u0357")
        buf.write("\3\2\2\2\u0361\u0358\3\2\2\2\u0361\u0359\3\2\2\2\u0361")
        buf.write("\u035a\3\2\2\2\u0362\u0093\3\2\2\2\u0363\u0365\78\2\2")
        buf.write("\u0364\u0366\5\u009aN\2\u0365\u0364\3\2\2\2\u0365\u0366")
        buf.write("\3\2\2\2\u0366\u0095\3\2\2\2\u0367\u0368\7A\2\2\u0368")
        buf.write("\u0369\7P\2\2\u0369\u036a\5\u0092J\2\u036a\u036b\7Y\2")
        buf.write("\2\u036b\u036c\5\u00a6T\2\u036c\u036d\7Q\2\2\u036d\u0097")
        buf.write("\3\2\2\2\u036e\u036f\t\20\2\2\u036f\u0370\7A\2\2\u0370")
        buf.write("\u0371\7P\2\2\u0371\u0372\5\u0092J\2\u0372\u0377\7Y\2")
        buf.write("\2\u0373\u0378\5\u00a6T\2\u0374\u0375\7I\2\2\u0375\u0376")
        buf.write("\7Z\2\2\u0376\u0378\5|?\2\u0377\u0373\3\2\2\2\u0377\u0374")
        buf.write("\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037a\7Q\2\2\u037a")
        buf.write("\u0099\3\2\2\2\u037b\u037c\7P\2\2\u037c\u037d\5|?\2\u037d")
        buf.write("\u037e\7Q\2\2\u037e\u009b\3\2\2\2\u037f\u0382\5\u008c")
        buf.write("G\2\u0380\u0382\7u\2\2\u0381\u037f\3\2\2\2\u0381\u0380")
        buf.write("\3\2\2\2\u0382\u009d\3\2\2\2\u0383\u038a\5\u0092J\2\u0384")
        buf.write("\u038a\5\u0098M\2\u0385\u0387\79\2\2\u0386\u0388\5\u009a")
        buf.write("N\2\u0387\u0386\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u038a")
        buf.write("\3\2\2\2\u0389\u0383\3\2\2\2\u0389\u0384\3\2\2\2\u0389")
        buf.write("\u0385\3\2\2\2\u038a\u009f\3\2\2\2\u038b\u038c\t\21\2")
        buf.write("\2\u038c\u00a1\3\2\2\2\u038d\u038e\5\u0092J\2\u038e\u038f")
        buf.write("\7t\2\2\u038f\u039c\3\2\2\2\u0390\u0391\5\u0094K\2\u0391")
        buf.write("\u0392\7t\2\2\u0392\u039c\3\2\2\2\u0393\u0394\t\n\2\2")
        buf.write("\u0394\u0396\7t\2\2\u0395\u0397\5\u009aN\2\u0396\u0395")
        buf.write("\3\2\2\2\u0396\u0397\3\2\2\2\u0397\u039c\3\2\2\2\u0398")
        buf.write("\u0399\5\u0098M\2\u0399\u039a\7t\2\2\u039a\u039c\3\2\2")
        buf.write("\2\u039b\u038d\3\2\2\2\u039b\u0390\3\2\2\2\u039b\u0393")
        buf.write("\3\2\2\2\u039b\u0398\3\2\2\2\u039c\u00a3\3\2\2\2\u039d")
        buf.write("\u03a2\5\u00a2R\2\u039e\u039f\7Y\2\2\u039f\u03a1\5\u00a2")
        buf.write("R\2\u03a0\u039e\3\2\2\2\u03a1\u03a4\3\2\2\2\u03a2\u03a0")
        buf.write("\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a6\3\2\2\2\u03a4")
        buf.write("\u03a2\3\2\2\2\u03a5\u03a7\7Y\2\2\u03a6\u03a5\3\2\2\2")
        buf.write("\u03a6\u03a7\3\2\2\2\u03a7\u00a5\3\2\2\2\u03a8\u03ad\5")
        buf.write("|?\2\u03a9\u03aa\7Y\2\2\u03aa\u03ac\5|?\2\u03ab\u03a9")
        buf.write("\3\2\2\2\u03ac\u03af\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ad")
        buf.write("\u03ae\3\2\2\2\u03ae\u03b1\3\2\2\2\u03af\u03ad\3\2\2\2")
        buf.write("\u03b0\u03b2\7Y\2\2\u03b1\u03b0\3\2\2\2\u03b1\u03b2\3")
        buf.write("\2\2\2\u03b2\u00a7\3\2\2\2\u03b3\u03b8\5\u00a0Q\2\u03b4")
        buf.write("\u03b5\7Y\2\2\u03b5\u03b7\5\u00a0Q\2\u03b6\u03b4\3\2\2")
        buf.write("\2\u03b7\u03ba\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b8\u03b9")
        buf.write("\3\2\2\2\u03b9\u03bc\3\2\2\2\u03ba\u03b8\3\2\2\2\u03bb")
        buf.write("\u03bd\7Y\2\2\u03bc\u03bb\3\2\2\2\u03bc\u03bd\3\2\2\2")
        buf.write("\u03bd\u00a9\3\2\2\2\u03be\u03c3\7t\2\2\u03bf\u03c0\7")
        buf.write("Y\2\2\u03c0\u03c2\7t\2\2\u03c1\u03bf\3\2\2\2\u03c2\u03c5")
        buf.write("\3\2\2\2\u03c3\u03c1\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4")
        buf.write("\u03c7\3\2\2\2\u03c5\u03c3\3\2\2\2\u03c6\u03c8\7Y\2\2")
        buf.write("\u03c7\u03c6\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u00ab\3")
        buf.write("\2\2\2\u03c9\u03ce\5\u009cO\2\u03ca\u03cb\7Y\2\2\u03cb")
        buf.write("\u03cd\5\u009cO\2\u03cc\u03ca\3\2\2\2\u03cd\u03d0\3\2")
        buf.write("\2\2\u03ce\u03cc\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03d2")
        buf.write("\3\2\2\2\u03d0\u03ce\3\2\2\2\u03d1\u03d3\7Y\2\2\u03d2")
        buf.write("\u03d1\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u00ad\3\2\2\2")
        buf.write("\u03d4\u03d9\5\u009eP\2\u03d5\u03d6\7Y\2\2\u03d6\u03d8")
        buf.write("\5\u009eP\2\u03d7\u03d5\3\2\2\2\u03d8\u03db\3\2\2\2\u03d9")
        buf.write("\u03d7\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03dd\3\2\2\2")
        buf.write("\u03db\u03d9\3\2\2\2\u03dc\u03de\7Y\2\2\u03dd\u03dc\3")
        buf.write("\2\2\2\u03dd\u03de\3\2\2\2\u03de\u00af\3\2\2\2l\u00b3")
        buf.write("\u00c2\u00cd\u00da\u00e2\u00eb\u00f8\u0101\u0109\u010d")
        buf.write("\u0129\u012d\u0132\u0144\u014b\u0153\u0159\u015e\u016b")
        buf.write("\u0189\u018b\u018f\u0195\u019f\u01bc\u01c7\u01cc\u01d8")
        buf.write("\u01de\u01e5\u01ec\u01f2\u01f5\u01f8\u0200\u0206\u0209")
        buf.write("\u020c\u020f\u0212\u0217\u0227\u022c\u023a\u0242\u024e")
        buf.write("\u0252\u025a\u025e\u0266\u0269\u0272\u027d\u0280\u0284")
        buf.write("\u028a\u0298\u02a6\u02aa\u02cf\u02d1\u02d9\u02df\u02e5")
        buf.write("\u02e9\u02ed\u02f5\u02f9\u0300\u0305\u0309\u030d\u0315")
        buf.write("\u031a\u031e\u0322\u0324\u032c\u033d\u033f\u0345\u0349")
        buf.write("\u034d\u0351\u0355\u035f\u0361\u0365\u0377\u0381\u0387")
        buf.write("\u0389\u0396\u039b\u03a2\u03a6\u03ad\u03b1\u03b8\u03bc")
        buf.write("\u03c3\u03c7\u03ce\u03d2\u03d9\u03dd")
        return buf.getvalue()


class BraketPragmasParser ( Parser ):

    grammarFileName = "BraketPragmasParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'braket'", "'unitary'", "'result'", "'noise'", 
                     "'state_vector'", "'probability'", "'density_matrix'", 
                     "'amplitude'", "'expectation'", "'variance'", "'sample'", 
                     "'x'", "'y'", "'z'", "'i'", "'h'", "'hermitian'", "'@'", 
                     "'bit_flip'", "'phase_flip'", "'pauli_channel'", "'depolarizing'", 
                     "'two_qubit_depolarizing'", "'two_qubit_dephasing'", 
                     "'amplitude_damping'", "'generalized_amplitude_damping'", 
                     "'phase_damping'", "'kraus'", "'OPENQASM'", "'include'", 
                     "'defcalgrammar'", "'def'", "'defcal'", "'gate'", "'extern'", 
                     "'box'", "'let'", "'break'", "'continue'", "'if'", 
                     "'else'", "'end'", "'return'", "'for'", "'while'", 
                     "'in'", "<INVALID>", "<INVALID>", "'input'", "'output'", 
                     "'const'", "'mutable'", "'qreg'", "'qubit'", "'creg'", 
                     "'bool'", "'bit'", "'int'", "'uint'", "'float'", "'angle'", 
                     "'complex'", "'array'", "'duration'", "'stretch'", 
                     "'gphase'", "'inv'", "'pow'", "'ctrl'", "'negctrl'", 
                     "'#dim'", "'durationof'", "'delay'", "'reset'", "'measure'", 
                     "'barrier'", "<INVALID>", "'['", "']'", "'{'", "'}'", 
                     "'('", "')'", "':'", "';'", "'.'", "','", "'='", "'->'", 
                     "'+'", "'++'", "'-'", "'*'", "'**'", "'/'", "'%'", 
                     "'|'", "'||'", "'&'", "'&&'", "'^'", "'~'", "'!'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'im'" ]

    symbolicNames = [ "<INVALID>", "BRAKET", "UNITARY", "RESULT", "NOISE", 
                      "STATE_VECTOR", "PROBABILITY", "DENSITY_MATRIX", "AMPLITUDE", 
                      "EXPECTATION", "VARIANCE", "SAMPLE", "X", "Y", "Z", 
                      "I", "H", "HERMITIAN", "AT", "BIT_FLIP", "PHASE_FLIP", 
                      "PAULI_CHANNEL", "DEPOLARIZING", "TWO_QUBIT_DEPOLARIZING", 
                      "TWO_QUBIT_DEPHASING", "AMPLITUDE_DAMPING", "GENERALIZED_AMPLITUDE_DAMPING", 
                      "PHASE_DAMPING", "KRAUS", "OPENQASM", "INCLUDE", "DEFCALGRAMMAR", 
                      "DEF", "DEFCAL", "GATE", "EXTERN", "BOX", "LET", "BREAK", 
                      "CONTINUE", "IF", "ELSE", "END", "RETURN", "FOR", 
                      "WHILE", "IN", "PRAGMA", "AnnotationKeyword", "INPUT", 
                      "OUTPUT", "CONST", "MUTABLE", "QREG", "QUBIT", "CREG", 
                      "BOOL", "BIT", "INT", "UINT", "FLOAT", "ANGLE", "COMPLEX", 
                      "ARRAY", "DURATION", "STRETCH", "GPHASE", "INV", "POW", 
                      "CTRL", "NEGCTRL", "DIM", "DURATIONOF", "DELAY", "RESET", 
                      "MEASURE", "BARRIER", "BooleanLiteral", "LBRACKET", 
                      "RBRACKET", "LBRACE", "RBRACE", "LPAREN", "RPAREN", 
                      "COLON", "SEMICOLON", "DOT", "COMMA", "EQUALS", "ARROW", 
                      "PLUS", "DOUBLE_PLUS", "MINUS", "ASTERISK", "DOUBLE_ASTERISK", 
                      "SLASH", "PERCENT", "PIPE", "DOUBLE_PIPE", "AMPERSAND", 
                      "DOUBLE_AMPERSAND", "CARET", "TILDE", "EXCLAMATION_POINT", 
                      "EqualityOperator", "CompoundAssignmentOperator", 
                      "ComparisonOperator", "BitshiftOperator", "IMAG", 
                      "ImaginaryLiteral", "BinaryIntegerLiteral", "OctalIntegerLiteral", 
                      "DecimalIntegerLiteral", "HexIntegerLiteral", "Identifier", 
                      "HardwareQubit", "FloatLiteral", "TimingLiteral", 
                      "BitstringLiteral", "StringLiteral", "Whitespace", 
                      "Newline", "LineComment", "BlockComment", "VERSION_IDENTIFER_WHITESPACE", 
                      "VersionSpecifier", "EAT_INITIAL_SPACE", "EAT_LINE_END", 
                      "RemainingLineContent" ]

    RULE_braketPragma = 0
    RULE_braketUnitaryPragma = 1
    RULE_twoDimMatrix = 2
    RULE_row = 3
    RULE_braketResultPragma = 4
    RULE_resultType = 5
    RULE_noArgResultType = 6
    RULE_noArgResultTypeName = 7
    RULE_optionalMultiTargetResultType = 8
    RULE_optionalMultiTargetResultTypeName = 9
    RULE_multiTarget = 10
    RULE_multiStateResultType = 11
    RULE_multiStateResultTypeName = 12
    RULE_multiState = 13
    RULE_observableResultType = 14
    RULE_observable = 15
    RULE_standardObservable = 16
    RULE_tensorProductObservable = 17
    RULE_hermitianObservable = 18
    RULE_observableResultTypeName = 19
    RULE_standardObservableName = 20
    RULE_complexNumber = 21
    RULE_braketNoisePragma = 22
    RULE_noiseInstruction = 23
    RULE_matrices = 24
    RULE_probabilities = 25
    RULE_noiseInstructionName = 26
    RULE_program = 27
    RULE_version = 28
    RULE_statement = 29
    RULE_annotation = 30
    RULE_scope = 31
    RULE_pragma = 32
    RULE_statementOrScope = 33
    RULE_calibrationGrammarStatement = 34
    RULE_includeStatement = 35
    RULE_breakStatement = 36
    RULE_continueStatement = 37
    RULE_endStatement = 38
    RULE_forStatement = 39
    RULE_ifStatement = 40
    RULE_returnStatement = 41
    RULE_whileStatement = 42
    RULE_barrierStatement = 43
    RULE_boxStatement = 44
    RULE_delayStatement = 45
    RULE_gateCallStatement = 46
    RULE_measureArrowAssignmentStatement = 47
    RULE_resetStatement = 48
    RULE_aliasDeclarationStatement = 49
    RULE_classicalDeclarationStatement = 50
    RULE_constDeclarationStatement = 51
    RULE_ioDeclarationStatement = 52
    RULE_oldStyleDeclarationStatement = 53
    RULE_quantumDeclarationStatement = 54
    RULE_defStatement = 55
    RULE_externStatement = 56
    RULE_gateStatement = 57
    RULE_assignmentStatement = 58
    RULE_expressionStatement = 59
    RULE_defcalStatement = 60
    RULE_expression = 61
    RULE_aliasExpression = 62
    RULE_declarationExpression = 63
    RULE_measureExpression = 64
    RULE_rangeExpression = 65
    RULE_setExpression = 66
    RULE_arrayLiteral = 67
    RULE_indexOperator = 68
    RULE_indexedIdentifier = 69
    RULE_returnSignature = 70
    RULE_gateModifier = 71
    RULE_scalarType = 72
    RULE_qubitType = 73
    RULE_arrayType = 74
    RULE_arrayReferenceType = 75
    RULE_designator = 76
    RULE_gateOperand = 77
    RULE_externArgument = 78
    RULE_defcalArgument = 79
    RULE_argumentDefinition = 80
    RULE_argumentDefinitionList = 81
    RULE_expressionList = 82
    RULE_defcalArgumentList = 83
    RULE_identifierList = 84
    RULE_gateOperandList = 85
    RULE_externArgumentList = 86

    ruleNames =  [ "braketPragma", "braketUnitaryPragma", "twoDimMatrix", 
                   "row", "braketResultPragma", "resultType", "noArgResultType", 
                   "noArgResultTypeName", "optionalMultiTargetResultType", 
                   "optionalMultiTargetResultTypeName", "multiTarget", "multiStateResultType", 
                   "multiStateResultTypeName", "multiState", "observableResultType", 
                   "observable", "standardObservable", "tensorProductObservable", 
                   "hermitianObservable", "observableResultTypeName", "standardObservableName", 
                   "complexNumber", "braketNoisePragma", "noiseInstruction", 
                   "matrices", "probabilities", "noiseInstructionName", 
                   "program", "version", "statement", "annotation", "scope", 
                   "pragma", "statementOrScope", "calibrationGrammarStatement", 
                   "includeStatement", "breakStatement", "continueStatement", 
                   "endStatement", "forStatement", "ifStatement", "returnStatement", 
                   "whileStatement", "barrierStatement", "boxStatement", 
                   "delayStatement", "gateCallStatement", "measureArrowAssignmentStatement", 
                   "resetStatement", "aliasDeclarationStatement", "classicalDeclarationStatement", 
                   "constDeclarationStatement", "ioDeclarationStatement", 
                   "oldStyleDeclarationStatement", "quantumDeclarationStatement", 
                   "defStatement", "externStatement", "gateStatement", "assignmentStatement", 
                   "expressionStatement", "defcalStatement", "expression", 
                   "aliasExpression", "declarationExpression", "measureExpression", 
                   "rangeExpression", "setExpression", "arrayLiteral", "indexOperator", 
                   "indexedIdentifier", "returnSignature", "gateModifier", 
                   "scalarType", "qubitType", "arrayType", "arrayReferenceType", 
                   "designator", "gateOperand", "externArgument", "defcalArgument", 
                   "argumentDefinition", "argumentDefinitionList", "expressionList", 
                   "defcalArgumentList", "identifierList", "gateOperandList", 
                   "externArgumentList" ]

    EOF = Token.EOF
    BRAKET=1
    UNITARY=2
    RESULT=3
    NOISE=4
    STATE_VECTOR=5
    PROBABILITY=6
    DENSITY_MATRIX=7
    AMPLITUDE=8
    EXPECTATION=9
    VARIANCE=10
    SAMPLE=11
    X=12
    Y=13
    Z=14
    I=15
    H=16
    HERMITIAN=17
    AT=18
    BIT_FLIP=19
    PHASE_FLIP=20
    PAULI_CHANNEL=21
    DEPOLARIZING=22
    TWO_QUBIT_DEPOLARIZING=23
    TWO_QUBIT_DEPHASING=24
    AMPLITUDE_DAMPING=25
    GENERALIZED_AMPLITUDE_DAMPING=26
    PHASE_DAMPING=27
    KRAUS=28
    OPENQASM=29
    INCLUDE=30
    DEFCALGRAMMAR=31
    DEF=32
    DEFCAL=33
    GATE=34
    EXTERN=35
    BOX=36
    LET=37
    BREAK=38
    CONTINUE=39
    IF=40
    ELSE=41
    END=42
    RETURN=43
    FOR=44
    WHILE=45
    IN=46
    PRAGMA=47
    AnnotationKeyword=48
    INPUT=49
    OUTPUT=50
    CONST=51
    MUTABLE=52
    QREG=53
    QUBIT=54
    CREG=55
    BOOL=56
    BIT=57
    INT=58
    UINT=59
    FLOAT=60
    ANGLE=61
    COMPLEX=62
    ARRAY=63
    DURATION=64
    STRETCH=65
    GPHASE=66
    INV=67
    POW=68
    CTRL=69
    NEGCTRL=70
    DIM=71
    DURATIONOF=72
    DELAY=73
    RESET=74
    MEASURE=75
    BARRIER=76
    BooleanLiteral=77
    LBRACKET=78
    RBRACKET=79
    LBRACE=80
    RBRACE=81
    LPAREN=82
    RPAREN=83
    COLON=84
    SEMICOLON=85
    DOT=86
    COMMA=87
    EQUALS=88
    ARROW=89
    PLUS=90
    DOUBLE_PLUS=91
    MINUS=92
    ASTERISK=93
    DOUBLE_ASTERISK=94
    SLASH=95
    PERCENT=96
    PIPE=97
    DOUBLE_PIPE=98
    AMPERSAND=99
    DOUBLE_AMPERSAND=100
    CARET=101
    TILDE=102
    EXCLAMATION_POINT=103
    EqualityOperator=104
    CompoundAssignmentOperator=105
    ComparisonOperator=106
    BitshiftOperator=107
    IMAG=108
    ImaginaryLiteral=109
    BinaryIntegerLiteral=110
    OctalIntegerLiteral=111
    DecimalIntegerLiteral=112
    HexIntegerLiteral=113
    Identifier=114
    HardwareQubit=115
    FloatLiteral=116
    TimingLiteral=117
    BitstringLiteral=118
    StringLiteral=119
    Whitespace=120
    Newline=121
    LineComment=122
    BlockComment=123
    VERSION_IDENTIFER_WHITESPACE=124
    VersionSpecifier=125
    EAT_INITIAL_SPACE=126
    EAT_LINE_END=127
    RemainingLineContent=128

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class BraketPragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def braketResultPragma(self):
            return self.getTypedRuleContext(BraketPragmasParser.BraketResultPragmaContext,0)


        def braketUnitaryPragma(self):
            return self.getTypedRuleContext(BraketPragmasParser.BraketUnitaryPragmaContext,0)


        def braketNoisePragma(self):
            return self.getTypedRuleContext(BraketPragmasParser.BraketNoisePragmaContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_braketPragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraketPragma" ):
                listener.enterBraketPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraketPragma" ):
                listener.exitBraketPragma(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBraketPragma" ):
                return visitor.visitBraketPragma(self)
            else:
                return visitor.visitChildren(self)




    def braketPragma(self):

        localctx = BraketPragmasParser.BraketPragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_braketPragma)
        try:
            self.state = 177
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 174
                self.braketResultPragma()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 175
                self.braketUnitaryPragma()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 176
                self.braketNoisePragma()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BraketUnitaryPragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRAKET(self):
            return self.getToken(BraketPragmasParser.BRAKET, 0)

        def UNITARY(self):
            return self.getToken(BraketPragmasParser.UNITARY, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def twoDimMatrix(self):
            return self.getTypedRuleContext(BraketPragmasParser.TwoDimMatrixContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def multiTarget(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiTargetContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_braketUnitaryPragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraketUnitaryPragma" ):
                listener.enterBraketUnitaryPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraketUnitaryPragma" ):
                listener.exitBraketUnitaryPragma(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBraketUnitaryPragma" ):
                return visitor.visitBraketUnitaryPragma(self)
            else:
                return visitor.visitChildren(self)




    def braketUnitaryPragma(self):

        localctx = BraketPragmasParser.BraketUnitaryPragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_braketUnitaryPragma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 179
            self.match(BraketPragmasParser.BRAKET)
            self.state = 180
            self.match(BraketPragmasParser.UNITARY)
            self.state = 181
            self.match(BraketPragmasParser.LPAREN)
            self.state = 182
            self.twoDimMatrix()
            self.state = 183
            self.match(BraketPragmasParser.RPAREN)
            self.state = 184
            self.multiTarget()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TwoDimMatrixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.RowContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.RowContext,i)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_twoDimMatrix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTwoDimMatrix" ):
                listener.enterTwoDimMatrix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTwoDimMatrix" ):
                listener.exitTwoDimMatrix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTwoDimMatrix" ):
                return visitor.visitTwoDimMatrix(self)
            else:
                return visitor.visitChildren(self)




    def twoDimMatrix(self):

        localctx = BraketPragmasParser.TwoDimMatrixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_twoDimMatrix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 187
            self.row()
            self.state = 192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 188
                self.match(BraketPragmasParser.COMMA)
                self.state = 189
                self.row()
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 195
            self.match(BraketPragmasParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def complexNumber(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ComplexNumberContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ComplexNumberContext,i)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow" ):
                listener.enterRow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow" ):
                listener.exitRow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRow" ):
                return visitor.visitRow(self)
            else:
                return visitor.visitChildren(self)




    def row(self):

        localctx = BraketPragmasParser.RowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_row)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 198
            self.complexNumber()
            self.state = 203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 199
                self.match(BraketPragmasParser.COMMA)
                self.state = 200
                self.complexNumber()
                self.state = 205
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 206
            self.match(BraketPragmasParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BraketResultPragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRAKET(self):
            return self.getToken(BraketPragmasParser.BRAKET, 0)

        def RESULT(self):
            return self.getToken(BraketPragmasParser.RESULT, 0)

        def resultType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ResultTypeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_braketResultPragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraketResultPragma" ):
                listener.enterBraketResultPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraketResultPragma" ):
                listener.exitBraketResultPragma(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBraketResultPragma" ):
                return visitor.visitBraketResultPragma(self)
            else:
                return visitor.visitChildren(self)




    def braketResultPragma(self):

        localctx = BraketPragmasParser.BraketResultPragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_braketResultPragma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self.match(BraketPragmasParser.BRAKET)
            self.state = 209
            self.match(BraketPragmasParser.RESULT)
            self.state = 210
            self.resultType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResultTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noArgResultType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NoArgResultTypeContext,0)


        def optionalMultiTargetResultType(self):
            return self.getTypedRuleContext(BraketPragmasParser.OptionalMultiTargetResultTypeContext,0)


        def multiStateResultType(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiStateResultTypeContext,0)


        def observableResultType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ObservableResultTypeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_resultType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResultType" ):
                listener.enterResultType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResultType" ):
                listener.exitResultType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResultType" ):
                return visitor.visitResultType(self)
            else:
                return visitor.visitChildren(self)




    def resultType(self):

        localctx = BraketPragmasParser.ResultTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_resultType)
        try:
            self.state = 216
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.STATE_VECTOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 212
                self.noArgResultType()
                pass
            elif token in [BraketPragmasParser.PROBABILITY, BraketPragmasParser.DENSITY_MATRIX]:
                self.enterOuterAlt(localctx, 2)
                self.state = 213
                self.optionalMultiTargetResultType()
                pass
            elif token in [BraketPragmasParser.AMPLITUDE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 214
                self.multiStateResultType()
                pass
            elif token in [BraketPragmasParser.EXPECTATION, BraketPragmasParser.VARIANCE, BraketPragmasParser.SAMPLE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 215
                self.observableResultType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoArgResultTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noArgResultTypeName(self):
            return self.getTypedRuleContext(BraketPragmasParser.NoArgResultTypeNameContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_noArgResultType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoArgResultType" ):
                listener.enterNoArgResultType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoArgResultType" ):
                listener.exitNoArgResultType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoArgResultType" ):
                return visitor.visitNoArgResultType(self)
            else:
                return visitor.visitChildren(self)




    def noArgResultType(self):

        localctx = BraketPragmasParser.NoArgResultTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_noArgResultType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.noArgResultTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoArgResultTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATE_VECTOR(self):
            return self.getToken(BraketPragmasParser.STATE_VECTOR, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_noArgResultTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoArgResultTypeName" ):
                listener.enterNoArgResultTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoArgResultTypeName" ):
                listener.exitNoArgResultTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoArgResultTypeName" ):
                return visitor.visitNoArgResultTypeName(self)
            else:
                return visitor.visitChildren(self)




    def noArgResultTypeName(self):

        localctx = BraketPragmasParser.NoArgResultTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_noArgResultTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(BraketPragmasParser.STATE_VECTOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalMultiTargetResultTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionalMultiTargetResultTypeName(self):
            return self.getTypedRuleContext(BraketPragmasParser.OptionalMultiTargetResultTypeNameContext,0)


        def multiTarget(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiTargetContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_optionalMultiTargetResultType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalMultiTargetResultType" ):
                listener.enterOptionalMultiTargetResultType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalMultiTargetResultType" ):
                listener.exitOptionalMultiTargetResultType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalMultiTargetResultType" ):
                return visitor.visitOptionalMultiTargetResultType(self)
            else:
                return visitor.visitChildren(self)




    def optionalMultiTargetResultType(self):

        localctx = BraketPragmasParser.OptionalMultiTargetResultTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_optionalMultiTargetResultType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.optionalMultiTargetResultTypeName()
            self.state = 224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.Identifier:
                self.state = 223
                self.multiTarget()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalMultiTargetResultTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROBABILITY(self):
            return self.getToken(BraketPragmasParser.PROBABILITY, 0)

        def DENSITY_MATRIX(self):
            return self.getToken(BraketPragmasParser.DENSITY_MATRIX, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_optionalMultiTargetResultTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalMultiTargetResultTypeName" ):
                listener.enterOptionalMultiTargetResultTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalMultiTargetResultTypeName" ):
                listener.exitOptionalMultiTargetResultTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalMultiTargetResultTypeName" ):
                return visitor.visitOptionalMultiTargetResultTypeName(self)
            else:
                return visitor.visitChildren(self)




    def optionalMultiTargetResultTypeName(self):

        localctx = BraketPragmasParser.OptionalMultiTargetResultTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_optionalMultiTargetResultTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.PROBABILITY or _la==BraketPragmasParser.DENSITY_MATRIX):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiTargetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IndexedIdentifierContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_multiTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiTarget" ):
                listener.enterMultiTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiTarget" ):
                listener.exitMultiTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiTarget" ):
                return visitor.visitMultiTarget(self)
            else:
                return visitor.visitChildren(self)




    def multiTarget(self):

        localctx = BraketPragmasParser.MultiTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_multiTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.indexedIdentifier()
            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 229
                self.match(BraketPragmasParser.COMMA)
                self.state = 230
                self.indexedIdentifier()
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiStateResultTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiStateResultTypeName(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiStateResultTypeNameContext,0)


        def multiState(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiStateContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_multiStateResultType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiStateResultType" ):
                listener.enterMultiStateResultType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiStateResultType" ):
                listener.exitMultiStateResultType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiStateResultType" ):
                return visitor.visitMultiStateResultType(self)
            else:
                return visitor.visitChildren(self)




    def multiStateResultType(self):

        localctx = BraketPragmasParser.MultiStateResultTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_multiStateResultType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.multiStateResultTypeName()
            self.state = 237
            self.multiState()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiStateResultTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPLITUDE(self):
            return self.getToken(BraketPragmasParser.AMPLITUDE, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_multiStateResultTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiStateResultTypeName" ):
                listener.enterMultiStateResultTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiStateResultTypeName" ):
                listener.exitMultiStateResultTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiStateResultTypeName" ):
                return visitor.visitMultiStateResultTypeName(self)
            else:
                return visitor.visitChildren(self)




    def multiStateResultTypeName(self):

        localctx = BraketPragmasParser.MultiStateResultTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_multiStateResultTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.match(BraketPragmasParser.AMPLITUDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiStateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BitstringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.BitstringLiteral)
            else:
                return self.getToken(BraketPragmasParser.BitstringLiteral, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_multiState

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiState" ):
                listener.enterMultiState(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiState" ):
                listener.exitMultiState(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiState" ):
                return visitor.visitMultiState(self)
            else:
                return visitor.visitChildren(self)




    def multiState(self):

        localctx = BraketPragmasParser.MultiStateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_multiState)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.match(BraketPragmasParser.BitstringLiteral)
            self.state = 246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 242
                self.match(BraketPragmasParser.COMMA)
                self.state = 243
                self.match(BraketPragmasParser.BitstringLiteral)
                self.state = 248
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservableResultTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observableResultTypeName(self):
            return self.getTypedRuleContext(BraketPragmasParser.ObservableResultTypeNameContext,0)


        def observable(self):
            return self.getTypedRuleContext(BraketPragmasParser.ObservableContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_observableResultType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObservableResultType" ):
                listener.enterObservableResultType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObservableResultType" ):
                listener.exitObservableResultType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObservableResultType" ):
                return visitor.visitObservableResultType(self)
            else:
                return visitor.visitChildren(self)




    def observableResultType(self):

        localctx = BraketPragmasParser.ObservableResultTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_observableResultType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.observableResultTypeName()
            self.state = 250
            self.observable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def standardObservable(self):
            return self.getTypedRuleContext(BraketPragmasParser.StandardObservableContext,0)


        def tensorProductObservable(self):
            return self.getTypedRuleContext(BraketPragmasParser.TensorProductObservableContext,0)


        def hermitianObservable(self):
            return self.getTypedRuleContext(BraketPragmasParser.HermitianObservableContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_observable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObservable" ):
                listener.enterObservable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObservable" ):
                listener.exitObservable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObservable" ):
                return visitor.visitObservable(self)
            else:
                return visitor.visitChildren(self)




    def observable(self):

        localctx = BraketPragmasParser.ObservableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_observable)
        try:
            self.state = 255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 252
                self.standardObservable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 253
                self.tensorProductObservable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 254
                self.hermitianObservable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandardObservableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def standardObservableName(self):
            return self.getTypedRuleContext(BraketPragmasParser.StandardObservableNameContext,0)


        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def indexedIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_standardObservable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandardObservable" ):
                listener.enterStandardObservable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandardObservable" ):
                listener.exitStandardObservable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandardObservable" ):
                return visitor.visitStandardObservable(self)
            else:
                return visitor.visitChildren(self)




    def standardObservable(self):

        localctx = BraketPragmasParser.StandardObservableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_standardObservable)
        try:
            self.state = 263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 257
                self.standardObservableName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 258
                self.standardObservableName()
                self.state = 259
                self.match(BraketPragmasParser.LPAREN)
                self.state = 260
                self.indexedIdentifier()
                self.state = 261
                self.match(BraketPragmasParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TensorProductObservableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(BraketPragmasParser.AT, 0)

        def observable(self):
            return self.getTypedRuleContext(BraketPragmasParser.ObservableContext,0)


        def standardObservable(self):
            return self.getTypedRuleContext(BraketPragmasParser.StandardObservableContext,0)


        def hermitianObservable(self):
            return self.getTypedRuleContext(BraketPragmasParser.HermitianObservableContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_tensorProductObservable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTensorProductObservable" ):
                listener.enterTensorProductObservable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTensorProductObservable" ):
                listener.exitTensorProductObservable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTensorProductObservable" ):
                return visitor.visitTensorProductObservable(self)
            else:
                return visitor.visitChildren(self)




    def tensorProductObservable(self):

        localctx = BraketPragmasParser.TensorProductObservableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_tensorProductObservable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.X, BraketPragmasParser.Y, BraketPragmasParser.Z, BraketPragmasParser.I, BraketPragmasParser.H]:
                self.state = 265
                self.standardObservable()
                pass
            elif token in [BraketPragmasParser.HERMITIAN]:
                self.state = 266
                self.hermitianObservable()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 269
            self.match(BraketPragmasParser.AT)
            self.state = 270
            self.observable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HermitianObservableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HERMITIAN(self):
            return self.getToken(BraketPragmasParser.HERMITIAN, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def LBRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.LBRACKET)
            else:
                return self.getToken(BraketPragmasParser.LBRACKET, i)

        def complexNumber(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ComplexNumberContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ComplexNumberContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def RBRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.RBRACKET)
            else:
                return self.getToken(BraketPragmasParser.RBRACKET, i)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def indexedIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_hermitianObservable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHermitianObservable" ):
                listener.enterHermitianObservable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHermitianObservable" ):
                listener.exitHermitianObservable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHermitianObservable" ):
                return visitor.visitHermitianObservable(self)
            else:
                return visitor.visitChildren(self)




    def hermitianObservable(self):

        localctx = BraketPragmasParser.HermitianObservableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_hermitianObservable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.match(BraketPragmasParser.HERMITIAN)
            self.state = 273
            self.match(BraketPragmasParser.LPAREN)
            self.state = 274
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 275
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 276
            self.complexNumber()
            self.state = 277
            self.match(BraketPragmasParser.COMMA)
            self.state = 278
            self.complexNumber()
            self.state = 279
            self.match(BraketPragmasParser.RBRACKET)
            self.state = 280
            self.match(BraketPragmasParser.COMMA)
            self.state = 281
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 282
            self.complexNumber()
            self.state = 283
            self.match(BraketPragmasParser.COMMA)
            self.state = 284
            self.complexNumber()
            self.state = 285
            self.match(BraketPragmasParser.RBRACKET)
            self.state = 286
            self.match(BraketPragmasParser.RBRACKET)
            self.state = 287
            self.match(BraketPragmasParser.RPAREN)
            self.state = 288
            self.indexedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservableResultTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPECTATION(self):
            return self.getToken(BraketPragmasParser.EXPECTATION, 0)

        def VARIANCE(self):
            return self.getToken(BraketPragmasParser.VARIANCE, 0)

        def SAMPLE(self):
            return self.getToken(BraketPragmasParser.SAMPLE, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_observableResultTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObservableResultTypeName" ):
                listener.enterObservableResultTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObservableResultTypeName" ):
                listener.exitObservableResultTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObservableResultTypeName" ):
                return visitor.visitObservableResultTypeName(self)
            else:
                return visitor.visitChildren(self)




    def observableResultTypeName(self):

        localctx = BraketPragmasParser.ObservableResultTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_observableResultTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.EXPECTATION) | (1 << BraketPragmasParser.VARIANCE) | (1 << BraketPragmasParser.SAMPLE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandardObservableNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def X(self):
            return self.getToken(BraketPragmasParser.X, 0)

        def Y(self):
            return self.getToken(BraketPragmasParser.Y, 0)

        def Z(self):
            return self.getToken(BraketPragmasParser.Z, 0)

        def I(self):
            return self.getToken(BraketPragmasParser.I, 0)

        def H(self):
            return self.getToken(BraketPragmasParser.H, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_standardObservableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandardObservableName" ):
                listener.enterStandardObservableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandardObservableName" ):
                listener.exitStandardObservableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandardObservableName" ):
                return visitor.visitStandardObservableName(self)
            else:
                return visitor.visitChildren(self)




    def standardObservableName(self):

        localctx = BraketPragmasParser.StandardObservableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_standardObservableName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.X) | (1 << BraketPragmasParser.Y) | (1 << BraketPragmasParser.Z) | (1 << BraketPragmasParser.I) | (1 << BraketPragmasParser.H))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexNumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_complexNumber

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComplexOneValueContext(ComplexNumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ComplexNumberContext
            super().__init__(parser)
            self.neg = None # Token
            self.value = None # Token
            self.copyFrom(ctx)

        def DecimalIntegerLiteral(self):
            return self.getToken(BraketPragmasParser.DecimalIntegerLiteral, 0)
        def FloatLiteral(self):
            return self.getToken(BraketPragmasParser.FloatLiteral, 0)
        def ImaginaryLiteral(self):
            return self.getToken(BraketPragmasParser.ImaginaryLiteral, 0)
        def MINUS(self):
            return self.getToken(BraketPragmasParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexOneValue" ):
                listener.enterComplexOneValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexOneValue" ):
                listener.exitComplexOneValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexOneValue" ):
                return visitor.visitComplexOneValue(self)
            else:
                return visitor.visitChildren(self)


    class ComplexTwoValuesContext(ComplexNumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ComplexNumberContext
            super().__init__(parser)
            self.neg = None # Token
            self.real = None # Token
            self.sign = None # Token
            self.imag = None # Token
            self.copyFrom(ctx)

        def ImaginaryLiteral(self):
            return self.getToken(BraketPragmasParser.ImaginaryLiteral, 0)
        def DecimalIntegerLiteral(self):
            return self.getToken(BraketPragmasParser.DecimalIntegerLiteral, 0)
        def FloatLiteral(self):
            return self.getToken(BraketPragmasParser.FloatLiteral, 0)
        def PLUS(self):
            return self.getToken(BraketPragmasParser.PLUS, 0)
        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.MINUS)
            else:
                return self.getToken(BraketPragmasParser.MINUS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexTwoValues" ):
                listener.enterComplexTwoValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexTwoValues" ):
                listener.exitComplexTwoValues(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexTwoValues" ):
                return visitor.visitComplexTwoValues(self)
            else:
                return visitor.visitChildren(self)



    def complexNumber(self):

        localctx = BraketPragmasParser.ComplexNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_complexNumber)
        self._la = 0 # Token type
        try:
            self.state = 304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                localctx = BraketPragmasParser.ComplexOneValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.MINUS:
                    self.state = 294
                    localctx.neg = self.match(BraketPragmasParser.MINUS)


                self.state = 297
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & ((1 << (BraketPragmasParser.ImaginaryLiteral - 109)) | (1 << (BraketPragmasParser.DecimalIntegerLiteral - 109)) | (1 << (BraketPragmasParser.FloatLiteral - 109)))) != 0)):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = BraketPragmasParser.ComplexTwoValuesContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.MINUS:
                    self.state = 298
                    localctx.neg = self.match(BraketPragmasParser.MINUS)


                self.state = 301
                localctx.real = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==BraketPragmasParser.DecimalIntegerLiteral or _la==BraketPragmasParser.FloatLiteral):
                    localctx.real = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 302
                localctx.sign = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==BraketPragmasParser.PLUS or _la==BraketPragmasParser.MINUS):
                    localctx.sign = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 303
                localctx.imag = self.match(BraketPragmasParser.ImaginaryLiteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BraketNoisePragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRAKET(self):
            return self.getToken(BraketPragmasParser.BRAKET, 0)

        def NOISE(self):
            return self.getToken(BraketPragmasParser.NOISE, 0)

        def noiseInstruction(self):
            return self.getTypedRuleContext(BraketPragmasParser.NoiseInstructionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_braketNoisePragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraketNoisePragma" ):
                listener.enterBraketNoisePragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraketNoisePragma" ):
                listener.exitBraketNoisePragma(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBraketNoisePragma" ):
                return visitor.visitBraketNoisePragma(self)
            else:
                return visitor.visitChildren(self)




    def braketNoisePragma(self):

        localctx = BraketPragmasParser.BraketNoisePragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_braketNoisePragma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.match(BraketPragmasParser.BRAKET)
            self.state = 307
            self.match(BraketPragmasParser.NOISE)
            self.state = 308
            self.noiseInstruction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoiseInstructionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_noiseInstruction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NoiseContext(NoiseInstructionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.NoiseInstructionContext
            super().__init__(parser)
            self.target = None # MultiTargetContext
            self.copyFrom(ctx)

        def noiseInstructionName(self):
            return self.getTypedRuleContext(BraketPragmasParser.NoiseInstructionNameContext,0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)
        def probabilities(self):
            return self.getTypedRuleContext(BraketPragmasParser.ProbabilitiesContext,0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)
        def multiTarget(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiTargetContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoise" ):
                listener.enterNoise(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoise" ):
                listener.exitNoise(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoise" ):
                return visitor.visitNoise(self)
            else:
                return visitor.visitChildren(self)


    class KrausContext(NoiseInstructionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.NoiseInstructionContext
            super().__init__(parser)
            self.target = None # MultiTargetContext
            self.copyFrom(ctx)

        def KRAUS(self):
            return self.getToken(BraketPragmasParser.KRAUS, 0)
        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)
        def matrices(self):
            return self.getTypedRuleContext(BraketPragmasParser.MatricesContext,0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)
        def multiTarget(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiTargetContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKraus" ):
                listener.enterKraus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKraus" ):
                listener.exitKraus(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKraus" ):
                return visitor.visitKraus(self)
            else:
                return visitor.visitChildren(self)



    def noiseInstruction(self):

        localctx = BraketPragmasParser.NoiseInstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_noiseInstruction)
        try:
            self.state = 322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.BIT_FLIP, BraketPragmasParser.PHASE_FLIP, BraketPragmasParser.PAULI_CHANNEL, BraketPragmasParser.DEPOLARIZING, BraketPragmasParser.TWO_QUBIT_DEPOLARIZING, BraketPragmasParser.TWO_QUBIT_DEPHASING, BraketPragmasParser.AMPLITUDE_DAMPING, BraketPragmasParser.GENERALIZED_AMPLITUDE_DAMPING, BraketPragmasParser.PHASE_DAMPING]:
                localctx = BraketPragmasParser.NoiseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 310
                self.noiseInstructionName()
                self.state = 311
                self.match(BraketPragmasParser.LPAREN)
                self.state = 312
                self.probabilities()
                self.state = 313
                self.match(BraketPragmasParser.RPAREN)
                self.state = 314
                localctx.target = self.multiTarget()
                pass
            elif token in [BraketPragmasParser.KRAUS]:
                localctx = BraketPragmasParser.KrausContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 316
                self.match(BraketPragmasParser.KRAUS)
                self.state = 317
                self.match(BraketPragmasParser.LPAREN)
                self.state = 318
                self.matrices()
                self.state = 319
                self.match(BraketPragmasParser.RPAREN)
                self.state = 320
                localctx.target = self.multiTarget()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatricesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def twoDimMatrix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.TwoDimMatrixContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.TwoDimMatrixContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_matrices

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrices" ):
                listener.enterMatrices(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrices" ):
                listener.exitMatrices(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatrices" ):
                return visitor.visitMatrices(self)
            else:
                return visitor.visitChildren(self)




    def matrices(self):

        localctx = BraketPragmasParser.MatricesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_matrices)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.twoDimMatrix()
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 325
                self.match(BraketPragmasParser.COMMA)
                self.state = 326
                self.twoDimMatrix()
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProbabilitiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FloatLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.FloatLiteral)
            else:
                return self.getToken(BraketPragmasParser.FloatLiteral, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_probabilities

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProbabilities" ):
                listener.enterProbabilities(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProbabilities" ):
                listener.exitProbabilities(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProbabilities" ):
                return visitor.visitProbabilities(self)
            else:
                return visitor.visitChildren(self)




    def probabilities(self):

        localctx = BraketPragmasParser.ProbabilitiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_probabilities)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.match(BraketPragmasParser.FloatLiteral)
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 333
                self.match(BraketPragmasParser.COMMA)
                self.state = 334
                self.match(BraketPragmasParser.FloatLiteral)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoiseInstructionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT_FLIP(self):
            return self.getToken(BraketPragmasParser.BIT_FLIP, 0)

        def PHASE_FLIP(self):
            return self.getToken(BraketPragmasParser.PHASE_FLIP, 0)

        def PAULI_CHANNEL(self):
            return self.getToken(BraketPragmasParser.PAULI_CHANNEL, 0)

        def DEPOLARIZING(self):
            return self.getToken(BraketPragmasParser.DEPOLARIZING, 0)

        def TWO_QUBIT_DEPOLARIZING(self):
            return self.getToken(BraketPragmasParser.TWO_QUBIT_DEPOLARIZING, 0)

        def TWO_QUBIT_DEPHASING(self):
            return self.getToken(BraketPragmasParser.TWO_QUBIT_DEPHASING, 0)

        def AMPLITUDE_DAMPING(self):
            return self.getToken(BraketPragmasParser.AMPLITUDE_DAMPING, 0)

        def GENERALIZED_AMPLITUDE_DAMPING(self):
            return self.getToken(BraketPragmasParser.GENERALIZED_AMPLITUDE_DAMPING, 0)

        def PHASE_DAMPING(self):
            return self.getToken(BraketPragmasParser.PHASE_DAMPING, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_noiseInstructionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoiseInstructionName" ):
                listener.enterNoiseInstructionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoiseInstructionName" ):
                listener.exitNoiseInstructionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoiseInstructionName" ):
                return visitor.visitNoiseInstructionName(self)
            else:
                return visitor.visitChildren(self)




    def noiseInstructionName(self):

        localctx = BraketPragmasParser.NoiseInstructionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_noiseInstructionName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.BIT_FLIP) | (1 << BraketPragmasParser.PHASE_FLIP) | (1 << BraketPragmasParser.PAULI_CHANNEL) | (1 << BraketPragmasParser.DEPOLARIZING) | (1 << BraketPragmasParser.TWO_QUBIT_DEPOLARIZING) | (1 << BraketPragmasParser.TWO_QUBIT_DEPHASING) | (1 << BraketPragmasParser.AMPLITUDE_DAMPING) | (1 << BraketPragmasParser.GENERALIZED_AMPLITUDE_DAMPING) | (1 << BraketPragmasParser.PHASE_DAMPING))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(BraketPragmasParser.EOF, 0)

        def version(self):
            return self.getTypedRuleContext(BraketPragmasParser.VersionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.StatementContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.StatementContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = BraketPragmasParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.OPENQASM:
                self.state = 342
                self.version()


            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.INCLUDE) | (1 << BraketPragmasParser.DEFCALGRAMMAR) | (1 << BraketPragmasParser.DEF) | (1 << BraketPragmasParser.DEFCAL) | (1 << BraketPragmasParser.GATE) | (1 << BraketPragmasParser.EXTERN) | (1 << BraketPragmasParser.BOX) | (1 << BraketPragmasParser.LET) | (1 << BraketPragmasParser.BREAK) | (1 << BraketPragmasParser.CONTINUE) | (1 << BraketPragmasParser.IF) | (1 << BraketPragmasParser.END) | (1 << BraketPragmasParser.RETURN) | (1 << BraketPragmasParser.FOR) | (1 << BraketPragmasParser.WHILE) | (1 << BraketPragmasParser.PRAGMA) | (1 << BraketPragmasParser.AnnotationKeyword) | (1 << BraketPragmasParser.INPUT) | (1 << BraketPragmasParser.OUTPUT) | (1 << BraketPragmasParser.CONST) | (1 << BraketPragmasParser.QREG) | (1 << BraketPragmasParser.QUBIT) | (1 << BraketPragmasParser.CREG) | (1 << BraketPragmasParser.BOOL) | (1 << BraketPragmasParser.BIT) | (1 << BraketPragmasParser.INT) | (1 << BraketPragmasParser.UINT) | (1 << BraketPragmasParser.FLOAT) | (1 << BraketPragmasParser.ANGLE) | (1 << BraketPragmasParser.COMPLEX) | (1 << BraketPragmasParser.ARRAY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (BraketPragmasParser.DURATION - 64)) | (1 << (BraketPragmasParser.STRETCH - 64)) | (1 << (BraketPragmasParser.GPHASE - 64)) | (1 << (BraketPragmasParser.INV - 64)) | (1 << (BraketPragmasParser.POW - 64)) | (1 << (BraketPragmasParser.CTRL - 64)) | (1 << (BraketPragmasParser.NEGCTRL - 64)) | (1 << (BraketPragmasParser.DURATIONOF - 64)) | (1 << (BraketPragmasParser.DELAY - 64)) | (1 << (BraketPragmasParser.RESET - 64)) | (1 << (BraketPragmasParser.MEASURE - 64)) | (1 << (BraketPragmasParser.BARRIER - 64)) | (1 << (BraketPragmasParser.BooleanLiteral - 64)) | (1 << (BraketPragmasParser.LPAREN - 64)) | (1 << (BraketPragmasParser.MINUS - 64)) | (1 << (BraketPragmasParser.TILDE - 64)) | (1 << (BraketPragmasParser.EXCLAMATION_POINT - 64)) | (1 << (BraketPragmasParser.ImaginaryLiteral - 64)) | (1 << (BraketPragmasParser.BinaryIntegerLiteral - 64)) | (1 << (BraketPragmasParser.OctalIntegerLiteral - 64)) | (1 << (BraketPragmasParser.DecimalIntegerLiteral - 64)) | (1 << (BraketPragmasParser.HexIntegerLiteral - 64)) | (1 << (BraketPragmasParser.Identifier - 64)) | (1 << (BraketPragmasParser.HardwareQubit - 64)) | (1 << (BraketPragmasParser.FloatLiteral - 64)) | (1 << (BraketPragmasParser.TimingLiteral - 64)) | (1 << (BraketPragmasParser.BitstringLiteral - 64)))) != 0):
                self.state = 345
                self.statement()
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 351
            self.match(BraketPragmasParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENQASM(self):
            return self.getToken(BraketPragmasParser.OPENQASM, 0)

        def VersionSpecifier(self):
            return self.getToken(BraketPragmasParser.VersionSpecifier, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = BraketPragmasParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.match(BraketPragmasParser.OPENQASM)
            self.state = 354
            self.match(BraketPragmasParser.VersionSpecifier)
            self.state = 355
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma(self):
            return self.getTypedRuleContext(BraketPragmasParser.PragmaContext,0)


        def aliasDeclarationStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.AliasDeclarationStatementContext,0)


        def assignmentStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.AssignmentStatementContext,0)


        def barrierStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.BarrierStatementContext,0)


        def boxStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.BoxStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.BreakStatementContext,0)


        def calibrationGrammarStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.CalibrationGrammarStatementContext,0)


        def classicalDeclarationStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalDeclarationStatementContext,0)


        def constDeclarationStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.ConstDeclarationStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.ContinueStatementContext,0)


        def defStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.DefStatementContext,0)


        def defcalStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.DefcalStatementContext,0)


        def delayStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.DelayStatementContext,0)


        def endStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.EndStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionStatementContext,0)


        def externStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExternStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.ForStatementContext,0)


        def gateCallStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.GateCallStatementContext,0)


        def gateStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.GateStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.IfStatementContext,0)


        def includeStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.IncludeStatementContext,0)


        def ioDeclarationStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.IoDeclarationStatementContext,0)


        def measureArrowAssignmentStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.MeasureArrowAssignmentStatementContext,0)


        def oldStyleDeclarationStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.OldStyleDeclarationStatementContext,0)


        def quantumDeclarationStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumDeclarationStatementContext,0)


        def resetStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.ResetStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.ReturnStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.WhileStatementContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.AnnotationContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = BraketPragmasParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.PRAGMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 357
                self.pragma()
                pass
            elif token in [BraketPragmasParser.INCLUDE, BraketPragmasParser.DEFCALGRAMMAR, BraketPragmasParser.DEF, BraketPragmasParser.DEFCAL, BraketPragmasParser.GATE, BraketPragmasParser.EXTERN, BraketPragmasParser.BOX, BraketPragmasParser.LET, BraketPragmasParser.BREAK, BraketPragmasParser.CONTINUE, BraketPragmasParser.IF, BraketPragmasParser.END, BraketPragmasParser.RETURN, BraketPragmasParser.FOR, BraketPragmasParser.WHILE, BraketPragmasParser.AnnotationKeyword, BraketPragmasParser.INPUT, BraketPragmasParser.OUTPUT, BraketPragmasParser.CONST, BraketPragmasParser.QREG, BraketPragmasParser.QUBIT, BraketPragmasParser.CREG, BraketPragmasParser.BOOL, BraketPragmasParser.BIT, BraketPragmasParser.INT, BraketPragmasParser.UINT, BraketPragmasParser.FLOAT, BraketPragmasParser.ANGLE, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.DURATION, BraketPragmasParser.STRETCH, BraketPragmasParser.GPHASE, BraketPragmasParser.INV, BraketPragmasParser.POW, BraketPragmasParser.CTRL, BraketPragmasParser.NEGCTRL, BraketPragmasParser.DURATIONOF, BraketPragmasParser.DELAY, BraketPragmasParser.RESET, BraketPragmasParser.MEASURE, BraketPragmasParser.BARRIER, BraketPragmasParser.BooleanLiteral, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.TILDE, BraketPragmasParser.EXCLAMATION_POINT, BraketPragmasParser.ImaginaryLiteral, BraketPragmasParser.BinaryIntegerLiteral, BraketPragmasParser.OctalIntegerLiteral, BraketPragmasParser.DecimalIntegerLiteral, BraketPragmasParser.HexIntegerLiteral, BraketPragmasParser.Identifier, BraketPragmasParser.HardwareQubit, BraketPragmasParser.FloatLiteral, BraketPragmasParser.TimingLiteral, BraketPragmasParser.BitstringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==BraketPragmasParser.AnnotationKeyword:
                    self.state = 358
                    self.annotation()
                    self.state = 363
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 391
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 364
                    self.aliasDeclarationStatement()
                    pass

                elif la_ == 2:
                    self.state = 365
                    self.assignmentStatement()
                    pass

                elif la_ == 3:
                    self.state = 366
                    self.barrierStatement()
                    pass

                elif la_ == 4:
                    self.state = 367
                    self.boxStatement()
                    pass

                elif la_ == 5:
                    self.state = 368
                    self.breakStatement()
                    pass

                elif la_ == 6:
                    self.state = 369
                    self.calibrationGrammarStatement()
                    pass

                elif la_ == 7:
                    self.state = 370
                    self.classicalDeclarationStatement()
                    pass

                elif la_ == 8:
                    self.state = 371
                    self.constDeclarationStatement()
                    pass

                elif la_ == 9:
                    self.state = 372
                    self.continueStatement()
                    pass

                elif la_ == 10:
                    self.state = 373
                    self.defStatement()
                    pass

                elif la_ == 11:
                    self.state = 374
                    self.defcalStatement()
                    pass

                elif la_ == 12:
                    self.state = 375
                    self.delayStatement()
                    pass

                elif la_ == 13:
                    self.state = 376
                    self.endStatement()
                    pass

                elif la_ == 14:
                    self.state = 377
                    self.expressionStatement()
                    pass

                elif la_ == 15:
                    self.state = 378
                    self.externStatement()
                    pass

                elif la_ == 16:
                    self.state = 379
                    self.forStatement()
                    pass

                elif la_ == 17:
                    self.state = 380
                    self.gateCallStatement()
                    pass

                elif la_ == 18:
                    self.state = 381
                    self.gateStatement()
                    pass

                elif la_ == 19:
                    self.state = 382
                    self.ifStatement()
                    pass

                elif la_ == 20:
                    self.state = 383
                    self.includeStatement()
                    pass

                elif la_ == 21:
                    self.state = 384
                    self.ioDeclarationStatement()
                    pass

                elif la_ == 22:
                    self.state = 385
                    self.measureArrowAssignmentStatement()
                    pass

                elif la_ == 23:
                    self.state = 386
                    self.oldStyleDeclarationStatement()
                    pass

                elif la_ == 24:
                    self.state = 387
                    self.quantumDeclarationStatement()
                    pass

                elif la_ == 25:
                    self.state = 388
                    self.resetStatement()
                    pass

                elif la_ == 26:
                    self.state = 389
                    self.returnStatement()
                    pass

                elif la_ == 27:
                    self.state = 390
                    self.whileStatement()
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AnnotationKeyword(self):
            return self.getToken(BraketPragmasParser.AnnotationKeyword, 0)

        def RemainingLineContent(self):
            return self.getToken(BraketPragmasParser.RemainingLineContent, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = BraketPragmasParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(BraketPragmasParser.AnnotationKeyword)
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.RemainingLineContent:
                self.state = 396
                self.match(BraketPragmasParser.RemainingLineContent)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.StatementContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.StatementContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScope" ):
                listener.enterScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScope" ):
                listener.exitScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScope" ):
                return visitor.visitScope(self)
            else:
                return visitor.visitChildren(self)




    def scope(self):

        localctx = BraketPragmasParser.ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(BraketPragmasParser.LBRACE)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.INCLUDE) | (1 << BraketPragmasParser.DEFCALGRAMMAR) | (1 << BraketPragmasParser.DEF) | (1 << BraketPragmasParser.DEFCAL) | (1 << BraketPragmasParser.GATE) | (1 << BraketPragmasParser.EXTERN) | (1 << BraketPragmasParser.BOX) | (1 << BraketPragmasParser.LET) | (1 << BraketPragmasParser.BREAK) | (1 << BraketPragmasParser.CONTINUE) | (1 << BraketPragmasParser.IF) | (1 << BraketPragmasParser.END) | (1 << BraketPragmasParser.RETURN) | (1 << BraketPragmasParser.FOR) | (1 << BraketPragmasParser.WHILE) | (1 << BraketPragmasParser.PRAGMA) | (1 << BraketPragmasParser.AnnotationKeyword) | (1 << BraketPragmasParser.INPUT) | (1 << BraketPragmasParser.OUTPUT) | (1 << BraketPragmasParser.CONST) | (1 << BraketPragmasParser.QREG) | (1 << BraketPragmasParser.QUBIT) | (1 << BraketPragmasParser.CREG) | (1 << BraketPragmasParser.BOOL) | (1 << BraketPragmasParser.BIT) | (1 << BraketPragmasParser.INT) | (1 << BraketPragmasParser.UINT) | (1 << BraketPragmasParser.FLOAT) | (1 << BraketPragmasParser.ANGLE) | (1 << BraketPragmasParser.COMPLEX) | (1 << BraketPragmasParser.ARRAY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (BraketPragmasParser.DURATION - 64)) | (1 << (BraketPragmasParser.STRETCH - 64)) | (1 << (BraketPragmasParser.GPHASE - 64)) | (1 << (BraketPragmasParser.INV - 64)) | (1 << (BraketPragmasParser.POW - 64)) | (1 << (BraketPragmasParser.CTRL - 64)) | (1 << (BraketPragmasParser.NEGCTRL - 64)) | (1 << (BraketPragmasParser.DURATIONOF - 64)) | (1 << (BraketPragmasParser.DELAY - 64)) | (1 << (BraketPragmasParser.RESET - 64)) | (1 << (BraketPragmasParser.MEASURE - 64)) | (1 << (BraketPragmasParser.BARRIER - 64)) | (1 << (BraketPragmasParser.BooleanLiteral - 64)) | (1 << (BraketPragmasParser.LPAREN - 64)) | (1 << (BraketPragmasParser.MINUS - 64)) | (1 << (BraketPragmasParser.TILDE - 64)) | (1 << (BraketPragmasParser.EXCLAMATION_POINT - 64)) | (1 << (BraketPragmasParser.ImaginaryLiteral - 64)) | (1 << (BraketPragmasParser.BinaryIntegerLiteral - 64)) | (1 << (BraketPragmasParser.OctalIntegerLiteral - 64)) | (1 << (BraketPragmasParser.DecimalIntegerLiteral - 64)) | (1 << (BraketPragmasParser.HexIntegerLiteral - 64)) | (1 << (BraketPragmasParser.Identifier - 64)) | (1 << (BraketPragmasParser.HardwareQubit - 64)) | (1 << (BraketPragmasParser.FloatLiteral - 64)) | (1 << (BraketPragmasParser.TimingLiteral - 64)) | (1 << (BraketPragmasParser.BitstringLiteral - 64)))) != 0):
                self.state = 400
                self.statement()
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 406
            self.match(BraketPragmasParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(BraketPragmasParser.PRAGMA, 0)

        def RemainingLineContent(self):
            return self.getToken(BraketPragmasParser.RemainingLineContent, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma" ):
                return visitor.visitPragma(self)
            else:
                return visitor.visitChildren(self)




    def pragma(self):

        localctx = BraketPragmasParser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_pragma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(BraketPragmasParser.PRAGMA)
            self.state = 409
            self.match(BraketPragmasParser.RemainingLineContent)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementOrScopeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(BraketPragmasParser.StatementContext,0)


        def scope(self):
            return self.getTypedRuleContext(BraketPragmasParser.ScopeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_statementOrScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementOrScope" ):
                listener.enterStatementOrScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementOrScope" ):
                listener.exitStatementOrScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementOrScope" ):
                return visitor.visitStatementOrScope(self)
            else:
                return visitor.visitChildren(self)




    def statementOrScope(self):

        localctx = BraketPragmasParser.StatementOrScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_statementOrScope)
        try:
            self.state = 413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.INCLUDE, BraketPragmasParser.DEFCALGRAMMAR, BraketPragmasParser.DEF, BraketPragmasParser.DEFCAL, BraketPragmasParser.GATE, BraketPragmasParser.EXTERN, BraketPragmasParser.BOX, BraketPragmasParser.LET, BraketPragmasParser.BREAK, BraketPragmasParser.CONTINUE, BraketPragmasParser.IF, BraketPragmasParser.END, BraketPragmasParser.RETURN, BraketPragmasParser.FOR, BraketPragmasParser.WHILE, BraketPragmasParser.PRAGMA, BraketPragmasParser.AnnotationKeyword, BraketPragmasParser.INPUT, BraketPragmasParser.OUTPUT, BraketPragmasParser.CONST, BraketPragmasParser.QREG, BraketPragmasParser.QUBIT, BraketPragmasParser.CREG, BraketPragmasParser.BOOL, BraketPragmasParser.BIT, BraketPragmasParser.INT, BraketPragmasParser.UINT, BraketPragmasParser.FLOAT, BraketPragmasParser.ANGLE, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.DURATION, BraketPragmasParser.STRETCH, BraketPragmasParser.GPHASE, BraketPragmasParser.INV, BraketPragmasParser.POW, BraketPragmasParser.CTRL, BraketPragmasParser.NEGCTRL, BraketPragmasParser.DURATIONOF, BraketPragmasParser.DELAY, BraketPragmasParser.RESET, BraketPragmasParser.MEASURE, BraketPragmasParser.BARRIER, BraketPragmasParser.BooleanLiteral, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.TILDE, BraketPragmasParser.EXCLAMATION_POINT, BraketPragmasParser.ImaginaryLiteral, BraketPragmasParser.BinaryIntegerLiteral, BraketPragmasParser.OctalIntegerLiteral, BraketPragmasParser.DecimalIntegerLiteral, BraketPragmasParser.HexIntegerLiteral, BraketPragmasParser.Identifier, BraketPragmasParser.HardwareQubit, BraketPragmasParser.FloatLiteral, BraketPragmasParser.TimingLiteral, BraketPragmasParser.BitstringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 411
                self.statement()
                pass
            elif token in [BraketPragmasParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 412
                self.scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationGrammarStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFCALGRAMMAR(self):
            return self.getToken(BraketPragmasParser.DEFCALGRAMMAR, 0)

        def StringLiteral(self):
            return self.getToken(BraketPragmasParser.StringLiteral, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_calibrationGrammarStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationGrammarStatement" ):
                listener.enterCalibrationGrammarStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationGrammarStatement" ):
                listener.exitCalibrationGrammarStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationGrammarStatement" ):
                return visitor.visitCalibrationGrammarStatement(self)
            else:
                return visitor.visitChildren(self)




    def calibrationGrammarStatement(self):

        localctx = BraketPragmasParser.CalibrationGrammarStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_calibrationGrammarStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(BraketPragmasParser.DEFCALGRAMMAR)
            self.state = 416
            self.match(BraketPragmasParser.StringLiteral)
            self.state = 417
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(BraketPragmasParser.INCLUDE, 0)

        def StringLiteral(self):
            return self.getToken(BraketPragmasParser.StringLiteral, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_includeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeStatement" ):
                listener.enterIncludeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeStatement" ):
                listener.exitIncludeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncludeStatement" ):
                return visitor.visitIncludeStatement(self)
            else:
                return visitor.visitChildren(self)




    def includeStatement(self):

        localctx = BraketPragmasParser.IncludeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_includeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(BraketPragmasParser.INCLUDE)
            self.state = 420
            self.match(BraketPragmasParser.StringLiteral)
            self.state = 421
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(BraketPragmasParser.BREAK, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = BraketPragmasParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.match(BraketPragmasParser.BREAK)
            self.state = 424
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(BraketPragmasParser.CONTINUE, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = BraketPragmasParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(BraketPragmasParser.CONTINUE)
            self.state = 427
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(BraketPragmasParser.END, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_endStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndStatement" ):
                listener.enterEndStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndStatement" ):
                listener.exitEndStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndStatement" ):
                return visitor.visitEndStatement(self)
            else:
                return visitor.visitChildren(self)




    def endStatement(self):

        localctx = BraketPragmasParser.EndStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_endStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(BraketPragmasParser.END)
            self.state = 430
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # StatementOrScopeContext

        def FOR(self):
            return self.getToken(BraketPragmasParser.FOR, 0)

        def scalarType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ScalarTypeContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.Identifier)
            else:
                return self.getToken(BraketPragmasParser.Identifier, i)

        def IN(self):
            return self.getToken(BraketPragmasParser.IN, 0)

        def statementOrScope(self):
            return self.getTypedRuleContext(BraketPragmasParser.StatementOrScopeContext,0)


        def setExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.SetExpressionContext,0)


        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def rangeExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.RangeExpressionContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = BraketPragmasParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_forStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.match(BraketPragmasParser.FOR)
            self.state = 433
            self.scalarType()
            self.state = 434
            self.match(BraketPragmasParser.Identifier)
            self.state = 435
            self.match(BraketPragmasParser.IN)
            self.state = 442
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.LBRACE]:
                self.state = 436
                self.setExpression()
                pass
            elif token in [BraketPragmasParser.LBRACKET]:
                self.state = 437
                self.match(BraketPragmasParser.LBRACKET)
                self.state = 438
                self.rangeExpression()
                self.state = 439
                self.match(BraketPragmasParser.RBRACKET)
                pass
            elif token in [BraketPragmasParser.Identifier]:
                self.state = 441
                self.match(BraketPragmasParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 444
            localctx.body = self.statementOrScope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.if_body = None # StatementOrScopeContext
            self.else_body = None # StatementOrScopeContext

        def IF(self):
            return self.getToken(BraketPragmasParser.IF, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def statementOrScope(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.StatementOrScopeContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.StatementOrScopeContext,i)


        def ELSE(self):
            return self.getToken(BraketPragmasParser.ELSE, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = BraketPragmasParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(BraketPragmasParser.IF)
            self.state = 447
            self.match(BraketPragmasParser.LPAREN)
            self.state = 448
            self.expression(0)
            self.state = 449
            self.match(BraketPragmasParser.RPAREN)
            self.state = 450
            localctx.if_body = self.statementOrScope()
            self.state = 453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 451
                self.match(BraketPragmasParser.ELSE)
                self.state = 452
                localctx.else_body = self.statementOrScope()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(BraketPragmasParser.RETURN, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def measureExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.MeasureExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = BraketPragmasParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.match(BraketPragmasParser.RETURN)
            self.state = 458
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.BOOL, BraketPragmasParser.BIT, BraketPragmasParser.INT, BraketPragmasParser.UINT, BraketPragmasParser.FLOAT, BraketPragmasParser.ANGLE, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.DURATION, BraketPragmasParser.STRETCH, BraketPragmasParser.DURATIONOF, BraketPragmasParser.BooleanLiteral, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.TILDE, BraketPragmasParser.EXCLAMATION_POINT, BraketPragmasParser.ImaginaryLiteral, BraketPragmasParser.BinaryIntegerLiteral, BraketPragmasParser.OctalIntegerLiteral, BraketPragmasParser.DecimalIntegerLiteral, BraketPragmasParser.HexIntegerLiteral, BraketPragmasParser.Identifier, BraketPragmasParser.HardwareQubit, BraketPragmasParser.FloatLiteral, BraketPragmasParser.TimingLiteral, BraketPragmasParser.BitstringLiteral]:
                self.state = 456
                self.expression(0)
                pass
            elif token in [BraketPragmasParser.MEASURE]:
                self.state = 457
                self.measureExpression()
                pass
            elif token in [BraketPragmasParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 460
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # StatementOrScopeContext

        def WHILE(self):
            return self.getToken(BraketPragmasParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def statementOrScope(self):
            return self.getTypedRuleContext(BraketPragmasParser.StatementOrScopeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = BraketPragmasParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(BraketPragmasParser.WHILE)
            self.state = 463
            self.match(BraketPragmasParser.LPAREN)
            self.state = 464
            self.expression(0)
            self.state = 465
            self.match(BraketPragmasParser.RPAREN)
            self.state = 466
            localctx.body = self.statementOrScope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BarrierStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BARRIER(self):
            return self.getToken(BraketPragmasParser.BARRIER, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def gateOperandList(self):
            return self.getTypedRuleContext(BraketPragmasParser.GateOperandListContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_barrierStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBarrierStatement" ):
                listener.enterBarrierStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBarrierStatement" ):
                listener.exitBarrierStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBarrierStatement" ):
                return visitor.visitBarrierStatement(self)
            else:
                return visitor.visitChildren(self)




    def barrierStatement(self):

        localctx = BraketPragmasParser.BarrierStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_barrierStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(BraketPragmasParser.BARRIER)
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.Identifier or _la==BraketPragmasParser.HardwareQubit:
                self.state = 469
                self.gateOperandList()


            self.state = 472
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOX(self):
            return self.getToken(BraketPragmasParser.BOX, 0)

        def scope(self):
            return self.getTypedRuleContext(BraketPragmasParser.ScopeContext,0)


        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_boxStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxStatement" ):
                listener.enterBoxStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxStatement" ):
                listener.exitBoxStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxStatement" ):
                return visitor.visitBoxStatement(self)
            else:
                return visitor.visitChildren(self)




    def boxStatement(self):

        localctx = BraketPragmasParser.BoxStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_boxStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(BraketPragmasParser.BOX)
            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LBRACKET:
                self.state = 475
                self.designator()


            self.state = 478
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelayStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELAY(self):
            return self.getToken(BraketPragmasParser.DELAY, 0)

        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def gateOperandList(self):
            return self.getTypedRuleContext(BraketPragmasParser.GateOperandListContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_delayStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelayStatement" ):
                listener.enterDelayStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelayStatement" ):
                listener.exitDelayStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelayStatement" ):
                return visitor.visitDelayStatement(self)
            else:
                return visitor.visitChildren(self)




    def delayStatement(self):

        localctx = BraketPragmasParser.DelayStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_delayStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(BraketPragmasParser.DELAY)
            self.state = 481
            self.designator()
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.Identifier or _la==BraketPragmasParser.HardwareQubit:
                self.state = 482
                self.gateOperandList()


            self.state = 485
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateCallStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def gateOperandList(self):
            return self.getTypedRuleContext(BraketPragmasParser.GateOperandListContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def gateModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.GateModifierContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.GateModifierContext,i)


        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def GPHASE(self):
            return self.getToken(BraketPragmasParser.GPHASE, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_gateCallStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateCallStatement" ):
                listener.enterGateCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateCallStatement" ):
                listener.exitGateCallStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateCallStatement" ):
                return visitor.visitGateCallStatement(self)
            else:
                return visitor.visitChildren(self)




    def gateCallStatement(self):

        localctx = BraketPragmasParser.GateCallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_gateCallStatement)
        self._la = 0 # Token type
        try:
            self.state = 528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (BraketPragmasParser.INV - 67)) | (1 << (BraketPragmasParser.POW - 67)) | (1 << (BraketPragmasParser.CTRL - 67)) | (1 << (BraketPragmasParser.NEGCTRL - 67)))) != 0):
                    self.state = 487
                    self.gateModifier()
                    self.state = 492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 493
                self.match(BraketPragmasParser.Identifier)
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LPAREN:
                    self.state = 494
                    self.match(BraketPragmasParser.LPAREN)
                    self.state = 496
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (BraketPragmasParser.BOOL - 56)) | (1 << (BraketPragmasParser.BIT - 56)) | (1 << (BraketPragmasParser.INT - 56)) | (1 << (BraketPragmasParser.UINT - 56)) | (1 << (BraketPragmasParser.FLOAT - 56)) | (1 << (BraketPragmasParser.ANGLE - 56)) | (1 << (BraketPragmasParser.COMPLEX - 56)) | (1 << (BraketPragmasParser.ARRAY - 56)) | (1 << (BraketPragmasParser.DURATION - 56)) | (1 << (BraketPragmasParser.STRETCH - 56)) | (1 << (BraketPragmasParser.DURATIONOF - 56)) | (1 << (BraketPragmasParser.BooleanLiteral - 56)) | (1 << (BraketPragmasParser.LPAREN - 56)) | (1 << (BraketPragmasParser.MINUS - 56)) | (1 << (BraketPragmasParser.TILDE - 56)) | (1 << (BraketPragmasParser.EXCLAMATION_POINT - 56)) | (1 << (BraketPragmasParser.ImaginaryLiteral - 56)) | (1 << (BraketPragmasParser.BinaryIntegerLiteral - 56)) | (1 << (BraketPragmasParser.OctalIntegerLiteral - 56)) | (1 << (BraketPragmasParser.DecimalIntegerLiteral - 56)) | (1 << (BraketPragmasParser.HexIntegerLiteral - 56)) | (1 << (BraketPragmasParser.Identifier - 56)) | (1 << (BraketPragmasParser.HardwareQubit - 56)) | (1 << (BraketPragmasParser.FloatLiteral - 56)) | (1 << (BraketPragmasParser.TimingLiteral - 56)) | (1 << (BraketPragmasParser.BitstringLiteral - 56)))) != 0):
                        self.state = 495
                        self.expressionList()


                    self.state = 498
                    self.match(BraketPragmasParser.RPAREN)


                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 501
                    self.designator()


                self.state = 504
                self.gateOperandList()
                self.state = 505
                self.match(BraketPragmasParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (BraketPragmasParser.INV - 67)) | (1 << (BraketPragmasParser.POW - 67)) | (1 << (BraketPragmasParser.CTRL - 67)) | (1 << (BraketPragmasParser.NEGCTRL - 67)))) != 0):
                    self.state = 507
                    self.gateModifier()
                    self.state = 512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 513
                self.match(BraketPragmasParser.GPHASE)
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LPAREN:
                    self.state = 514
                    self.match(BraketPragmasParser.LPAREN)
                    self.state = 516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (BraketPragmasParser.BOOL - 56)) | (1 << (BraketPragmasParser.BIT - 56)) | (1 << (BraketPragmasParser.INT - 56)) | (1 << (BraketPragmasParser.UINT - 56)) | (1 << (BraketPragmasParser.FLOAT - 56)) | (1 << (BraketPragmasParser.ANGLE - 56)) | (1 << (BraketPragmasParser.COMPLEX - 56)) | (1 << (BraketPragmasParser.ARRAY - 56)) | (1 << (BraketPragmasParser.DURATION - 56)) | (1 << (BraketPragmasParser.STRETCH - 56)) | (1 << (BraketPragmasParser.DURATIONOF - 56)) | (1 << (BraketPragmasParser.BooleanLiteral - 56)) | (1 << (BraketPragmasParser.LPAREN - 56)) | (1 << (BraketPragmasParser.MINUS - 56)) | (1 << (BraketPragmasParser.TILDE - 56)) | (1 << (BraketPragmasParser.EXCLAMATION_POINT - 56)) | (1 << (BraketPragmasParser.ImaginaryLiteral - 56)) | (1 << (BraketPragmasParser.BinaryIntegerLiteral - 56)) | (1 << (BraketPragmasParser.OctalIntegerLiteral - 56)) | (1 << (BraketPragmasParser.DecimalIntegerLiteral - 56)) | (1 << (BraketPragmasParser.HexIntegerLiteral - 56)) | (1 << (BraketPragmasParser.Identifier - 56)) | (1 << (BraketPragmasParser.HardwareQubit - 56)) | (1 << (BraketPragmasParser.FloatLiteral - 56)) | (1 << (BraketPragmasParser.TimingLiteral - 56)) | (1 << (BraketPragmasParser.BitstringLiteral - 56)))) != 0):
                        self.state = 515
                        self.expressionList()


                    self.state = 518
                    self.match(BraketPragmasParser.RPAREN)


                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 521
                    self.designator()


                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.Identifier or _la==BraketPragmasParser.HardwareQubit:
                    self.state = 524
                    self.gateOperandList()


                self.state = 527
                self.match(BraketPragmasParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeasureArrowAssignmentStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def measureExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.MeasureExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def ARROW(self):
            return self.getToken(BraketPragmasParser.ARROW, 0)

        def indexedIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_measureArrowAssignmentStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasureArrowAssignmentStatement" ):
                listener.enterMeasureArrowAssignmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasureArrowAssignmentStatement" ):
                listener.exitMeasureArrowAssignmentStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasureArrowAssignmentStatement" ):
                return visitor.visitMeasureArrowAssignmentStatement(self)
            else:
                return visitor.visitChildren(self)




    def measureArrowAssignmentStatement(self):

        localctx = BraketPragmasParser.MeasureArrowAssignmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_measureArrowAssignmentStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.measureExpression()
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.ARROW:
                self.state = 531
                self.match(BraketPragmasParser.ARROW)
                self.state = 532
                self.indexedIdentifier()


            self.state = 535
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(BraketPragmasParser.RESET, 0)

        def gateOperand(self):
            return self.getTypedRuleContext(BraketPragmasParser.GateOperandContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_resetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetStatement" ):
                listener.enterResetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetStatement" ):
                listener.exitResetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetStatement" ):
                return visitor.visitResetStatement(self)
            else:
                return visitor.visitChildren(self)




    def resetStatement(self):

        localctx = BraketPragmasParser.ResetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_resetStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(BraketPragmasParser.RESET)
            self.state = 538
            self.gateOperand()
            self.state = 539
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(BraketPragmasParser.LET, 0)

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def aliasExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.AliasExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_aliasDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasDeclarationStatement" ):
                listener.enterAliasDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasDeclarationStatement" ):
                listener.exitAliasDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasDeclarationStatement" ):
                return visitor.visitAliasDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def aliasDeclarationStatement(self):

        localctx = BraketPragmasParser.AliasDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_aliasDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(BraketPragmasParser.LET)
            self.state = 542
            self.match(BraketPragmasParser.Identifier)
            self.state = 543
            self.match(BraketPragmasParser.EQUALS)
            self.state = 544
            self.aliasExpression()
            self.state = 545
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def scalarType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ScalarTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayTypeContext,0)


        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def declarationExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.DeclarationExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_classicalDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalDeclarationStatement" ):
                listener.enterClassicalDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalDeclarationStatement" ):
                listener.exitClassicalDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalDeclarationStatement" ):
                return visitor.visitClassicalDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def classicalDeclarationStatement(self):

        localctx = BraketPragmasParser.ClassicalDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_classicalDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.BOOL, BraketPragmasParser.BIT, BraketPragmasParser.INT, BraketPragmasParser.UINT, BraketPragmasParser.FLOAT, BraketPragmasParser.ANGLE, BraketPragmasParser.COMPLEX, BraketPragmasParser.DURATION, BraketPragmasParser.STRETCH]:
                self.state = 547
                self.scalarType()
                pass
            elif token in [BraketPragmasParser.ARRAY]:
                self.state = 548
                self.arrayType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 551
            self.match(BraketPragmasParser.Identifier)
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.EQUALS:
                self.state = 552
                self.match(BraketPragmasParser.EQUALS)
                self.state = 553
                self.declarationExpression()


            self.state = 556
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(BraketPragmasParser.CONST, 0)

        def scalarType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ScalarTypeContext,0)


        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def declarationExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.DeclarationExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_constDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclarationStatement" ):
                listener.enterConstDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclarationStatement" ):
                listener.exitConstDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDeclarationStatement" ):
                return visitor.visitConstDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def constDeclarationStatement(self):

        localctx = BraketPragmasParser.ConstDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_constDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(BraketPragmasParser.CONST)
            self.state = 559
            self.scalarType()
            self.state = 560
            self.match(BraketPragmasParser.Identifier)
            self.state = 561
            self.match(BraketPragmasParser.EQUALS)
            self.state = 562
            self.declarationExpression()
            self.state = 563
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def INPUT(self):
            return self.getToken(BraketPragmasParser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(BraketPragmasParser.OUTPUT, 0)

        def scalarType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ScalarTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_ioDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoDeclarationStatement" ):
                listener.enterIoDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoDeclarationStatement" ):
                listener.exitIoDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoDeclarationStatement" ):
                return visitor.visitIoDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def ioDeclarationStatement(self):

        localctx = BraketPragmasParser.IoDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_ioDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.INPUT or _la==BraketPragmasParser.OUTPUT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.BOOL, BraketPragmasParser.BIT, BraketPragmasParser.INT, BraketPragmasParser.UINT, BraketPragmasParser.FLOAT, BraketPragmasParser.ANGLE, BraketPragmasParser.COMPLEX, BraketPragmasParser.DURATION, BraketPragmasParser.STRETCH]:
                self.state = 566
                self.scalarType()
                pass
            elif token in [BraketPragmasParser.ARRAY]:
                self.state = 567
                self.arrayType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 570
            self.match(BraketPragmasParser.Identifier)
            self.state = 571
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OldStyleDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def CREG(self):
            return self.getToken(BraketPragmasParser.CREG, 0)

        def QREG(self):
            return self.getToken(BraketPragmasParser.QREG, 0)

        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_oldStyleDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOldStyleDeclarationStatement" ):
                listener.enterOldStyleDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOldStyleDeclarationStatement" ):
                listener.exitOldStyleDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOldStyleDeclarationStatement" ):
                return visitor.visitOldStyleDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def oldStyleDeclarationStatement(self):

        localctx = BraketPragmasParser.OldStyleDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oldStyleDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.QREG or _la==BraketPragmasParser.CREG):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 574
            self.match(BraketPragmasParser.Identifier)
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LBRACKET:
                self.state = 575
                self.designator()


            self.state = 578
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qubitType(self):
            return self.getTypedRuleContext(BraketPragmasParser.QubitTypeContext,0)


        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumDeclarationStatement" ):
                listener.enterQuantumDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumDeclarationStatement" ):
                listener.exitQuantumDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumDeclarationStatement" ):
                return visitor.visitQuantumDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def quantumDeclarationStatement(self):

        localctx = BraketPragmasParser.QuantumDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_quantumDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.qubitType()
            self.state = 581
            self.match(BraketPragmasParser.Identifier)
            self.state = 582
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(BraketPragmasParser.DEF, 0)

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def scope(self):
            return self.getTypedRuleContext(BraketPragmasParser.ScopeContext,0)


        def argumentDefinitionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArgumentDefinitionListContext,0)


        def returnSignature(self):
            return self.getTypedRuleContext(BraketPragmasParser.ReturnSignatureContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_defStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefStatement" ):
                listener.enterDefStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefStatement" ):
                listener.exitDefStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefStatement" ):
                return visitor.visitDefStatement(self)
            else:
                return visitor.visitChildren(self)




    def defStatement(self):

        localctx = BraketPragmasParser.DefStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_defStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(BraketPragmasParser.DEF)
            self.state = 585
            self.match(BraketPragmasParser.Identifier)
            self.state = 586
            self.match(BraketPragmasParser.LPAREN)
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (BraketPragmasParser.CONST - 51)) | (1 << (BraketPragmasParser.MUTABLE - 51)) | (1 << (BraketPragmasParser.QREG - 51)) | (1 << (BraketPragmasParser.QUBIT - 51)) | (1 << (BraketPragmasParser.CREG - 51)) | (1 << (BraketPragmasParser.BOOL - 51)) | (1 << (BraketPragmasParser.BIT - 51)) | (1 << (BraketPragmasParser.INT - 51)) | (1 << (BraketPragmasParser.UINT - 51)) | (1 << (BraketPragmasParser.FLOAT - 51)) | (1 << (BraketPragmasParser.ANGLE - 51)) | (1 << (BraketPragmasParser.COMPLEX - 51)) | (1 << (BraketPragmasParser.DURATION - 51)) | (1 << (BraketPragmasParser.STRETCH - 51)))) != 0):
                self.state = 587
                self.argumentDefinitionList()


            self.state = 590
            self.match(BraketPragmasParser.RPAREN)
            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.ARROW:
                self.state = 591
                self.returnSignature()


            self.state = 594
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERN(self):
            return self.getToken(BraketPragmasParser.EXTERN, 0)

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def externArgumentList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExternArgumentListContext,0)


        def returnSignature(self):
            return self.getTypedRuleContext(BraketPragmasParser.ReturnSignatureContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_externStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternStatement" ):
                listener.enterExternStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternStatement" ):
                listener.exitExternStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternStatement" ):
                return visitor.visitExternStatement(self)
            else:
                return visitor.visitChildren(self)




    def externStatement(self):

        localctx = BraketPragmasParser.ExternStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_externStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(BraketPragmasParser.EXTERN)
            self.state = 597
            self.match(BraketPragmasParser.Identifier)
            self.state = 598
            self.match(BraketPragmasParser.LPAREN)
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (BraketPragmasParser.CONST - 51)) | (1 << (BraketPragmasParser.MUTABLE - 51)) | (1 << (BraketPragmasParser.CREG - 51)) | (1 << (BraketPragmasParser.BOOL - 51)) | (1 << (BraketPragmasParser.BIT - 51)) | (1 << (BraketPragmasParser.INT - 51)) | (1 << (BraketPragmasParser.UINT - 51)) | (1 << (BraketPragmasParser.FLOAT - 51)) | (1 << (BraketPragmasParser.ANGLE - 51)) | (1 << (BraketPragmasParser.COMPLEX - 51)) | (1 << (BraketPragmasParser.DURATION - 51)) | (1 << (BraketPragmasParser.STRETCH - 51)))) != 0):
                self.state = 599
                self.externArgumentList()


            self.state = 602
            self.match(BraketPragmasParser.RPAREN)
            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.ARROW:
                self.state = 603
                self.returnSignature()


            self.state = 606
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.params = None # IdentifierListContext
            self.qubits = None # IdentifierListContext

        def GATE(self):
            return self.getToken(BraketPragmasParser.GATE, 0)

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def scope(self):
            return self.getTypedRuleContext(BraketPragmasParser.ScopeContext,0)


        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IdentifierListContext,i)


        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_gateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateStatement" ):
                listener.enterGateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateStatement" ):
                listener.exitGateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateStatement" ):
                return visitor.visitGateStatement(self)
            else:
                return visitor.visitChildren(self)




    def gateStatement(self):

        localctx = BraketPragmasParser.GateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_gateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(BraketPragmasParser.GATE)
            self.state = 609
            self.match(BraketPragmasParser.Identifier)
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LPAREN:
                self.state = 610
                self.match(BraketPragmasParser.LPAREN)
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.Identifier:
                    self.state = 611
                    localctx.params = self.identifierList()


                self.state = 614
                self.match(BraketPragmasParser.RPAREN)


            self.state = 617
            localctx.qubits = self.identifierList()
            self.state = 618
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def indexedIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def CompoundAssignmentOperator(self):
            return self.getToken(BraketPragmasParser.CompoundAssignmentOperator, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def measureExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.MeasureExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_assignmentStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentStatement" ):
                listener.enterAssignmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentStatement" ):
                listener.exitAssignmentStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentStatement" ):
                return visitor.visitAssignmentStatement(self)
            else:
                return visitor.visitChildren(self)




    def assignmentStatement(self):

        localctx = BraketPragmasParser.AssignmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_assignmentStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.indexedIdentifier()
            self.state = 621
            localctx.op = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.EQUALS or _la==BraketPragmasParser.CompoundAssignmentOperator):
                localctx.op = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.BOOL, BraketPragmasParser.BIT, BraketPragmasParser.INT, BraketPragmasParser.UINT, BraketPragmasParser.FLOAT, BraketPragmasParser.ANGLE, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.DURATION, BraketPragmasParser.STRETCH, BraketPragmasParser.DURATIONOF, BraketPragmasParser.BooleanLiteral, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.TILDE, BraketPragmasParser.EXCLAMATION_POINT, BraketPragmasParser.ImaginaryLiteral, BraketPragmasParser.BinaryIntegerLiteral, BraketPragmasParser.OctalIntegerLiteral, BraketPragmasParser.DecimalIntegerLiteral, BraketPragmasParser.HexIntegerLiteral, BraketPragmasParser.Identifier, BraketPragmasParser.HardwareQubit, BraketPragmasParser.FloatLiteral, BraketPragmasParser.TimingLiteral, BraketPragmasParser.BitstringLiteral]:
                self.state = 622
                self.expression(0)
                pass
            elif token in [BraketPragmasParser.MEASURE]:
                self.state = 623
                self.measureExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 626
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = BraketPragmasParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.expression(0)
            self.state = 629
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFCAL(self):
            return self.getToken(BraketPragmasParser.DEFCAL, 0)

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def defcalArgumentList(self):
            return self.getTypedRuleContext(BraketPragmasParser.DefcalArgumentListContext,0)


        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def returnSignature(self):
            return self.getTypedRuleContext(BraketPragmasParser.ReturnSignatureContext,0)


        def argumentDefinitionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArgumentDefinitionListContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_defcalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalStatement" ):
                listener.enterDefcalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalStatement" ):
                listener.exitDefcalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalStatement" ):
                return visitor.visitDefcalStatement(self)
            else:
                return visitor.visitChildren(self)




    def defcalStatement(self):

        localctx = BraketPragmasParser.DefcalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_defcalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(BraketPragmasParser.DEFCAL)
            self.state = 632
            self.match(BraketPragmasParser.Identifier)
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LPAREN:
                self.state = 633
                self.match(BraketPragmasParser.LPAREN)
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (BraketPragmasParser.CONST - 51)) | (1 << (BraketPragmasParser.MUTABLE - 51)) | (1 << (BraketPragmasParser.QREG - 51)) | (1 << (BraketPragmasParser.QUBIT - 51)) | (1 << (BraketPragmasParser.CREG - 51)) | (1 << (BraketPragmasParser.BOOL - 51)) | (1 << (BraketPragmasParser.BIT - 51)) | (1 << (BraketPragmasParser.INT - 51)) | (1 << (BraketPragmasParser.UINT - 51)) | (1 << (BraketPragmasParser.FLOAT - 51)) | (1 << (BraketPragmasParser.ANGLE - 51)) | (1 << (BraketPragmasParser.COMPLEX - 51)) | (1 << (BraketPragmasParser.DURATION - 51)) | (1 << (BraketPragmasParser.STRETCH - 51)))) != 0):
                    self.state = 634
                    self.argumentDefinitionList()


                self.state = 637
                self.match(BraketPragmasParser.RPAREN)


            self.state = 640
            self.defcalArgumentList()
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.ARROW:
                self.state = 641
                self.returnSignature()


            self.state = 644
            self.match(BraketPragmasParser.LBRACE)
            self.state = 648
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 645
                    self.matchWildcard() 
                self.state = 650
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

            self.state = 651
            self.match(BraketPragmasParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class BitwiseXorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)

        def CARET(self):
            return self.getToken(BraketPragmasParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseXorExpression" ):
                listener.enterBitwiseXorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseXorExpression" ):
                listener.exitBitwiseXorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseXorExpression" ):
                return visitor.visitBitwiseXorExpression(self)
            else:
                return visitor.visitChildren(self)


    class AdditiveExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)

        def PLUS(self):
            return self.getToken(BraketPragmasParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(BraketPragmasParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)


    class DurationofExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DURATIONOF(self):
            return self.getToken(BraketPragmasParser.DURATIONOF, 0)
        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)
        def scope(self):
            return self.getTypedRuleContext(BraketPragmasParser.ScopeContext,0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurationofExpression" ):
                listener.enterDurationofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurationofExpression" ):
                listener.exitDurationofExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDurationofExpression" ):
                return visitor.visitDurationofExpression(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesisExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpression" ):
                listener.enterParenthesisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpression" ):
                listener.exitParenthesisExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesisExpression" ):
                return visitor.visitParenthesisExpression(self)
            else:
                return visitor.visitChildren(self)


    class ComparisonExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)

        def ComparisonOperator(self):
            return self.getToken(BraketPragmasParser.ComparisonOperator, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonExpression" ):
                listener.enterComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonExpression" ):
                listener.exitComparisonExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonExpression" ):
                return visitor.visitComparisonExpression(self)
            else:
                return visitor.visitChildren(self)


    class MultiplicativeExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(BraketPragmasParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(BraketPragmasParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(BraketPragmasParser.PERCENT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalOrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)

        def DOUBLE_PIPE(self):
            return self.getToken(BraketPragmasParser.DOUBLE_PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpression" ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)
        def scalarType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ScalarTypeContext,0)

        def arrayType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpression" ):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)


    class PowerExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)

        def DOUBLE_ASTERISK(self):
            return self.getToken(BraketPragmasParser.DOUBLE_ASTERISK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerExpression" ):
                listener.enterPowerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerExpression" ):
                listener.exitPowerExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowerExpression" ):
                return visitor.visitPowerExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitwiseOrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)

        def PIPE(self):
            return self.getToken(BraketPragmasParser.PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseOrExpression" ):
                listener.enterBitwiseOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseOrExpression" ):
                listener.exitBitwiseOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseOrExpression" ):
                return visitor.visitBitwiseOrExpression(self)
            else:
                return visitor.visitChildren(self)


    class CallExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)
        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)
        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallExpression" ):
                listener.enterCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallExpression" ):
                listener.exitCallExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallExpression" ):
                return visitor.visitCallExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitshiftExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)

        def BitshiftOperator(self):
            return self.getToken(BraketPragmasParser.BitshiftOperator, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitshiftExpression" ):
                listener.enterBitshiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitshiftExpression" ):
                listener.exitBitshiftExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitshiftExpression" ):
                return visitor.visitBitshiftExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitwiseAndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)

        def AMPERSAND(self):
            return self.getToken(BraketPragmasParser.AMPERSAND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseAndExpression" ):
                listener.enterBitwiseAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseAndExpression" ):
                listener.exitBitwiseAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseAndExpression" ):
                return visitor.visitBitwiseAndExpression(self)
            else:
                return visitor.visitChildren(self)


    class EqualityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)

        def EqualityOperator(self):
            return self.getToken(BraketPragmasParser.EqualityOperator, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalAndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)

        def DOUBLE_AMPERSAND(self):
            return self.getToken(BraketPragmasParser.DOUBLE_AMPERSAND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)


    class IndexExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)

        def indexOperator(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExpression" ):
                listener.enterIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExpression" ):
                listener.exitIndexExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexExpression" ):
                return visitor.visitIndexExpression(self)
            else:
                return visitor.visitChildren(self)


    class UnaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)

        def TILDE(self):
            return self.getToken(BraketPragmasParser.TILDE, 0)
        def EXCLAMATION_POINT(self):
            return self.getToken(BraketPragmasParser.EXCLAMATION_POINT, 0)
        def MINUS(self):
            return self.getToken(BraketPragmasParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpression" ):
                return visitor.visitUnaryExpression(self)
            else:
                return visitor.visitChildren(self)


    class LiteralExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BraketPragmasParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)
        def BinaryIntegerLiteral(self):
            return self.getToken(BraketPragmasParser.BinaryIntegerLiteral, 0)
        def OctalIntegerLiteral(self):
            return self.getToken(BraketPragmasParser.OctalIntegerLiteral, 0)
        def DecimalIntegerLiteral(self):
            return self.getToken(BraketPragmasParser.DecimalIntegerLiteral, 0)
        def HexIntegerLiteral(self):
            return self.getToken(BraketPragmasParser.HexIntegerLiteral, 0)
        def FloatLiteral(self):
            return self.getToken(BraketPragmasParser.FloatLiteral, 0)
        def ImaginaryLiteral(self):
            return self.getToken(BraketPragmasParser.ImaginaryLiteral, 0)
        def BooleanLiteral(self):
            return self.getToken(BraketPragmasParser.BooleanLiteral, 0)
        def BitstringLiteral(self):
            return self.getToken(BraketPragmasParser.BitstringLiteral, 0)
        def TimingLiteral(self):
            return self.getToken(BraketPragmasParser.TimingLiteral, 0)
        def HardwareQubit(self):
            return self.getToken(BraketPragmasParser.HardwareQubit, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralExpression" ):
                return visitor.visitLiteralExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                localctx = BraketPragmasParser.ParenthesisExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 654
                self.match(BraketPragmasParser.LPAREN)
                self.state = 655
                self.expression(0)
                self.state = 656
                self.match(BraketPragmasParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = BraketPragmasParser.UnaryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 658
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & ((1 << (BraketPragmasParser.MINUS - 92)) | (1 << (BraketPragmasParser.TILDE - 92)) | (1 << (BraketPragmasParser.EXCLAMATION_POINT - 92)))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 659
                self.expression(15)
                pass

            elif la_ == 3:
                localctx = BraketPragmasParser.CastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 662
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [BraketPragmasParser.BOOL, BraketPragmasParser.BIT, BraketPragmasParser.INT, BraketPragmasParser.UINT, BraketPragmasParser.FLOAT, BraketPragmasParser.ANGLE, BraketPragmasParser.COMPLEX, BraketPragmasParser.DURATION, BraketPragmasParser.STRETCH]:
                    self.state = 660
                    self.scalarType()
                    pass
                elif token in [BraketPragmasParser.ARRAY]:
                    self.state = 661
                    self.arrayType()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 664
                self.match(BraketPragmasParser.LPAREN)
                self.state = 665
                self.expression(0)
                self.state = 666
                self.match(BraketPragmasParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = BraketPragmasParser.DurationofExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 668
                self.match(BraketPragmasParser.DURATIONOF)
                self.state = 669
                self.match(BraketPragmasParser.LPAREN)
                self.state = 670
                self.scope()
                self.state = 671
                self.match(BraketPragmasParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = BraketPragmasParser.CallExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 673
                self.match(BraketPragmasParser.Identifier)
                self.state = 674
                self.match(BraketPragmasParser.LPAREN)
                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (BraketPragmasParser.BOOL - 56)) | (1 << (BraketPragmasParser.BIT - 56)) | (1 << (BraketPragmasParser.INT - 56)) | (1 << (BraketPragmasParser.UINT - 56)) | (1 << (BraketPragmasParser.FLOAT - 56)) | (1 << (BraketPragmasParser.ANGLE - 56)) | (1 << (BraketPragmasParser.COMPLEX - 56)) | (1 << (BraketPragmasParser.ARRAY - 56)) | (1 << (BraketPragmasParser.DURATION - 56)) | (1 << (BraketPragmasParser.STRETCH - 56)) | (1 << (BraketPragmasParser.DURATIONOF - 56)) | (1 << (BraketPragmasParser.BooleanLiteral - 56)) | (1 << (BraketPragmasParser.LPAREN - 56)) | (1 << (BraketPragmasParser.MINUS - 56)) | (1 << (BraketPragmasParser.TILDE - 56)) | (1 << (BraketPragmasParser.EXCLAMATION_POINT - 56)) | (1 << (BraketPragmasParser.ImaginaryLiteral - 56)) | (1 << (BraketPragmasParser.BinaryIntegerLiteral - 56)) | (1 << (BraketPragmasParser.OctalIntegerLiteral - 56)) | (1 << (BraketPragmasParser.DecimalIntegerLiteral - 56)) | (1 << (BraketPragmasParser.HexIntegerLiteral - 56)) | (1 << (BraketPragmasParser.Identifier - 56)) | (1 << (BraketPragmasParser.HardwareQubit - 56)) | (1 << (BraketPragmasParser.FloatLiteral - 56)) | (1 << (BraketPragmasParser.TimingLiteral - 56)) | (1 << (BraketPragmasParser.BitstringLiteral - 56)))) != 0):
                    self.state = 675
                    self.expressionList()


                self.state = 678
                self.match(BraketPragmasParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = BraketPragmasParser.LiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 679
                _la = self._input.LA(1)
                if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (BraketPragmasParser.BooleanLiteral - 77)) | (1 << (BraketPragmasParser.ImaginaryLiteral - 77)) | (1 << (BraketPragmasParser.BinaryIntegerLiteral - 77)) | (1 << (BraketPragmasParser.OctalIntegerLiteral - 77)) | (1 << (BraketPragmasParser.DecimalIntegerLiteral - 77)) | (1 << (BraketPragmasParser.HexIntegerLiteral - 77)) | (1 << (BraketPragmasParser.Identifier - 77)) | (1 << (BraketPragmasParser.HardwareQubit - 77)) | (1 << (BraketPragmasParser.FloatLiteral - 77)) | (1 << (BraketPragmasParser.TimingLiteral - 77)) | (1 << (BraketPragmasParser.BitstringLiteral - 77)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 719
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 717
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        localctx = BraketPragmasParser.PowerExpressionContext(self, BraketPragmasParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 682
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 683
                        localctx.op = self.match(BraketPragmasParser.DOUBLE_ASTERISK)
                        self.state = 684
                        self.expression(16)
                        pass

                    elif la_ == 2:
                        localctx = BraketPragmasParser.MultiplicativeExpressionContext(self, BraketPragmasParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 685
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 686
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (BraketPragmasParser.ASTERISK - 93)) | (1 << (BraketPragmasParser.SLASH - 93)) | (1 << (BraketPragmasParser.PERCENT - 93)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 687
                        self.expression(15)
                        pass

                    elif la_ == 3:
                        localctx = BraketPragmasParser.AdditiveExpressionContext(self, BraketPragmasParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 688
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 689
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==BraketPragmasParser.PLUS or _la==BraketPragmasParser.MINUS):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 690
                        self.expression(14)
                        pass

                    elif la_ == 4:
                        localctx = BraketPragmasParser.BitshiftExpressionContext(self, BraketPragmasParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 691
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 692
                        localctx.op = self.match(BraketPragmasParser.BitshiftOperator)
                        self.state = 693
                        self.expression(13)
                        pass

                    elif la_ == 5:
                        localctx = BraketPragmasParser.ComparisonExpressionContext(self, BraketPragmasParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 694
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 695
                        localctx.op = self.match(BraketPragmasParser.ComparisonOperator)
                        self.state = 696
                        self.expression(12)
                        pass

                    elif la_ == 6:
                        localctx = BraketPragmasParser.EqualityExpressionContext(self, BraketPragmasParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 697
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 698
                        localctx.op = self.match(BraketPragmasParser.EqualityOperator)
                        self.state = 699
                        self.expression(11)
                        pass

                    elif la_ == 7:
                        localctx = BraketPragmasParser.BitwiseAndExpressionContext(self, BraketPragmasParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 700
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 701
                        localctx.op = self.match(BraketPragmasParser.AMPERSAND)
                        self.state = 702
                        self.expression(10)
                        pass

                    elif la_ == 8:
                        localctx = BraketPragmasParser.BitwiseXorExpressionContext(self, BraketPragmasParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 703
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 704
                        localctx.op = self.match(BraketPragmasParser.CARET)
                        self.state = 705
                        self.expression(9)
                        pass

                    elif la_ == 9:
                        localctx = BraketPragmasParser.BitwiseOrExpressionContext(self, BraketPragmasParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 706
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 707
                        localctx.op = self.match(BraketPragmasParser.PIPE)
                        self.state = 708
                        self.expression(8)
                        pass

                    elif la_ == 10:
                        localctx = BraketPragmasParser.LogicalAndExpressionContext(self, BraketPragmasParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 709
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 710
                        localctx.op = self.match(BraketPragmasParser.DOUBLE_AMPERSAND)
                        self.state = 711
                        self.expression(7)
                        pass

                    elif la_ == 11:
                        localctx = BraketPragmasParser.LogicalOrExpressionContext(self, BraketPragmasParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 712
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 713
                        localctx.op = self.match(BraketPragmasParser.DOUBLE_PIPE)
                        self.state = 714
                        self.expression(6)
                        pass

                    elif la_ == 12:
                        localctx = BraketPragmasParser.IndexExpressionContext(self, BraketPragmasParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 715
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 716
                        self.indexOperator()
                        pass

             
                self.state = 721
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AliasExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)


        def DOUBLE_PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.DOUBLE_PLUS)
            else:
                return self.getToken(BraketPragmasParser.DOUBLE_PLUS, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_aliasExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasExpression" ):
                listener.enterAliasExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasExpression" ):
                listener.exitAliasExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasExpression" ):
                return visitor.visitAliasExpression(self)
            else:
                return visitor.visitChildren(self)




    def aliasExpression(self):

        localctx = BraketPragmasParser.AliasExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_aliasExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.expression(0)
            self.state = 727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.DOUBLE_PLUS:
                self.state = 723
                self.match(BraketPragmasParser.DOUBLE_PLUS)
                self.state = 724
                self.expression(0)
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def measureExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.MeasureExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_declarationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationExpression" ):
                listener.enterDeclarationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationExpression" ):
                listener.exitDeclarationExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationExpression" ):
                return visitor.visitDeclarationExpression(self)
            else:
                return visitor.visitChildren(self)




    def declarationExpression(self):

        localctx = BraketPragmasParser.DeclarationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_declarationExpression)
        try:
            self.state = 733
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 730
                self.arrayLiteral()
                pass
            elif token in [BraketPragmasParser.BOOL, BraketPragmasParser.BIT, BraketPragmasParser.INT, BraketPragmasParser.UINT, BraketPragmasParser.FLOAT, BraketPragmasParser.ANGLE, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.DURATION, BraketPragmasParser.STRETCH, BraketPragmasParser.DURATIONOF, BraketPragmasParser.BooleanLiteral, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.TILDE, BraketPragmasParser.EXCLAMATION_POINT, BraketPragmasParser.ImaginaryLiteral, BraketPragmasParser.BinaryIntegerLiteral, BraketPragmasParser.OctalIntegerLiteral, BraketPragmasParser.DecimalIntegerLiteral, BraketPragmasParser.HexIntegerLiteral, BraketPragmasParser.Identifier, BraketPragmasParser.HardwareQubit, BraketPragmasParser.FloatLiteral, BraketPragmasParser.TimingLiteral, BraketPragmasParser.BitstringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 731
                self.expression(0)
                pass
            elif token in [BraketPragmasParser.MEASURE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 732
                self.measureExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeasureExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEASURE(self):
            return self.getToken(BraketPragmasParser.MEASURE, 0)

        def gateOperand(self):
            return self.getTypedRuleContext(BraketPragmasParser.GateOperandContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_measureExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasureExpression" ):
                listener.enterMeasureExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasureExpression" ):
                listener.exitMeasureExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasureExpression" ):
                return visitor.visitMeasureExpression(self)
            else:
                return visitor.visitChildren(self)




    def measureExpression(self):

        localctx = BraketPragmasParser.MeasureExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_measureExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(BraketPragmasParser.MEASURE)
            self.state = 736
            self.gateOperand()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COLON)
            else:
                return self.getToken(BraketPragmasParser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_rangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeExpression" ):
                return visitor.visitRangeExpression(self)
            else:
                return visitor.visitChildren(self)




    def rangeExpression(self):

        localctx = BraketPragmasParser.RangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_rangeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (BraketPragmasParser.BOOL - 56)) | (1 << (BraketPragmasParser.BIT - 56)) | (1 << (BraketPragmasParser.INT - 56)) | (1 << (BraketPragmasParser.UINT - 56)) | (1 << (BraketPragmasParser.FLOAT - 56)) | (1 << (BraketPragmasParser.ANGLE - 56)) | (1 << (BraketPragmasParser.COMPLEX - 56)) | (1 << (BraketPragmasParser.ARRAY - 56)) | (1 << (BraketPragmasParser.DURATION - 56)) | (1 << (BraketPragmasParser.STRETCH - 56)) | (1 << (BraketPragmasParser.DURATIONOF - 56)) | (1 << (BraketPragmasParser.BooleanLiteral - 56)) | (1 << (BraketPragmasParser.LPAREN - 56)) | (1 << (BraketPragmasParser.MINUS - 56)) | (1 << (BraketPragmasParser.TILDE - 56)) | (1 << (BraketPragmasParser.EXCLAMATION_POINT - 56)) | (1 << (BraketPragmasParser.ImaginaryLiteral - 56)) | (1 << (BraketPragmasParser.BinaryIntegerLiteral - 56)) | (1 << (BraketPragmasParser.OctalIntegerLiteral - 56)) | (1 << (BraketPragmasParser.DecimalIntegerLiteral - 56)) | (1 << (BraketPragmasParser.HexIntegerLiteral - 56)) | (1 << (BraketPragmasParser.Identifier - 56)) | (1 << (BraketPragmasParser.HardwareQubit - 56)) | (1 << (BraketPragmasParser.FloatLiteral - 56)) | (1 << (BraketPragmasParser.TimingLiteral - 56)) | (1 << (BraketPragmasParser.BitstringLiteral - 56)))) != 0):
                self.state = 738
                self.expression(0)


            self.state = 741
            self.match(BraketPragmasParser.COLON)
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (BraketPragmasParser.BOOL - 56)) | (1 << (BraketPragmasParser.BIT - 56)) | (1 << (BraketPragmasParser.INT - 56)) | (1 << (BraketPragmasParser.UINT - 56)) | (1 << (BraketPragmasParser.FLOAT - 56)) | (1 << (BraketPragmasParser.ANGLE - 56)) | (1 << (BraketPragmasParser.COMPLEX - 56)) | (1 << (BraketPragmasParser.ARRAY - 56)) | (1 << (BraketPragmasParser.DURATION - 56)) | (1 << (BraketPragmasParser.STRETCH - 56)) | (1 << (BraketPragmasParser.DURATIONOF - 56)) | (1 << (BraketPragmasParser.BooleanLiteral - 56)) | (1 << (BraketPragmasParser.LPAREN - 56)) | (1 << (BraketPragmasParser.MINUS - 56)) | (1 << (BraketPragmasParser.TILDE - 56)) | (1 << (BraketPragmasParser.EXCLAMATION_POINT - 56)) | (1 << (BraketPragmasParser.ImaginaryLiteral - 56)) | (1 << (BraketPragmasParser.BinaryIntegerLiteral - 56)) | (1 << (BraketPragmasParser.OctalIntegerLiteral - 56)) | (1 << (BraketPragmasParser.DecimalIntegerLiteral - 56)) | (1 << (BraketPragmasParser.HexIntegerLiteral - 56)) | (1 << (BraketPragmasParser.Identifier - 56)) | (1 << (BraketPragmasParser.HardwareQubit - 56)) | (1 << (BraketPragmasParser.FloatLiteral - 56)) | (1 << (BraketPragmasParser.TimingLiteral - 56)) | (1 << (BraketPragmasParser.BitstringLiteral - 56)))) != 0):
                self.state = 742
                self.expression(0)


            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.COLON:
                self.state = 745
                self.match(BraketPragmasParser.COLON)
                self.state = 746
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)


        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_setExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetExpression" ):
                listener.enterSetExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetExpression" ):
                listener.exitSetExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetExpression" ):
                return visitor.visitSetExpression(self)
            else:
                return visitor.visitChildren(self)




    def setExpression(self):

        localctx = BraketPragmasParser.SetExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_setExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(BraketPragmasParser.LBRACE)
            self.state = 750
            self.expression(0)
            self.state = 755
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 751
                    self.match(BraketPragmasParser.COMMA)
                    self.state = 752
                    self.expression(0) 
                self.state = 757
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.COMMA:
                self.state = 758
                self.match(BraketPragmasParser.COMMA)


            self.state = 761
            self.match(BraketPragmasParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)


        def arrayLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ArrayLiteralContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ArrayLiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = BraketPragmasParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(BraketPragmasParser.LBRACE)
            self.state = 766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.BOOL, BraketPragmasParser.BIT, BraketPragmasParser.INT, BraketPragmasParser.UINT, BraketPragmasParser.FLOAT, BraketPragmasParser.ANGLE, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.DURATION, BraketPragmasParser.STRETCH, BraketPragmasParser.DURATIONOF, BraketPragmasParser.BooleanLiteral, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.TILDE, BraketPragmasParser.EXCLAMATION_POINT, BraketPragmasParser.ImaginaryLiteral, BraketPragmasParser.BinaryIntegerLiteral, BraketPragmasParser.OctalIntegerLiteral, BraketPragmasParser.DecimalIntegerLiteral, BraketPragmasParser.HexIntegerLiteral, BraketPragmasParser.Identifier, BraketPragmasParser.HardwareQubit, BraketPragmasParser.FloatLiteral, BraketPragmasParser.TimingLiteral, BraketPragmasParser.BitstringLiteral]:
                self.state = 764
                self.expression(0)
                pass
            elif token in [BraketPragmasParser.LBRACE]:
                self.state = 765
                self.arrayLiteral()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 775
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 768
                    self.match(BraketPragmasParser.COMMA)
                    self.state = 771
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [BraketPragmasParser.BOOL, BraketPragmasParser.BIT, BraketPragmasParser.INT, BraketPragmasParser.UINT, BraketPragmasParser.FLOAT, BraketPragmasParser.ANGLE, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.DURATION, BraketPragmasParser.STRETCH, BraketPragmasParser.DURATIONOF, BraketPragmasParser.BooleanLiteral, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.TILDE, BraketPragmasParser.EXCLAMATION_POINT, BraketPragmasParser.ImaginaryLiteral, BraketPragmasParser.BinaryIntegerLiteral, BraketPragmasParser.OctalIntegerLiteral, BraketPragmasParser.DecimalIntegerLiteral, BraketPragmasParser.HexIntegerLiteral, BraketPragmasParser.Identifier, BraketPragmasParser.HardwareQubit, BraketPragmasParser.FloatLiteral, BraketPragmasParser.TimingLiteral, BraketPragmasParser.BitstringLiteral]:
                        self.state = 769
                        self.expression(0)
                        pass
                    elif token in [BraketPragmasParser.LBRACE]:
                        self.state = 770
                        self.arrayLiteral()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 777
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.COMMA:
                self.state = 778
                self.match(BraketPragmasParser.COMMA)


            self.state = 781
            self.match(BraketPragmasParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def setExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.SetExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)


        def rangeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.RangeExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.RangeExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_indexOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexOperator" ):
                listener.enterIndexOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexOperator" ):
                listener.exitIndexOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexOperator" ):
                return visitor.visitIndexOperator(self)
            else:
                return visitor.visitChildren(self)




    def indexOperator(self):

        localctx = BraketPragmasParser.IndexOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_indexOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 802
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.LBRACE]:
                self.state = 784
                self.setExpression()
                pass
            elif token in [BraketPragmasParser.BOOL, BraketPragmasParser.BIT, BraketPragmasParser.INT, BraketPragmasParser.UINT, BraketPragmasParser.FLOAT, BraketPragmasParser.ANGLE, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.DURATION, BraketPragmasParser.STRETCH, BraketPragmasParser.DURATIONOF, BraketPragmasParser.BooleanLiteral, BraketPragmasParser.LPAREN, BraketPragmasParser.COLON, BraketPragmasParser.MINUS, BraketPragmasParser.TILDE, BraketPragmasParser.EXCLAMATION_POINT, BraketPragmasParser.ImaginaryLiteral, BraketPragmasParser.BinaryIntegerLiteral, BraketPragmasParser.OctalIntegerLiteral, BraketPragmasParser.DecimalIntegerLiteral, BraketPragmasParser.HexIntegerLiteral, BraketPragmasParser.Identifier, BraketPragmasParser.HardwareQubit, BraketPragmasParser.FloatLiteral, BraketPragmasParser.TimingLiteral, BraketPragmasParser.BitstringLiteral]:
                self.state = 787
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 785
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 786
                    self.rangeExpression()
                    pass


                self.state = 796
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 789
                        self.match(BraketPragmasParser.COMMA)
                        self.state = 792
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                        if la_ == 1:
                            self.state = 790
                            self.expression(0)
                            pass

                        elif la_ == 2:
                            self.state = 791
                            self.rangeExpression()
                            pass

                 
                    self.state = 798
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.COMMA:
                    self.state = 799
                    self.match(BraketPragmasParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 804
            self.match(BraketPragmasParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexedIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def indexOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IndexOperatorContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IndexOperatorContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_indexedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexedIdentifier" ):
                listener.enterIndexedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexedIdentifier" ):
                listener.exitIndexedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexedIdentifier" ):
                return visitor.visitIndexedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def indexedIdentifier(self):

        localctx = BraketPragmasParser.IndexedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_indexedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.match(BraketPragmasParser.Identifier)
            self.state = 810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.LBRACKET:
                self.state = 807
                self.indexOperator()
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnSignatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(BraketPragmasParser.ARROW, 0)

        def scalarType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_returnSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnSignature" ):
                listener.enterReturnSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnSignature" ):
                listener.exitReturnSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnSignature" ):
                return visitor.visitReturnSignature(self)
            else:
                return visitor.visitChildren(self)




    def returnSignature(self):

        localctx = BraketPragmasParser.ReturnSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_returnSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(BraketPragmasParser.ARROW)
            self.state = 814
            self.scalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(BraketPragmasParser.AT, 0)

        def INV(self):
            return self.getToken(BraketPragmasParser.INV, 0)

        def POW(self):
            return self.getToken(BraketPragmasParser.POW, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def CTRL(self):
            return self.getToken(BraketPragmasParser.CTRL, 0)

        def NEGCTRL(self):
            return self.getToken(BraketPragmasParser.NEGCTRL, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_gateModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateModifier" ):
                listener.enterGateModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateModifier" ):
                listener.exitGateModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateModifier" ):
                return visitor.visitGateModifier(self)
            else:
                return visitor.visitChildren(self)




    def gateModifier(self):

        localctx = BraketPragmasParser.GateModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_gateModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.INV]:
                self.state = 816
                self.match(BraketPragmasParser.INV)
                pass
            elif token in [BraketPragmasParser.POW]:
                self.state = 817
                self.match(BraketPragmasParser.POW)
                self.state = 818
                self.match(BraketPragmasParser.LPAREN)
                self.state = 819
                self.expression(0)
                self.state = 820
                self.match(BraketPragmasParser.RPAREN)
                pass
            elif token in [BraketPragmasParser.CTRL, BraketPragmasParser.NEGCTRL]:
                self.state = 822
                _la = self._input.LA(1)
                if not(_la==BraketPragmasParser.CTRL or _la==BraketPragmasParser.NEGCTRL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LPAREN:
                    self.state = 823
                    self.match(BraketPragmasParser.LPAREN)
                    self.state = 824
                    self.expression(0)
                    self.state = 825
                    self.match(BraketPragmasParser.RPAREN)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 831
            self.match(BraketPragmasParser.AT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT(self):
            return self.getToken(BraketPragmasParser.BIT, 0)

        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def INT(self):
            return self.getToken(BraketPragmasParser.INT, 0)

        def UINT(self):
            return self.getToken(BraketPragmasParser.UINT, 0)

        def FLOAT(self):
            return self.getToken(BraketPragmasParser.FLOAT, 0)

        def ANGLE(self):
            return self.getToken(BraketPragmasParser.ANGLE, 0)

        def BOOL(self):
            return self.getToken(BraketPragmasParser.BOOL, 0)

        def DURATION(self):
            return self.getToken(BraketPragmasParser.DURATION, 0)

        def STRETCH(self):
            return self.getToken(BraketPragmasParser.STRETCH, 0)

        def COMPLEX(self):
            return self.getToken(BraketPragmasParser.COMPLEX, 0)

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def scalarType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ScalarTypeContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_scalarType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarType" ):
                listener.enterScalarType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarType" ):
                listener.exitScalarType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarType" ):
                return visitor.visitScalarType(self)
            else:
                return visitor.visitChildren(self)




    def scalarType(self):

        localctx = BraketPragmasParser.ScalarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_scalarType)
        self._la = 0 # Token type
        try:
            self.state = 863
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.BIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 833
                self.match(BraketPragmasParser.BIT)
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 834
                    self.designator()


                pass
            elif token in [BraketPragmasParser.INT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 837
                self.match(BraketPragmasParser.INT)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 838
                    self.designator()


                pass
            elif token in [BraketPragmasParser.UINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 841
                self.match(BraketPragmasParser.UINT)
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 842
                    self.designator()


                pass
            elif token in [BraketPragmasParser.FLOAT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 845
                self.match(BraketPragmasParser.FLOAT)
                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 846
                    self.designator()


                pass
            elif token in [BraketPragmasParser.ANGLE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 849
                self.match(BraketPragmasParser.ANGLE)
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 850
                    self.designator()


                pass
            elif token in [BraketPragmasParser.BOOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 853
                self.match(BraketPragmasParser.BOOL)
                pass
            elif token in [BraketPragmasParser.DURATION]:
                self.enterOuterAlt(localctx, 7)
                self.state = 854
                self.match(BraketPragmasParser.DURATION)
                pass
            elif token in [BraketPragmasParser.STRETCH]:
                self.enterOuterAlt(localctx, 8)
                self.state = 855
                self.match(BraketPragmasParser.STRETCH)
                pass
            elif token in [BraketPragmasParser.COMPLEX]:
                self.enterOuterAlt(localctx, 9)
                self.state = 856
                self.match(BraketPragmasParser.COMPLEX)
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 857
                    self.match(BraketPragmasParser.LBRACKET)
                    self.state = 858
                    self.scalarType()
                    self.state = 859
                    self.match(BraketPragmasParser.RBRACKET)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QubitTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUBIT(self):
            return self.getToken(BraketPragmasParser.QUBIT, 0)

        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_qubitType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQubitType" ):
                listener.enterQubitType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQubitType" ):
                listener.exitQubitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQubitType" ):
                return visitor.visitQubitType(self)
            else:
                return visitor.visitChildren(self)




    def qubitType(self):

        localctx = BraketPragmasParser.QubitTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_qubitType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.match(BraketPragmasParser.QUBIT)
            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LBRACKET:
                self.state = 866
                self.designator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(BraketPragmasParser.ARRAY, 0)

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def scalarType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ScalarTypeContext,0)


        def COMMA(self):
            return self.getToken(BraketPragmasParser.COMMA, 0)

        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = BraketPragmasParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.match(BraketPragmasParser.ARRAY)
            self.state = 870
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 871
            self.scalarType()
            self.state = 872
            self.match(BraketPragmasParser.COMMA)
            self.state = 873
            self.expressionList()
            self.state = 874
            self.match(BraketPragmasParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayReferenceTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(BraketPragmasParser.ARRAY, 0)

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def scalarType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ScalarTypeContext,0)


        def COMMA(self):
            return self.getToken(BraketPragmasParser.COMMA, 0)

        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def CONST(self):
            return self.getToken(BraketPragmasParser.CONST, 0)

        def MUTABLE(self):
            return self.getToken(BraketPragmasParser.MUTABLE, 0)

        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def DIM(self):
            return self.getToken(BraketPragmasParser.DIM, 0)

        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_arrayReferenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayReferenceType" ):
                listener.enterArrayReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayReferenceType" ):
                listener.exitArrayReferenceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayReferenceType" ):
                return visitor.visitArrayReferenceType(self)
            else:
                return visitor.visitChildren(self)




    def arrayReferenceType(self):

        localctx = BraketPragmasParser.ArrayReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_arrayReferenceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.CONST or _la==BraketPragmasParser.MUTABLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 877
            self.match(BraketPragmasParser.ARRAY)
            self.state = 878
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 879
            self.scalarType()
            self.state = 880
            self.match(BraketPragmasParser.COMMA)
            self.state = 885
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.BOOL, BraketPragmasParser.BIT, BraketPragmasParser.INT, BraketPragmasParser.UINT, BraketPragmasParser.FLOAT, BraketPragmasParser.ANGLE, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.DURATION, BraketPragmasParser.STRETCH, BraketPragmasParser.DURATIONOF, BraketPragmasParser.BooleanLiteral, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.TILDE, BraketPragmasParser.EXCLAMATION_POINT, BraketPragmasParser.ImaginaryLiteral, BraketPragmasParser.BinaryIntegerLiteral, BraketPragmasParser.OctalIntegerLiteral, BraketPragmasParser.DecimalIntegerLiteral, BraketPragmasParser.HexIntegerLiteral, BraketPragmasParser.Identifier, BraketPragmasParser.HardwareQubit, BraketPragmasParser.FloatLiteral, BraketPragmasParser.TimingLiteral, BraketPragmasParser.BitstringLiteral]:
                self.state = 881
                self.expressionList()
                pass
            elif token in [BraketPragmasParser.DIM]:
                self.state = 882
                self.match(BraketPragmasParser.DIM)
                self.state = 883
                self.match(BraketPragmasParser.EQUALS)
                self.state = 884
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 887
            self.match(BraketPragmasParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignator" ):
                return visitor.visitDesignator(self)
            else:
                return visitor.visitChildren(self)




    def designator(self):

        localctx = BraketPragmasParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_designator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 890
            self.expression(0)
            self.state = 891
            self.match(BraketPragmasParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateOperandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexedIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,0)


        def HardwareQubit(self):
            return self.getToken(BraketPragmasParser.HardwareQubit, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_gateOperand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateOperand" ):
                listener.enterGateOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateOperand" ):
                listener.exitGateOperand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateOperand" ):
                return visitor.visitGateOperand(self)
            else:
                return visitor.visitChildren(self)




    def gateOperand(self):

        localctx = BraketPragmasParser.GateOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_gateOperand)
        try:
            self.state = 895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 893
                self.indexedIdentifier()
                pass
            elif token in [BraketPragmasParser.HardwareQubit]:
                self.enterOuterAlt(localctx, 2)
                self.state = 894
                self.match(BraketPragmasParser.HardwareQubit)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ScalarTypeContext,0)


        def arrayReferenceType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayReferenceTypeContext,0)


        def CREG(self):
            return self.getToken(BraketPragmasParser.CREG, 0)

        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_externArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternArgument" ):
                listener.enterExternArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternArgument" ):
                listener.exitExternArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternArgument" ):
                return visitor.visitExternArgument(self)
            else:
                return visitor.visitChildren(self)




    def externArgument(self):

        localctx = BraketPragmasParser.ExternArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_externArgument)
        self._la = 0 # Token type
        try:
            self.state = 903
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.BOOL, BraketPragmasParser.BIT, BraketPragmasParser.INT, BraketPragmasParser.UINT, BraketPragmasParser.FLOAT, BraketPragmasParser.ANGLE, BraketPragmasParser.COMPLEX, BraketPragmasParser.DURATION, BraketPragmasParser.STRETCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 897
                self.scalarType()
                pass
            elif token in [BraketPragmasParser.CONST, BraketPragmasParser.MUTABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 898
                self.arrayReferenceType()
                pass
            elif token in [BraketPragmasParser.CREG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 899
                self.match(BraketPragmasParser.CREG)
                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 900
                    self.designator()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HardwareQubit(self):
            return self.getToken(BraketPragmasParser.HardwareQubit, 0)

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_defcalArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalArgument" ):
                listener.enterDefcalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalArgument" ):
                listener.exitDefcalArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalArgument" ):
                return visitor.visitDefcalArgument(self)
            else:
                return visitor.visitChildren(self)




    def defcalArgument(self):

        localctx = BraketPragmasParser.DefcalArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_defcalArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.Identifier or _la==BraketPragmasParser.HardwareQubit):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ScalarTypeContext,0)


        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def qubitType(self):
            return self.getTypedRuleContext(BraketPragmasParser.QubitTypeContext,0)


        def CREG(self):
            return self.getToken(BraketPragmasParser.CREG, 0)

        def QREG(self):
            return self.getToken(BraketPragmasParser.QREG, 0)

        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def arrayReferenceType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayReferenceTypeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_argumentDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentDefinition" ):
                listener.enterArgumentDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentDefinition" ):
                listener.exitArgumentDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentDefinition" ):
                return visitor.visitArgumentDefinition(self)
            else:
                return visitor.visitChildren(self)




    def argumentDefinition(self):

        localctx = BraketPragmasParser.ArgumentDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_argumentDefinition)
        self._la = 0 # Token type
        try:
            self.state = 921
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.BOOL, BraketPragmasParser.BIT, BraketPragmasParser.INT, BraketPragmasParser.UINT, BraketPragmasParser.FLOAT, BraketPragmasParser.ANGLE, BraketPragmasParser.COMPLEX, BraketPragmasParser.DURATION, BraketPragmasParser.STRETCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 907
                self.scalarType()
                self.state = 908
                self.match(BraketPragmasParser.Identifier)
                pass
            elif token in [BraketPragmasParser.QUBIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 910
                self.qubitType()
                self.state = 911
                self.match(BraketPragmasParser.Identifier)
                pass
            elif token in [BraketPragmasParser.QREG, BraketPragmasParser.CREG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 913
                _la = self._input.LA(1)
                if not(_la==BraketPragmasParser.QREG or _la==BraketPragmasParser.CREG):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 914
                self.match(BraketPragmasParser.Identifier)
                self.state = 916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 915
                    self.designator()


                pass
            elif token in [BraketPragmasParser.CONST, BraketPragmasParser.MUTABLE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 918
                self.arrayReferenceType()
                self.state = 919
                self.match(BraketPragmasParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentDefinitionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ArgumentDefinitionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ArgumentDefinitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_argumentDefinitionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentDefinitionList" ):
                listener.enterArgumentDefinitionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentDefinitionList" ):
                listener.exitArgumentDefinitionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentDefinitionList" ):
                return visitor.visitArgumentDefinitionList(self)
            else:
                return visitor.visitChildren(self)




    def argumentDefinitionList(self):

        localctx = BraketPragmasParser.ArgumentDefinitionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_argumentDefinitionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.argumentDefinition()
            self.state = 928
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 924
                    self.match(BraketPragmasParser.COMMA)
                    self.state = 925
                    self.argumentDefinition() 
                self.state = 930
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.COMMA:
                self.state = 931
                self.match(BraketPragmasParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = BraketPragmasParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.expression(0)
            self.state = 939
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 935
                    self.match(BraketPragmasParser.COMMA)
                    self.state = 936
                    self.expression(0) 
                self.state = 941
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

            self.state = 943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.COMMA:
                self.state = 942
                self.match(BraketPragmasParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defcalArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.DefcalArgumentContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.DefcalArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_defcalArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalArgumentList" ):
                listener.enterDefcalArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalArgumentList" ):
                listener.exitDefcalArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalArgumentList" ):
                return visitor.visitDefcalArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def defcalArgumentList(self):

        localctx = BraketPragmasParser.DefcalArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_defcalArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.defcalArgument()
            self.state = 950
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 946
                    self.match(BraketPragmasParser.COMMA)
                    self.state = 947
                    self.defcalArgument() 
                self.state = 952
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.COMMA:
                self.state = 953
                self.match(BraketPragmasParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.Identifier)
            else:
                return self.getToken(BraketPragmasParser.Identifier, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = BraketPragmasParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.match(BraketPragmasParser.Identifier)
            self.state = 961
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 957
                    self.match(BraketPragmasParser.COMMA)
                    self.state = 958
                    self.match(BraketPragmasParser.Identifier) 
                self.state = 963
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

            self.state = 965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.COMMA:
                self.state = 964
                self.match(BraketPragmasParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateOperandListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gateOperand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.GateOperandContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.GateOperandContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_gateOperandList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateOperandList" ):
                listener.enterGateOperandList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateOperandList" ):
                listener.exitGateOperandList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateOperandList" ):
                return visitor.visitGateOperandList(self)
            else:
                return visitor.visitChildren(self)




    def gateOperandList(self):

        localctx = BraketPragmasParser.GateOperandListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_gateOperandList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.gateOperand()
            self.state = 972
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 968
                    self.match(BraketPragmasParser.COMMA)
                    self.state = 969
                    self.gateOperand() 
                self.state = 974
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

            self.state = 976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.COMMA:
                self.state = 975
                self.match(BraketPragmasParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExternArgumentContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExternArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_externArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternArgumentList" ):
                listener.enterExternArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternArgumentList" ):
                listener.exitExternArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternArgumentList" ):
                return visitor.visitExternArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def externArgumentList(self):

        localctx = BraketPragmasParser.ExternArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_externArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.externArgument()
            self.state = 983
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 979
                    self.match(BraketPragmasParser.COMMA)
                    self.state = 980
                    self.externArgument() 
                self.state = 985
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.COMMA:
                self.state = 986
                self.match(BraketPragmasParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[61] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 17)
         




