# Generated from BraketPragmas.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u008f")
        buf.write("\u04e6\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u0111\n\3")
        buf.write("\3\4\3\4\3\5\3\5\3\6\3\6\5\6\u0119\n\6\3\7\3\7\3\b\3\b")
        buf.write("\3\b\7\b\u0120\n\b\f\b\16\b\u0123\13\b\3\t\3\t\3\t\3\n")
        buf.write("\3\n\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\5\r\u0134")
        buf.write("\n\r\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u013c\n\16\3\17")
        buf.write("\3\17\5\17\u0140\n\17\3\17\3\17\3\17\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\21\3\21\3\22\3\22\3\23\5\23\u015c")
        buf.write("\n\23\3\23\3\23\3\24\3\24\3\24\7\24\u0163\n\24\f\24\16")
        buf.write("\24\u0166\13\24\3\25\5\25\u0169\n\25\3\25\7\25\u016c\n")
        buf.write("\25\f\25\16\25\u016f\13\25\3\25\7\25\u0172\n\25\f\25\16")
        buf.write("\25\u0175\13\25\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27")
        buf.write("\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\5\32\u018c\n\32\3\33\3\33\3\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\5\33\u0196\n\33\3\34\3\34\3\34\3\35\3\35")
        buf.write("\5\35\u019d\n\35\3\35\3\35\3\36\3\36\3\36\3\36\3\37\3")
        buf.write("\37\5\37\u01a7\n\37\3\37\3\37\3 \3 \3 \3!\3!\3!\3!\3\"")
        buf.write("\3\"\7\"\u01b4\n\"\f\"\16\"\u01b7\13\"\3\"\3\"\3#\3#\3")
        buf.write("#\5#\u01be\n#\3#\3#\5#\u01c2\n#\3#\5#\u01c5\n#\3$\3$\3")
        buf.write("$\5$\u01ca\n$\3$\3$\5$\u01ce\n$\3$\5$\u01d1\n$\3%\3%\3")
        buf.write("%\7%\u01d6\n%\f%\16%\u01d9\13%\3&\3&\3\'\3\'\3(\3(\5(")
        buf.write("\u01e1\n(\3)\3)\3)\3)\3)\3)\5)\u01e9\n)\3)\3)\3)\3)\3")
        buf.write(")\5)\u01f0\n)\3*\3*\3*\3*\3*\3*\3*\3+\3+\3+\3+\5+\u01fd")
        buf.write("\n+\3,\3,\3,\3,\3,\3,\3,\3-\3-\5-\u0208\n-\3.\3.\3.\3")
        buf.write("/\3/\3/\3/\3/\3\60\3\60\3\60\3\60\5\60\u0216\n\60\3\61")
        buf.write("\3\61\3\61\5\61\u021b\n\61\3\62\3\62\3\62\5\62\u0220\n")
        buf.write("\62\3\62\3\62\5\62\u0224\n\62\3\62\5\62\u0227\n\62\3\62")
        buf.write("\5\62\u022a\n\62\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0232")
        buf.write("\n\63\3\64\3\64\3\64\5\64\u0237\n\64\3\64\3\64\3\64\5")
        buf.write("\64\u023c\n\64\7\64\u023e\n\64\f\64\16\64\u0241\13\64")
        buf.write("\3\64\3\64\3\65\3\65\3\65\3\65\3\65\5\65\u024a\n\65\5")
        buf.write("\65\u024c\n\65\3\66\3\66\3\66\3\66\3\66\5\66\u0253\n\66")
        buf.write("\3\67\3\67\3\67\7\67\u0258\n\67\f\67\16\67\u025b\13\67")
        buf.write("\3\67\3\67\38\38\38\38\58\u0263\n8\38\38\38\38\38\58\u026a")
        buf.write("\n8\38\38\58\u026e\n8\38\38\38\38\38\38\38\38\38\38\3")
        buf.write("8\58\u027b\n8\39\39\39\79\u0280\n9\f9\169\u0283\139\3")
        buf.write(":\3:\5:\u0287\n:\3;\3;\3;\7;\u028c\n;\f;\16;\u028f\13")
        buf.write(";\3;\3;\3<\3<\3<\3<\3<\3<\3=\3=\3=\3=\3=\3=\7=\u029f\n")
        buf.write("=\f=\16=\u02a2\13=\3>\5>\u02a5\n>\3>\3>\5>\u02a9\n>\3")
        buf.write(">\3>\5>\u02ad\n>\3?\3?\3?\3?\3@\3@\3@\5@\u02b6\n@\3@\5")
        buf.write("@\u02b9\n@\3@\3@\3A\3A\3B\3B\3B\7B\u02c2\nB\fB\16B\u02c5")
        buf.write("\13B\3B\3B\3C\3C\3C\3D\3D\3D\7D\u02cf\nD\fD\16D\u02d2")
        buf.write("\13D\3D\5D\u02d5\nD\3E\3E\3E\3E\5E\u02db\nE\3F\3F\3F\3")
        buf.write("F\3F\5F\u02e2\nF\3G\7G\u02e5\nG\fG\16G\u02e8\13G\3G\3")
        buf.write("G\3G\3G\3G\3G\3G\7G\u02f1\nG\fG\16G\u02f4\13G\5G\u02f6")
        buf.write("\nG\3H\3H\3H\3I\3I\3I\3J\3J\3J\5J\u0301\nJ\3J\3J\3J\3")
        buf.write("J\5J\u0307\nJ\3K\3K\3K\3K\7K\u030d\nK\fK\16K\u0310\13")
        buf.write("K\5K\u0312\nK\3L\3L\3L\5L\u0317\nL\3L\3L\3M\3M\3M\3M\3")
        buf.write("M\3N\3N\3N\3N\3N\5N\u0325\nN\3O\7O\u0328\nO\fO\16O\u032b")
        buf.write("\13O\3O\3O\3O\3O\3O\5O\u0332\nO\3O\3O\3O\7O\u0337\nO\f")
        buf.write("O\16O\u033a\13O\3P\3P\3Q\3Q\3R\3R\3S\3S\3T\3T\3T\3U\3")
        buf.write("U\3U\3U\5U\u034b\nU\3U\3U\3U\7U\u0350\nU\fU\16U\u0353")
        buf.write("\13U\3V\3V\3V\3V\3V\3V\7V\u035b\nV\fV\16V\u035e\13V\3")
        buf.write("W\3W\3W\3W\3W\3W\7W\u0366\nW\fW\16W\u0369\13W\3X\3X\3")
        buf.write("X\3X\3X\3X\7X\u0371\nX\fX\16X\u0374\13X\3Y\3Y\3Y\3Y\3")
        buf.write("Y\3Y\7Y\u037c\nY\fY\16Y\u037f\13Y\3Z\3Z\3Z\3Z\3Z\3Z\3")
        buf.write("Z\7Z\u0388\nZ\fZ\16Z\u038b\13Z\3[\3[\3[\3[\3[\3[\3[\7")
        buf.write("[\u0394\n[\f[\16[\u0397\13[\3\\\3\\\3\\\3\\\3\\\3\\\7")
        buf.write("\\\u039f\n\\\f\\\16\\\u03a2\13\\\3]\3]\3]\3]\3]\3]\7]")
        buf.write("\u03aa\n]\f]\16]\u03ad\13]\3^\3^\3^\3^\3^\3^\7^\u03b5")
        buf.write("\n^\f^\16^\u03b8\13^\3_\5_\u03bb\n_\3_\3_\3`\3`\3`\3`")
        buf.write("\3`\3`\7`\u03c5\n`\f`\16`\u03c8\13`\3a\3a\3a\3a\5a\u03ce")
        buf.write("\na\3a\3a\3a\5a\u03d3\na\7a\u03d5\na\fa\16a\u03d8\13a")
        buf.write("\5a\u03da\na\3a\3a\3b\3b\3b\3b\3b\7b\u03e3\nb\fb\16b\u03e6")
        buf.write("\13b\3c\3c\7c\u03ea\nc\fc\16c\u03ed\13c\3d\3d\3d\3d\3")
        buf.write("d\3d\3d\3d\3d\3d\3d\3d\3d\3d\5d\u03fd\nd\3e\3e\3f\3f\3")
        buf.write("f\5f\u0404\nf\3f\3f\3f\3f\3g\3g\3h\3h\3i\3i\3i\7i\u0411")
        buf.write("\ni\fi\16i\u0414\13i\3j\3j\3j\3k\3k\3l\3l\3l\3l\7l\u041f")
        buf.write("\nl\fl\16l\u0422\13l\3l\3l\3m\3m\3m\3m\3m\3m\5m\u042c")
        buf.write("\nm\3n\3n\3n\3n\3n\7n\u0433\nn\fn\16n\u0436\13n\3n\5n")
        buf.write("\u0439\nn\3o\3o\3o\3o\3o\3o\3o\5o\u0442\no\3p\3p\3p\3")
        buf.write("p\3p\3p\3p\3p\3p\5p\u044d\np\3q\3q\3q\3r\3r\3r\3s\3s\3")
        buf.write("s\5s\u0458\ns\3s\3s\3t\3t\3t\3t\5t\u0460\nt\3u\3u\3u\3")
        buf.write("u\5u\u0466\nu\3u\3u\5u\u046a\nu\3u\3u\3v\3v\3v\5v\u0471")
        buf.write("\nv\3v\3v\3w\3w\3w\3w\5w\u0479\nw\3w\3w\5w\u047d\nw\3")
        buf.write("w\3w\3x\3x\7x\u0483\nx\fx\16x\u0486\13x\3x\5x\u0489\n")
        buf.write("x\3x\3x\3y\3y\3y\7y\u0490\ny\fy\16y\u0493\13y\3y\3y\3")
        buf.write("z\3z\3{\3{\5{\u049b\n{\3{\3{\3|\3|\3|\3|\3|\5|\u04a4\n")
        buf.write("|\3|\5|\u04a7\n|\3}\3}\3~\3~\3~\5~\u04ae\n~\3~\5~\u04b1")
        buf.write("\n~\3~\3~\3~\3~\7~\u04b7\n~\f~\16~\u04ba\13~\3\177\3\177")
        buf.write("\3\177\3\177\5\177\u04c0\n\177\3\u0080\3\u0080\5\u0080")
        buf.write("\u04c4\n\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0082")
        buf.write("\3\u0082\3\u0082\3\u0082\5\u0082\u04ce\n\u0082\3\u0082")
        buf.write("\5\u0082\u04d1\n\u0082\3\u0082\3\u0082\5\u0082\u04d5\n")
        buf.write("\u0082\3\u0082\3\u0082\7\u0082\u04d9\n\u0082\f\u0082\16")
        buf.write("\u0082\u04dc\13\u0082\3\u0082\3\u0082\3\u0083\3\u0083")
        buf.write("\3\u0084\3\u0084\5\u0084\u04e4\n\u0084\3\u0084\3\u04da")
        buf.write("\17x\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00be\u00c2\u0085\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2")
        buf.write("\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4")
        buf.write("\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6")
        buf.write("\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8")
        buf.write("\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\2\33\3\2_`")
        buf.write("\3\2bd\3\2ei\5\2~~\u0089\u0089\u008b\u008b\4\2\u0089\u0089")
        buf.write("\u008b\u008b\3\2\5\6\3\2\t\n\3\2\13\16\3\2\u0081\u0082")
        buf.write("\4\2\23\24\u008a\u008a\3\2\33\34\4\2\35\36yy\3\2\37\"")
        buf.write("\3\2#$\3\2%&\3\2*+\3\2xy\3\2z|\3\2-.\3\2/:\4\2;Fvv\3\2")
        buf.write("NO\3\2ST\3\2WX\4\2[[\u008d\u008d\2\u0508\2\u0108\3\2\2")
        buf.write("\2\4\u010a\3\2\2\2\6\u0112\3\2\2\2\b\u0114\3\2\2\2\n\u0116")
        buf.write("\3\2\2\2\f\u011a\3\2\2\2\16\u011c\3\2\2\2\20\u0124\3\2")
        buf.write("\2\2\22\u0127\3\2\2\2\24\u0129\3\2\2\2\26\u012d\3\2\2")
        buf.write("\2\30\u0133\3\2\2\2\32\u013b\3\2\2\2\34\u013f\3\2\2\2")
        buf.write("\36\u0144\3\2\2\2 \u0156\3\2\2\2\"\u0158\3\2\2\2$\u015b")
        buf.write("\3\2\2\2&\u015f\3\2\2\2(\u0168\3\2\2\2*\u0176\3\2\2\2")
        buf.write(",\u017a\3\2\2\2.\u017e\3\2\2\2\60\u0180\3\2\2\2\62\u018b")
        buf.write("\3\2\2\2\64\u0195\3\2\2\2\66\u0197\3\2\2\28\u019c\3\2")
        buf.write("\2\2:\u01a0\3\2\2\2<\u01a6\3\2\2\2>\u01aa\3\2\2\2@\u01ad")
        buf.write("\3\2\2\2B\u01b5\3\2\2\2D\u01c4\3\2\2\2F\u01d0\3\2\2\2")
        buf.write("H\u01d2\3\2\2\2J\u01da\3\2\2\2L\u01dc\3\2\2\2N\u01e0\3")
        buf.write("\2\2\2P\u01ef\3\2\2\2R\u01f1\3\2\2\2T\u01fc\3\2\2\2V\u01fe")
        buf.write("\3\2\2\2X\u0207\3\2\2\2Z\u0209\3\2\2\2\\\u020c\3\2\2\2")
        buf.write("^\u0211\3\2\2\2`\u0217\3\2\2\2b\u0226\3\2\2\2d\u022b\3")
        buf.write("\2\2\2f\u0233\3\2\2\2h\u0244\3\2\2\2j\u0252\3\2\2\2l\u0259")
        buf.write("\3\2\2\2n\u027a\3\2\2\2p\u027c\3\2\2\2r\u0286\3\2\2\2")
        buf.write("t\u028d\3\2\2\2v\u0292\3\2\2\2x\u0298\3\2\2\2z\u02a4\3")
        buf.write("\2\2\2|\u02ae\3\2\2\2~\u02b2\3\2\2\2\u0080\u02bc\3\2\2")
        buf.write("\2\u0082\u02be\3\2\2\2\u0084\u02c8\3\2\2\2\u0086\u02d4")
        buf.write("\3\2\2\2\u0088\u02da\3\2\2\2\u008a\u02e1\3\2\2\2\u008c")
        buf.write("\u02e6\3\2\2\2\u008e\u02f7\3\2\2\2\u0090\u02fa\3\2\2\2")
        buf.write("\u0092\u0306\3\2\2\2\u0094\u0308\3\2\2\2\u0096\u0316\3")
        buf.write("\2\2\2\u0098\u031a\3\2\2\2\u009a\u031f\3\2\2\2\u009c\u0329")
        buf.write("\3\2\2\2\u009e\u033b\3\2\2\2\u00a0\u033d\3\2\2\2\u00a2")
        buf.write("\u033f\3\2\2\2\u00a4\u0341\3\2\2\2\u00a6\u0343\3\2\2\2")
        buf.write("\u00a8\u034a\3\2\2\2\u00aa\u0354\3\2\2\2\u00ac\u035f\3")
        buf.write("\2\2\2\u00ae\u036a\3\2\2\2\u00b0\u0375\3\2\2\2\u00b2\u0380")
        buf.write("\3\2\2\2\u00b4\u038c\3\2\2\2\u00b6\u0398\3\2\2\2\u00b8")
        buf.write("\u03a3\3\2\2\2\u00ba\u03ae\3\2\2\2\u00bc\u03ba\3\2\2\2")
        buf.write("\u00be\u03be\3\2\2\2\u00c0\u03c9\3\2\2\2\u00c2\u03dd\3")
        buf.write("\2\2\2\u00c4\u03e7\3\2\2\2\u00c6\u03fc\3\2\2\2\u00c8\u03fe")
        buf.write("\3\2\2\2\u00ca\u0403\3\2\2\2\u00cc\u0409\3\2\2\2\u00ce")
        buf.write("\u040b\3\2\2\2\u00d0\u040d\3\2\2\2\u00d2\u0415\3\2\2\2")
        buf.write("\u00d4\u0418\3\2\2\2\u00d6\u041a\3\2\2\2\u00d8\u042b\3")
        buf.write("\2\2\2\u00da\u0438\3\2\2\2\u00dc\u043a\3\2\2\2\u00de\u044c")
        buf.write("\3\2\2\2\u00e0\u044e\3\2\2\2\u00e2\u0451\3\2\2\2\u00e4")
        buf.write("\u0454\3\2\2\2\u00e6\u045f\3\2\2\2\u00e8\u0461\3\2\2\2")
        buf.write("\u00ea\u046d\3\2\2\2\u00ec\u0474\3\2\2\2\u00ee\u0480\3")
        buf.write("\2\2\2\u00f0\u048c\3\2\2\2\u00f2\u0496\3\2\2\2\u00f4\u0498")
        buf.write("\3\2\2\2\u00f6\u04a6\3\2\2\2\u00f8\u04a8\3\2\2\2\u00fa")
        buf.write("\u04aa\3\2\2\2\u00fc\u04bf\3\2\2\2\u00fe\u04c3\3\2\2\2")
        buf.write("\u0100\u04c5\3\2\2\2\u0102\u04c9\3\2\2\2\u0104\u04df\3")
        buf.write("\2\2\2\u0106\u04e3\3\2\2\2\u0108\u0109\5\4\3\2\u0109\3")
        buf.write("\3\2\2\2\u010a\u010b\7\\\2\2\u010b\u0110\7]\2\2\u010c")
        buf.write("\u0111\5\6\4\2\u010d\u0111\5\n\6\2\u010e\u0111\5\20\t")
        buf.write("\2\u010f\u0111\5\26\f\2\u0110\u010c\3\2\2\2\u0110\u010d")
        buf.write("\3\2\2\2\u0110\u010e\3\2\2\2\u0110\u010f\3\2\2\2\u0111")
        buf.write("\5\3\2\2\2\u0112\u0113\5\b\5\2\u0113\7\3\2\2\2\u0114\u0115")
        buf.write("\7^\2\2\u0115\t\3\2\2\2\u0116\u0118\5\f\7\2\u0117\u0119")
        buf.write("\5\16\b\2\u0118\u0117\3\2\2\2\u0118\u0119\3\2\2\2\u0119")
        buf.write("\13\3\2\2\2\u011a\u011b\t\2\2\2\u011b\r\3\2\2\2\u011c")
        buf.write("\u0121\5\u00c4c\2\u011d\u011e\7u\2\2\u011e\u0120\5\u00c4")
        buf.write("c\2\u011f\u011d\3\2\2\2\u0120\u0123\3\2\2\2\u0121\u011f")
        buf.write("\3\2\2\2\u0121\u0122\3\2\2\2\u0122\17\3\2\2\2\u0123\u0121")
        buf.write("\3\2\2\2\u0124\u0125\5\22\n\2\u0125\u0126\5\24\13\2\u0126")
        buf.write("\21\3\2\2\2\u0127\u0128\7a\2\2\u0128\23\3\2\2\2\u0129")
        buf.write("\u012a\7\u008d\2\2\u012a\u012b\7u\2\2\u012b\u012c\7\u008d")
        buf.write("\2\2\u012c\25\3\2\2\2\u012d\u012e\5 \21\2\u012e\u012f")
        buf.write("\5\30\r\2\u012f\27\3\2\2\2\u0130\u0134\5\32\16\2\u0131")
        buf.write("\u0134\5\34\17\2\u0132\u0134\5\36\20\2\u0133\u0130\3\2")
        buf.write("\2\2\u0133\u0131\3\2\2\2\u0133\u0132\3\2\2\2\u0134\31")
        buf.write("\3\2\2\2\u0135\u013c\5\"\22\2\u0136\u0137\5\"\22\2\u0137")
        buf.write("\u0138\7p\2\2\u0138\u0139\5\u00c4c\2\u0139\u013a\7q\2")
        buf.write("\2\u013a\u013c\3\2\2\2\u013b\u0135\3\2\2\2\u013b\u0136")
        buf.write("\3\2\2\2\u013c\33\3\2\2\2\u013d\u0140\5\32\16\2\u013e")
        buf.write("\u0140\5\36\20\2\u013f\u013d\3\2\2\2\u013f\u013e\3\2\2")
        buf.write("\2\u0140\u0141\3\2\2\2\u0141\u0142\7k\2\2\u0142\u0143")
        buf.write("\5\30\r\2\u0143\35\3\2\2\2\u0144\u0145\7j\2\2\u0145\u0146")
        buf.write("\7p\2\2\u0146\u0147\7l\2\2\u0147\u0148\7l\2\2\u0148\u0149")
        buf.write("\5$\23\2\u0149\u014a\7u\2\2\u014a\u014b\5$\23\2\u014b")
        buf.write("\u014c\7m\2\2\u014c\u014d\7u\2\2\u014d\u014e\7l\2\2\u014e")
        buf.write("\u014f\5$\23\2\u014f\u0150\7u\2\2\u0150\u0151\5$\23\2")
        buf.write("\u0151\u0152\7m\2\2\u0152\u0153\7m\2\2\u0153\u0154\7q")
        buf.write("\2\2\u0154\u0155\5\u00c4c\2\u0155\37\3\2\2\2\u0156\u0157")
        buf.write("\t\3\2\2\u0157!\3\2\2\2\u0158\u0159\t\4\2\2\u0159#\3\2")
        buf.write("\2\2\u015a\u015c\7y\2\2\u015b\u015a\3\2\2\2\u015b\u015c")
        buf.write("\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u015e\t\5\2\2\u015e")
        buf.write("%\3\2\2\2\u015f\u0164\5(\25\2\u0160\u0163\5\62\32\2\u0161")
        buf.write("\u0163\5\64\33\2\u0162\u0160\3\2\2\2\u0162\u0161\3\2\2")
        buf.write("\2\u0163\u0166\3\2\2\2\u0164\u0162\3\2\2\2\u0164\u0165")
        buf.write("\3\2\2\2\u0165\'\3\2\2\2\u0166\u0164\3\2\2\2\u0167\u0169")
        buf.write("\5*\26\2\u0168\u0167\3\2\2\2\u0168\u0169\3\2\2\2\u0169")
        buf.write("\u016d\3\2\2\2\u016a\u016c\5,\27\2\u016b\u016a\3\2\2\2")
        buf.write("\u016c\u016f\3\2\2\2\u016d\u016b\3\2\2\2\u016d\u016e\3")
        buf.write("\2\2\2\u016e\u0173\3\2\2\2\u016f\u016d\3\2\2\2\u0170\u0172")
        buf.write("\5\60\31\2\u0171\u0170\3\2\2\2\u0172\u0175\3\2\2\2\u0173")
        buf.write("\u0171\3\2\2\2\u0173\u0174\3\2\2\2\u0174)\3\2\2\2\u0175")
        buf.write("\u0173\3\2\2\2\u0176\u0177\7\3\2\2\u0177\u0178\t\6\2\2")
        buf.write("\u0178\u0179\7s\2\2\u0179+\3\2\2\2\u017a\u017b\7\4\2\2")
        buf.write("\u017b\u017c\7\u008d\2\2\u017c\u017d\7s\2\2\u017d-\3\2")
        buf.write("\2\2\u017e\u017f\t\7\2\2\u017f/\3\2\2\2\u0180\u0181\5")
        buf.write(".\30\2\u0181\u0182\5X-\2\u0182\u0183\7\u008a\2\2\u0183")
        buf.write("\u0184\7s\2\2\u0184\61\3\2\2\2\u0185\u018c\5\u00ecw\2")
        buf.write("\u0186\u018c\5\u00e8u\2\u0187\u018c\5|?\2\u0188\u018c")
        buf.write("\5\u00fe\u0080\2\u0189\u018c\5\66\34\2\u018a\u018c\5\u00f0")
        buf.write("y\2\u018b\u0185\3\2\2\2\u018b\u0186\3\2\2\2\u018b\u0187")
        buf.write("\3\2\2\2\u018b\u0188\3\2\2\2\u018b\u0189\3\2\2\2\u018b")
        buf.write("\u018a\3\2\2\2\u018c\63\3\2\2\2\u018d\u0196\5\u00a6T\2")
        buf.write("\u018e\u0196\5<\37\2\u018f\u0196\58\35\2\u0190\u0196\5")
        buf.write("\u00dco\2\u0191\u0196\5\u00e0q\2\u0192\u0196\5\u00e2r")
        buf.write("\2\u0193\u0196\5v<\2\u0194\u0196\5\u0088E\2\u0195\u018d")
        buf.write("\3\2\2\2\u0195\u018e\3\2\2\2\u0195\u018f\3\2\2\2\u0195")
        buf.write("\u0190\3\2\2\2\u0195\u0191\3\2\2\2\u0195\u0192\3\2\2\2")
        buf.write("\u0195\u0193\3\2\2\2\u0195\u0194\3\2\2\2\u0196\65\3\2")
        buf.write("\2\2\u0197\u0198\5D#\2\u0198\u0199\7s\2\2\u0199\67\3\2")
        buf.write("\2\2\u019a\u019d\5j\66\2\u019b\u019d\5\\/\2\u019c\u019a")
        buf.write("\3\2\2\2\u019c\u019b\3\2\2\2\u019d\u019e\3\2\2\2\u019e")
        buf.write("\u019f\7s\2\2\u019f9\3\2\2\2\u01a0\u01a1\5\u00c4c\2\u01a1")
        buf.write("\u01a2\5\u00d4k\2\u01a2\u01a3\5\u00a8U\2\u01a3;\3\2\2")
        buf.write("\2\u01a4\u01a7\5:\36\2\u01a5\u01a7\5\u0092J\2\u01a6\u01a4")
        buf.write("\3\2\2\2\u01a6\u01a5\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8")
        buf.write("\u01a9\7s\2\2\u01a9=\3\2\2\2\u01aa\u01ab\7w\2\2\u01ab")
        buf.write("\u01ac\5X-\2\u01ac?\3\2\2\2\u01ad\u01ae\7l\2\2\u01ae\u01af")
        buf.write("\5\u00a8U\2\u01af\u01b0\7m\2\2\u01b0A\3\2\2\2\u01b1\u01b2")
        buf.write("\7\u008a\2\2\u01b2\u01b4\7u\2\2\u01b3\u01b1\3\2\2\2\u01b4")
        buf.write("\u01b7\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b5\u01b6\3\2\2\2")
        buf.write("\u01b6\u01b8\3\2\2\2\u01b7\u01b5\3\2\2\2\u01b8\u01b9\7")
        buf.write("\u008a\2\2\u01b9C\3\2\2\2\u01ba\u01bb\7\7\2\2\u01bb\u01bd")
        buf.write("\7\u008a\2\2\u01bc\u01be\5@!\2\u01bd\u01bc\3\2\2\2\u01bd")
        buf.write("\u01be\3\2\2\2\u01be\u01c5\3\2\2\2\u01bf\u01c1\7\b\2\2")
        buf.write("\u01c0\u01c2\5@!\2\u01c1\u01c0\3\2\2\2\u01c1\u01c2\3\2")
        buf.write("\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c5\7\u008a\2\2\u01c4")
        buf.write("\u01ba\3\2\2\2\u01c4\u01bf\3\2\2\2\u01c5E\3\2\2\2\u01c6")
        buf.write("\u01c7\7\7\2\2\u01c7\u01c9\7\u008a\2\2\u01c8\u01ca\5@")
        buf.write("!\2\u01c9\u01c8\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01d1")
        buf.write("\3\2\2\2\u01cb\u01cd\7\b\2\2\u01cc\u01ce\5@!\2\u01cd\u01cc")
        buf.write("\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf")
        buf.write("\u01d1\7\u008a\2\2\u01d0\u01c6\3\2\2\2\u01d0\u01cb\3\2")
        buf.write("\2\2\u01d1G\3\2\2\2\u01d2\u01d7\5F$\2\u01d3\u01d4\7u\2")
        buf.write("\2\u01d4\u01d6\5F$\2\u01d5\u01d3\3\2\2\2\u01d6\u01d9\3")
        buf.write("\2\2\2\u01d7\u01d5\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8I")
        buf.write("\3\2\2\2\u01d9\u01d7\3\2\2\2\u01da\u01db\t\b\2\2\u01db")
        buf.write("K\3\2\2\2\u01dc\u01dd\t\t\2\2\u01ddM\3\2\2\2\u01de\u01e1")
        buf.write("\7\17\2\2\u01df\u01e1\5\u00f2z\2\u01e0\u01de\3\2\2\2\u01e0")
        buf.write("\u01df\3\2\2\2\u01e1O\3\2\2\2\u01e2\u01e3\5L\'\2\u01e3")
        buf.write("\u01e4\5@!\2\u01e4\u01f0\3\2\2\2\u01e5\u01f0\5N(\2\u01e6")
        buf.write("\u01e8\5J&\2\u01e7\u01e9\5@!\2\u01e8\u01e7\3\2\2\2\u01e8")
        buf.write("\u01e9\3\2\2\2\u01e9\u01f0\3\2\2\2\u01ea\u01eb\7\177\2")
        buf.write("\2\u01eb\u01ec\7l\2\2\u01ec\u01ed\5Z.\2\u01ed\u01ee\7")
        buf.write("m\2\2\u01ee\u01f0\3\2\2\2\u01ef\u01e2\3\2\2\2\u01ef\u01e5")
        buf.write("\3\2\2\2\u01ef\u01e6\3\2\2\2\u01ef\u01ea\3\2\2\2\u01f0")
        buf.write("Q\3\2\2\2\u01f1\u01f2\7\u0083\2\2\u01f2\u01f3\7l\2\2\u01f3")
        buf.write("\u01f4\5P)\2\u01f4\u01f5\7u\2\2\u01f5\u01f6\5\u00d0i\2")
        buf.write("\u01f6\u01f7\7m\2\2\u01f7S\3\2\2\2\u01f8\u01fd\5\u00d0")
        buf.write("i\2\u01f9\u01fa\7\u0085\2\2\u01fa\u01fb\7v\2\2\u01fb\u01fd")
        buf.write("\5\u00a8U\2\u01fc\u01f8\3\2\2\2\u01fc\u01f9\3\2\2\2\u01fd")
        buf.write("U\3\2\2\2\u01fe\u01ff\7\u0083\2\2\u01ff\u0200\7l\2\2\u0200")
        buf.write("\u0201\5P)\2\u0201\u0202\7u\2\2\u0202\u0203\5T+\2\u0203")
        buf.write("\u0204\7m\2\2\u0204W\3\2\2\2\u0205\u0208\5P)\2\u0206\u0208")
        buf.write("\5R*\2\u0207\u0205\3\2\2\2\u0207\u0206\3\2\2\2\u0208Y")
        buf.write("\3\2\2\2\u0209\u020a\5L\'\2\u020a\u020b\5@!\2\u020b[\3")
        buf.write("\2\2\2\u020c\u020d\7\u0081\2\2\u020d\u020e\5X-\2\u020e")
        buf.write("\u020f\7\u008a\2\2\u020f\u0210\5\u00d2j\2\u0210]\3\2\2")
        buf.write("\2\u0211\u0212\5L\'\2\u0212\u0213\5@!\2\u0213\u0215\7")
        buf.write("\u008a\2\2\u0214\u0216\5\u00d2j\2\u0215\u0214\3\2\2\2")
        buf.write("\u0215\u0216\3\2\2\2\u0216_\3\2\2\2\u0217\u0218\5N(\2")
        buf.write("\u0218\u021a\7\u008a\2\2\u0219\u021b\5\u00d2j\2\u021a")
        buf.write("\u0219\3\2\2\2\u021a\u021b\3\2\2\2\u021ba\3\2\2\2\u021c")
        buf.write("\u021d\7\n\2\2\u021d\u021f\7\u008a\2\2\u021e\u0220\5@")
        buf.write("!\2\u021f\u021e\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0227")
        buf.write("\3\2\2\2\u0221\u0223\7\t\2\2\u0222\u0224\5@!\2\u0223\u0222")
        buf.write("\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0225\3\2\2\2\u0225")
        buf.write("\u0227\7\u008a\2\2\u0226\u021c\3\2\2\2\u0226\u0221\3\2")
        buf.write("\2\2\u0227\u0229\3\2\2\2\u0228\u022a\5\u00d2j\2\u0229")
        buf.write("\u0228\3\2\2\2\u0229\u022a\3\2\2\2\u022ac\3\2\2\2\u022b")
        buf.write("\u022c\7\177\2\2\u022c\u022d\7l\2\2\u022d\u022e\5Z.\2")
        buf.write("\u022e\u022f\7m\2\2\u022f\u0231\7\u008a\2\2\u0230\u0232")
        buf.write("\5\u00d2j\2\u0231\u0230\3\2\2\2\u0231\u0232\3\2\2\2\u0232")
        buf.write("e\3\2\2\2\u0233\u0236\7n\2\2\u0234\u0237\5\u00a8U\2\u0235")
        buf.write("\u0237\5f\64\2\u0236\u0234\3\2\2\2\u0236\u0235\3\2\2\2")
        buf.write("\u0237\u023f\3\2\2\2\u0238\u023b\7u\2\2\u0239\u023c\5")
        buf.write("\u00a8U\2\u023a\u023c\5f\64\2\u023b\u0239\3\2\2\2\u023b")
        buf.write("\u023a\3\2\2\2\u023c\u023e\3\2\2\2\u023d\u0238\3\2\2\2")
        buf.write("\u023e\u0241\3\2\2\2\u023f\u023d\3\2\2\2\u023f\u0240\3")
        buf.write("\2\2\2\u0240\u0242\3\2\2\2\u0241\u023f\3\2\2\2\u0242\u0243")
        buf.write("\7o\2\2\u0243g\3\2\2\2\u0244\u0245\5R*\2\u0245\u024b\7")
        buf.write("\u008a\2\2\u0246\u0249\7v\2\2\u0247\u024a\5f\64\2\u0248")
        buf.write("\u024a\5\u00a8U\2\u0249\u0247\3\2\2\2\u0249\u0248\3\2")
        buf.write("\2\2\u024a\u024c\3\2\2\2\u024b\u0246\3\2\2\2\u024b\u024c")
        buf.write("\3\2\2\2\u024ci\3\2\2\2\u024d\u0253\5^\60\2\u024e\u0253")
        buf.write("\5`\61\2\u024f\u0253\5b\62\2\u0250\u0253\5d\63\2\u0251")
        buf.write("\u0253\5h\65\2\u0252\u024d\3\2\2\2\u0252\u024e\3\2\2\2")
        buf.write("\u0252\u024f\3\2\2\2\u0252\u0250\3\2\2\2\u0252\u0251\3")
        buf.write("\2\2\2\u0253k\3\2\2\2\u0254\u0255\5X-\2\u0255\u0256\7")
        buf.write("u\2\2\u0256\u0258\3\2\2\2\u0257\u0254\3\2\2\2\u0258\u025b")
        buf.write("\3\2\2\2\u0259\u0257\3\2\2\2\u0259\u025a\3\2\2\2\u025a")
        buf.write("\u025c\3\2\2\2\u025b\u0259\3\2\2\2\u025c\u025d\5X-\2\u025d")
        buf.write("m\3\2\2\2\u025e\u025f\5L\'\2\u025f\u0260\5@!\2\u0260\u0263")
        buf.write("\3\2\2\2\u0261\u0263\5N(\2\u0262\u025e\3\2\2\2\u0262\u0261")
        buf.write("\3\2\2\2\u0263\u0264\3\2\2\2\u0264\u0265\7\u008a\2\2\u0265")
        buf.write("\u027b\3\2\2\2\u0266\u0267\7\n\2\2\u0267\u0269\7\u008a")
        buf.write("\2\2\u0268\u026a\5@!\2\u0269\u0268\3\2\2\2\u0269\u026a")
        buf.write("\3\2\2\2\u026a\u027b\3\2\2\2\u026b\u026d\7\t\2\2\u026c")
        buf.write("\u026e\5@!\2\u026d\u026c\3\2\2\2\u026d\u026e\3\2\2\2\u026e")
        buf.write("\u026f\3\2\2\2\u026f\u027b\7\u008a\2\2\u0270\u0271\7\177")
        buf.write("\2\2\u0271\u0272\7l\2\2\u0272\u0273\5Z.\2\u0273\u0274")
        buf.write("\7m\2\2\u0274\u0275\7\u008a\2\2\u0275\u027b\3\2\2\2\u0276")
        buf.write("\u0277\t\n\2\2\u0277\u0278\5V,\2\u0278\u0279\7\u008a\2")
        buf.write("\2\u0279\u027b\3\2\2\2\u027a\u0262\3\2\2\2\u027a\u0266")
        buf.write("\3\2\2\2\u027a\u026b\3\2\2\2\u027a\u0270\3\2\2\2\u027a")
        buf.write("\u0276\3\2\2\2\u027bo\3\2\2\2\u027c\u0281\5n8\2\u027d")
        buf.write("\u027e\7u\2\2\u027e\u0280\5n8\2\u027f\u027d\3\2\2\2\u0280")
        buf.write("\u0283\3\2\2\2\u0281\u027f\3\2\2\2\u0281\u0282\3\2\2\2")
        buf.write("\u0282q\3\2\2\2\u0283\u0281\3\2\2\2\u0284\u0287\5n8\2")
        buf.write("\u0285\u0287\5F$\2\u0286\u0284\3\2\2\2\u0286\u0285\3\2")
        buf.write("\2\2\u0287s\3\2\2\2\u0288\u0289\5r:\2\u0289\u028a\7u\2")
        buf.write("\2\u028a\u028c\3\2\2\2\u028b\u0288\3\2\2\2\u028c\u028f")
        buf.write("\3\2\2\2\u028d\u028b\3\2\2\2\u028d\u028e\3\2\2\2\u028e")
        buf.write("\u0290\3\2\2\2\u028f\u028d\3\2\2\2\u0290\u0291\5r:\2\u0291")
        buf.write("u\3\2\2\2\u0292\u0293\7\20\2\2\u0293\u0294\7\u008a\2\2")
        buf.write("\u0294\u0295\7v\2\2\u0295\u0296\5x=\2\u0296\u0297\7s\2")
        buf.write("\2\u0297w\3\2\2\2\u0298\u0299\b=\1\2\u0299\u029a\5\u00a8")
        buf.write("U\2\u029a\u02a0\3\2\2\2\u029b\u029c\f\3\2\2\u029c\u029d")
        buf.write("\7\21\2\2\u029d\u029f\5x=\4\u029e\u029b\3\2\2\2\u029f")
        buf.write("\u02a2\3\2\2\2\u02a0\u029e\3\2\2\2\u02a0\u02a1\3\2\2\2")
        buf.write("\u02a1y\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a3\u02a5\5\u00a8")
        buf.write("U\2\u02a4\u02a3\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5\u02a6")
        buf.write("\3\2\2\2\u02a6\u02a8\7r\2\2\u02a7\u02a9\5\u00a8U\2\u02a8")
        buf.write("\u02a7\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9\u02ac\3\2\2\2")
        buf.write("\u02aa\u02ab\7r\2\2\u02ab\u02ad\5\u00a8U\2\u02ac\u02aa")
        buf.write("\3\2\2\2\u02ac\u02ad\3\2\2\2\u02ad{\3\2\2\2\u02ae\u02af")
        buf.write("\7\22\2\2\u02af\u02b0\5~@\2\u02b0\u02b1\5\u0082B\2\u02b1")
        buf.write("}\3\2\2\2\u02b2\u02b8\5\u0080A\2\u02b3\u02b5\7p\2\2\u02b4")
        buf.write("\u02b6\5B\"\2\u02b5\u02b4\3\2\2\2\u02b5\u02b6\3\2\2\2")
        buf.write("\u02b6\u02b7\3\2\2\2\u02b7\u02b9\7q\2\2\u02b8\u02b3\3")
        buf.write("\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02bb")
        buf.write("\5B\"\2\u02bb\177\3\2\2\2\u02bc\u02bd\t\13\2\2\u02bd\u0081")
        buf.write("\3\2\2\2\u02be\u02c3\7n\2\2\u02bf\u02c2\5\u0088E\2\u02c0")
        buf.write("\u02c2\5\u0084C\2\u02c1\u02bf\3\2\2\2\u02c1\u02c0\3\2")
        buf.write("\2\2\u02c2\u02c5\3\2\2\2\u02c3\u02c1\3\2\2\2\u02c3\u02c4")
        buf.write("\3\2\2\2\u02c4\u02c6\3\2\2\2\u02c5\u02c3\3\2\2\2\u02c6")
        buf.write("\u02c7\7o\2\2\u02c7\u0083\3\2\2\2\u02c8\u02c9\5\u00de")
        buf.write("p\2\u02c9\u02ca\5\u0086D\2\u02ca\u0085\3\2\2\2\u02cb\u02d5")
        buf.write("\5\u0088E\2\u02cc\u02d0\7n\2\2\u02cd\u02cf\5\u0088E\2")
        buf.write("\u02ce\u02cd\3\2\2\2\u02cf\u02d2\3\2\2\2\u02d0\u02ce\3")
        buf.write("\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02d3\3\2\2\2\u02d2\u02d0")
        buf.write("\3\2\2\2\u02d3\u02d5\7o\2\2\u02d4\u02cb\3\2\2\2\u02d4")
        buf.write("\u02cc\3\2\2\2\u02d5\u0087\3\2\2\2\u02d6\u02d7\5\u008a")
        buf.write("F\2\u02d7\u02d8\7s\2\2\u02d8\u02db\3\2\2\2\u02d9\u02db")
        buf.write("\5\u00fc\177\2\u02da\u02d6\3\2\2\2\u02da\u02d9\3\2\2\2")
        buf.write("\u02db\u0089\3\2\2\2\u02dc\u02e2\5\u009cO\2\u02dd\u02e2")
        buf.write("\5\u008cG\2\u02de\u02e2\5\u0090I\2\u02df\u02e2\5\u008e")
        buf.write("H\2\u02e0\u02e2\5\u0094K\2\u02e1\u02dc\3\2\2\2\u02e1\u02dd")
        buf.write("\3\2\2\2\u02e1\u02de\3\2\2\2\u02e1\u02df\3\2\2\2\u02e1")
        buf.write("\u02e0\3\2\2\2\u02e2\u008b\3\2\2\2\u02e3\u02e5\5\u0096")
        buf.write("L\2\u02e4\u02e3\3\2\2\2\u02e5\u02e8\3\2\2\2\u02e6\u02e4")
        buf.write("\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02e9\3\2\2\2\u02e8")
        buf.write("\u02e6\3\2\2\2\u02e9\u02ea\7\25\2\2\u02ea\u02eb\7p\2\2")
        buf.write("\u02eb\u02ec\5\u00a8U\2\u02ec\u02f5\7q\2\2\u02ed\u02f2")
        buf.write("\5\u00c4c\2\u02ee\u02ef\7u\2\2\u02ef\u02f1\5\u00c4c\2")
        buf.write("\u02f0\u02ee\3\2\2\2\u02f1\u02f4\3\2\2\2\u02f2\u02f0\3")
        buf.write("\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02f6\3\2\2\2\u02f4\u02f2")
        buf.write("\3\2\2\2\u02f5\u02ed\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6")
        buf.write("\u008d\3\2\2\2\u02f7\u02f8\7\26\2\2\u02f8\u02f9\5\u00c4")
        buf.write("c\2\u02f9\u008f\3\2\2\2\u02fa\u02fb\7\27\2\2\u02fb\u02fc")
        buf.write("\5\u00c4c\2\u02fc\u0091\3\2\2\2\u02fd\u0300\5\u0090I\2")
        buf.write("\u02fe\u02ff\7w\2\2\u02ff\u0301\5\u00c4c\2\u0300\u02fe")
        buf.write("\3\2\2\2\u0300\u0301\3\2\2\2\u0301\u0307\3\2\2\2\u0302")
        buf.write("\u0303\5\u00c4c\2\u0303\u0304\7v\2\2\u0304\u0305\5\u0090")
        buf.write("I\2\u0305\u0307\3\2\2\2\u0306\u02fd\3\2\2\2\u0306\u0302")
        buf.write("\3\2\2\2\u0307\u0093\3\2\2\2\u0308\u0311\7\30\2\2\u0309")
        buf.write("\u030e\5\u00c4c\2\u030a\u030b\7u\2\2\u030b\u030d\5\u00c4")
        buf.write("c\2\u030c\u030a\3\2\2\2\u030d\u0310\3\2\2\2\u030e\u030c")
        buf.write("\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0312\3\2\2\2\u0310")
        buf.write("\u030e\3\2\2\2\u0311\u0309\3\2\2\2\u0311\u0312\3\2\2\2")
        buf.write("\u0312\u0095\3\2\2\2\u0313\u0317\7\31\2\2\u0314\u0317")
        buf.write("\5\u0098M\2\u0315\u0317\5\u009aN\2\u0316\u0313\3\2\2\2")
        buf.write("\u0316\u0314\3\2\2\2\u0316\u0315\3\2\2\2\u0317\u0318\3")
        buf.write("\2\2\2\u0318\u0319\7k\2\2\u0319\u0097\3\2\2\2\u031a\u031b")
        buf.write("\7\32\2\2\u031b\u031c\7p\2\2\u031c\u031d\5\u00a8U\2\u031d")
        buf.write("\u031e\7q\2\2\u031e\u0099\3\2\2\2\u031f\u0324\t\f\2\2")
        buf.write("\u0320\u0321\7p\2\2\u0321\u0322\5\u00a8U\2\u0322\u0323")
        buf.write("\7q\2\2\u0323\u0325\3\2\2\2\u0324\u0320\3\2\2\2\u0324")
        buf.write("\u0325\3\2\2\2\u0325\u009b\3\2\2\2\u0326\u0328\5\u0096")
        buf.write("L\2\u0327\u0326\3\2\2\2\u0328\u032b\3\2\2\2\u0329\u0327")
        buf.write("\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u032c\3\2\2\2\u032b")
        buf.write("\u0329\3\2\2\2\u032c\u0331\5\u0080A\2\u032d\u032e\7p\2")
        buf.write("\2\u032e\u032f\5\u00d0i\2\u032f\u0330\7q\2\2\u0330\u0332")
        buf.write("\3\2\2\2\u0331\u032d\3\2\2\2\u0331\u0332\3\2\2\2\u0332")
        buf.write("\u0333\3\2\2\2\u0333\u0338\5\u00c4c\2\u0334\u0335\7u\2")
        buf.write("\2\u0335\u0337\5\u00c4c\2\u0336\u0334\3\2\2\2\u0337\u033a")
        buf.write("\3\2\2\2\u0338\u0336\3\2\2\2\u0338\u0339\3\2\2\2\u0339")
        buf.write("\u009d\3\2\2\2\u033a\u0338\3\2\2\2\u033b\u033c\t\r\2\2")
        buf.write("\u033c\u009f\3\2\2\2\u033d\u033e\t\16\2\2\u033e\u00a1")
        buf.write("\3\2\2\2\u033f\u0340\t\17\2\2\u0340\u00a3\3\2\2\2\u0341")
        buf.write("\u0342\t\20\2\2\u0342\u00a5\3\2\2\2\u0343\u0344\5\u00a8")
        buf.write("U\2\u0344\u0345\7s\2\2\u0345\u00a7\3\2\2\2\u0346\u0347")
        buf.write("\bU\1\2\u0347\u034b\5\u00c6d\2\u0348\u034b\5\u00bc_\2")
        buf.write("\u0349\u034b\5\u00aaV\2\u034a\u0346\3\2\2\2\u034a\u0348")
        buf.write("\3\2\2\2\u034a\u0349\3\2\2\2\u034b\u0351\3\2\2\2\u034c")
        buf.write("\u034d\f\3\2\2\u034d\u034e\7&\2\2\u034e\u0350\5\u00aa")
        buf.write("V\2\u034f\u034c\3\2\2\2\u0350\u0353\3\2\2\2\u0351\u034f")
        buf.write("\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u00a9\3\2\2\2\u0353")
        buf.write("\u0351\3\2\2\2\u0354\u0355\bV\1\2\u0355\u0356\5\u00ac")
        buf.write("W\2\u0356\u035c\3\2\2\2\u0357\u0358\f\3\2\2\u0358\u0359")
        buf.write("\7%\2\2\u0359\u035b\5\u00acW\2\u035a\u0357\3\2\2\2\u035b")
        buf.write("\u035e\3\2\2\2\u035c\u035a\3\2\2\2\u035c\u035d\3\2\2\2")
        buf.write("\u035d\u00ab\3\2\2\2\u035e\u035c\3\2\2\2\u035f\u0360\b")
        buf.write("W\1\2\u0360\u0361\5\u00aeX\2\u0361\u0367\3\2\2\2\u0362")
        buf.write("\u0363\f\3\2\2\u0363\u0364\7\'\2\2\u0364\u0366\5\u00ae")
        buf.write("X\2\u0365\u0362\3\2\2\2\u0366\u0369\3\2\2\2\u0367\u0365")
        buf.write("\3\2\2\2\u0367\u0368\3\2\2\2\u0368\u00ad\3\2\2\2\u0369")
        buf.write("\u0367\3\2\2\2\u036a\u036b\bX\1\2\u036b\u036c\5\u00b0")
        buf.write("Y\2\u036c\u0372\3\2\2\2\u036d\u036e\f\3\2\2\u036e\u036f")
        buf.write("\7(\2\2\u036f\u0371\5\u00b0Y\2\u0370\u036d\3\2\2\2\u0371")
        buf.write("\u0374\3\2\2\2\u0372\u0370\3\2\2\2\u0372\u0373\3\2\2\2")
        buf.write("\u0373\u00af\3\2\2\2\u0374\u0372\3\2\2\2\u0375\u0376\b")
        buf.write("Y\1\2\u0376\u0377\5\u00b2Z\2\u0377\u037d\3\2\2\2\u0378")
        buf.write("\u0379\f\3\2\2\u0379\u037a\7)\2\2\u037a\u037c\5\u00b2")
        buf.write("Z\2\u037b\u0378\3\2\2\2\u037c\u037f\3\2\2\2\u037d\u037b")
        buf.write("\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u00b1\3\2\2\2\u037f")
        buf.write("\u037d\3\2\2\2\u0380\u0381\bZ\1\2\u0381\u0382\5\u00b4")
        buf.write("[\2\u0382\u0389\3\2\2\2\u0383\u0384\f\3\2\2\u0384\u0385")
        buf.write("\5\u00a2R\2\u0385\u0386\5\u00b4[\2\u0386\u0388\3\2\2\2")
        buf.write("\u0387\u0383\3\2\2\2\u0388\u038b\3\2\2\2\u0389\u0387\3")
        buf.write("\2\2\2\u0389\u038a\3\2\2\2\u038a\u00b3\3\2\2\2\u038b\u0389")
        buf.write("\3\2\2\2\u038c\u038d\b[\1\2\u038d\u038e\5\u00b6\\\2\u038e")
        buf.write("\u0395\3\2\2\2\u038f\u0390\f\3\2\2\u0390\u0391\5\u00a0")
        buf.write("Q\2\u0391\u0392\5\u00b6\\\2\u0392\u0394\3\2\2\2\u0393")
        buf.write("\u038f\3\2\2\2\u0394\u0397\3\2\2\2\u0395\u0393\3\2\2\2")
        buf.write("\u0395\u0396\3\2\2\2\u0396\u00b5\3\2\2\2\u0397\u0395\3")
        buf.write("\2\2\2\u0398\u0399\b\\\1\2\u0399\u039a\5\u00b8]\2\u039a")
        buf.write("\u03a0\3\2\2\2\u039b\u039c\f\3\2\2\u039c\u039d\t\21\2")
        buf.write("\2\u039d\u039f\5\u00b8]\2\u039e\u039b\3\2\2\2\u039f\u03a2")
        buf.write("\3\2\2\2\u03a0\u039e\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1")
        buf.write("\u00b7\3\2\2\2\u03a2\u03a0\3\2\2\2\u03a3\u03a4\b]\1\2")
        buf.write("\u03a4\u03a5\5\u00ba^\2\u03a5\u03ab\3\2\2\2\u03a6\u03a7")
        buf.write("\f\3\2\2\u03a7\u03a8\t\22\2\2\u03a8\u03aa\5\u00ba^\2\u03a9")
        buf.write("\u03a6\3\2\2\2\u03aa\u03ad\3\2\2\2\u03ab\u03a9\3\2\2\2")
        buf.write("\u03ab\u03ac\3\2\2\2\u03ac\u00b9\3\2\2\2\u03ad\u03ab\3")
        buf.write("\2\2\2\u03ae\u03af\b^\1\2\u03af\u03b0\5\u00bc_\2\u03b0")
        buf.write("\u03b6\3\2\2\2\u03b1\u03b2\f\3\2\2\u03b2\u03b3\t\23\2")
        buf.write("\2\u03b3\u03b5\5\u00bc_\2\u03b4\u03b1\3\2\2\2\u03b5\u03b8")
        buf.write("\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7")
        buf.write("\u00bb\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b9\u03bb\5\u009e")
        buf.write("P\2\u03ba\u03b9\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03bc")
        buf.write("\3\2\2\2\u03bc\u03bd\5\u00be`\2\u03bd\u00bd\3\2\2\2\u03be")
        buf.write("\u03bf\b`\1\2\u03bf\u03c0\5\u00c2b\2\u03c0\u03c6\3\2\2")
        buf.write("\2\u03c1\u03c2\f\3\2\2\u03c2\u03c3\7,\2\2\u03c3\u03c5")
        buf.write("\5\u00c2b\2\u03c4\u03c1\3\2\2\2\u03c5\u03c8\3\2\2\2\u03c6")
        buf.write("\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u00bf\3\2\2\2")
        buf.write("\u03c8\u03c6\3\2\2\2\u03c9\u03d9\7l\2\2\u03ca\u03da\5")
        buf.write("\u00d6l\2\u03cb\u03ce\5\u00a8U\2\u03cc\u03ce\5z>\2\u03cd")
        buf.write("\u03cb\3\2\2\2\u03cd\u03cc\3\2\2\2\u03ce\u03d6\3\2\2\2")
        buf.write("\u03cf\u03d2\7u\2\2\u03d0\u03d3\5\u00a8U\2\u03d1\u03d3")
        buf.write("\5z>\2\u03d2\u03d0\3\2\2\2\u03d2\u03d1\3\2\2\2\u03d3\u03d5")
        buf.write("\3\2\2\2\u03d4\u03cf\3\2\2\2\u03d5\u03d8\3\2\2\2\u03d6")
        buf.write("\u03d4\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03da\3\2\2\2")
        buf.write("\u03d8\u03d6\3\2\2\2\u03d9\u03ca\3\2\2\2\u03d9\u03cd\3")
        buf.write("\2\2\2\u03da\u03db\3\2\2\2\u03db\u03dc\7m\2\2\u03dc\u00c1")
        buf.write("\3\2\2\2\u03dd\u03de\bb\1\2\u03de\u03df\5\u00c6d\2\u03df")
        buf.write("\u03e4\3\2\2\2\u03e0\u03e1\f\3\2\2\u03e1\u03e3\5\u00c0")
        buf.write("a\2\u03e2\u03e0\3\2\2\2\u03e3\u03e6\3\2\2\2\u03e4\u03e2")
        buf.write("\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u00c3\3\2\2\2\u03e6")
        buf.write("\u03e4\3\2\2\2\u03e7\u03eb\7\u008a\2\2\u03e8\u03ea\5\u00c0")
        buf.write("a\2\u03e9\u03e8\3\2\2\2\u03ea\u03ed\3\2\2\2\u03eb\u03e9")
        buf.write("\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec\u00c5\3\2\2\2\u03ed")
        buf.write("\u03eb\3\2\2\2\u03ee\u03fd\7\u0086\2\2\u03ef\u03fd\7\u0089")
        buf.write("\2\2\u03f0\u03fd\7\u008b\2\2\u03f1\u03fd\7~\2\2\u03f2")
        buf.write("\u03fd\5\u00c8e\2\u03f3\u03fd\7\u008a\2\2\u03f4\u03fd")
        buf.write("\7\u008d\2\2\u03f5\u03fd\5\u00caf\2\u03f6\u03fd\5\u00ea")
        buf.write("v\2\u03f7\u03fd\5\u00f6|\2\u03f8\u03f9\7p\2\2\u03f9\u03fa")
        buf.write("\5\u00a8U\2\u03fa\u03fb\7q\2\2\u03fb\u03fd\3\2\2\2\u03fc")
        buf.write("\u03ee\3\2\2\2\u03fc\u03ef\3\2\2\2\u03fc\u03f0\3\2\2\2")
        buf.write("\u03fc\u03f1\3\2\2\2\u03fc\u03f2\3\2\2\2\u03fc\u03f3\3")
        buf.write("\2\2\2\u03fc\u03f4\3\2\2\2\u03fc\u03f5\3\2\2\2\u03fc\u03f6")
        buf.write("\3\2\2\2\u03fc\u03f7\3\2\2\2\u03fc\u03f8\3\2\2\2\u03fd")
        buf.write("\u00c7\3\2\2\2\u03fe\u03ff\t\24\2\2\u03ff\u00c9\3\2\2")
        buf.write("\2\u0400\u0404\5\u00ccg\2\u0401\u0404\5\u00ceh\2\u0402")
        buf.write("\u0404\7\u0084\2\2\u0403\u0400\3\2\2\2\u0403\u0401\3\2")
        buf.write("\2\2\u0403\u0402\3\2\2\2\u0404\u0405\3\2\2\2\u0405\u0406")
        buf.write("\7p\2\2\u0406\u0407\5\u00d0i\2\u0407\u0408\7q\2\2\u0408")
        buf.write("\u00cb\3\2\2\2\u0409\u040a\t\25\2\2\u040a\u00cd\3\2\2")
        buf.write("\2\u040b\u040c\5X-\2\u040c\u00cf\3\2\2\2\u040d\u0412\5")
        buf.write("\u00a8U\2\u040e\u040f\7u\2\2\u040f\u0411\5\u00a8U\2\u0410")
        buf.write("\u040e\3\2\2\2\u0411\u0414\3\2\2\2\u0412\u0410\3\2\2\2")
        buf.write("\u0412\u0413\3\2\2\2\u0413\u00d1\3\2\2\2\u0414\u0412\3")
        buf.write("\2\2\2\u0415\u0416\7v\2\2\u0416\u0417\5\u00a8U\2\u0417")
        buf.write("\u00d3\3\2\2\2\u0418\u0419\t\26\2\2\u0419\u00d5\3\2\2")
        buf.write("\2\u041a\u041b\7n\2\2\u041b\u0420\5\u00a8U\2\u041c\u041d")
        buf.write("\7u\2\2\u041d\u041f\5\u00a8U\2\u041e\u041c\3\2\2\2\u041f")
        buf.write("\u0422\3\2\2\2\u0420\u041e\3\2\2\2\u0420\u0421\3\2\2\2")
        buf.write("\u0421\u0423\3\2\2\2\u0422\u0420\3\2\2\2\u0423\u0424\7")
        buf.write("o\2\2\u0424\u00d7\3\2\2\2\u0425\u042c\5\u00d6l\2\u0426")
        buf.write("\u0427\7l\2\2\u0427\u0428\5z>\2\u0428\u0429\7m\2\2\u0429")
        buf.write("\u042c\3\2\2\2\u042a\u042c\7\u008a\2\2\u042b\u0425\3\2")
        buf.write("\2\2\u042b\u0426\3\2\2\2\u042b\u042a\3\2\2\2\u042c\u00d9")
        buf.write("\3\2\2\2\u042d\u0439\5\64\33\2\u042e\u0439\5\u00e6t\2")
        buf.write("\u042f\u0434\7n\2\2\u0430\u0433\5\64\33\2\u0431\u0433")
        buf.write("\5\u00e6t\2\u0432\u0430\3\2\2\2\u0432\u0431\3\2\2\2\u0433")
        buf.write("\u0436\3\2\2\2\u0434\u0432\3\2\2\2\u0434\u0435\3\2\2\2")
        buf.write("\u0435\u0437\3\2\2\2\u0436\u0434\3\2\2\2\u0437\u0439\7")
        buf.write("o\2\2\u0438\u042d\3\2\2\2\u0438\u042e\3\2\2\2\u0438\u042f")
        buf.write("\3\2\2\2\u0439\u00db\3\2\2\2\u043a\u043b\7G\2\2\u043b")
        buf.write("\u043c\7p\2\2\u043c\u043d\5\u00a8U\2\u043d\u043e\7q\2")
        buf.write("\2\u043e\u0441\5\u00dan\2\u043f\u0440\7H\2\2\u0440\u0442")
        buf.write("\5\u00dan\2\u0441\u043f\3\2\2\2\u0441\u0442\3\2\2\2\u0442")
        buf.write("\u00dd\3\2\2\2\u0443\u0444\7I\2\2\u0444\u0445\7\u008a")
        buf.write("\2\2\u0445\u0446\7J\2\2\u0446\u044d\5\u00d8m\2\u0447\u0448")
        buf.write("\7K\2\2\u0448\u0449\7p\2\2\u0449\u044a\5\u00a8U\2\u044a")
        buf.write("\u044b\7q\2\2\u044b\u044d\3\2\2\2\u044c\u0443\3\2\2\2")
        buf.write("\u044c\u0447\3\2\2\2\u044d\u00df\3\2\2\2\u044e\u044f\5")
        buf.write("\u00dep\2\u044f\u0450\5\u00dan\2\u0450\u00e1\3\2\2\2\u0451")
        buf.write("\u0452\7L\2\2\u0452\u0453\7s\2\2\u0453\u00e3\3\2\2\2\u0454")
        buf.write("\u0457\7M\2\2\u0455\u0458\5\u00a8U\2\u0456\u0458\5\u0090")
        buf.write("I\2\u0457\u0455\3\2\2\2\u0457\u0456\3\2\2\2\u0457\u0458")
        buf.write("\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u045a\7s\2\2\u045a")
        buf.write("\u00e5\3\2\2\2\u045b\u045c\t\27\2\2\u045c\u0460\7s\2\2")
        buf.write("\u045d\u0460\5\u00e2r\2\u045e\u0460\5\u00e4s\2\u045f\u045b")
        buf.write("\3\2\2\2\u045f\u045d\3\2\2\2\u045f\u045e\3\2\2\2\u0460")
        buf.write("\u00e7\3\2\2\2\u0461\u0462\7P\2\2\u0462\u0463\7\u008a")
        buf.write("\2\2\u0463\u0465\7p\2\2\u0464\u0466\5l\67\2\u0465\u0464")
        buf.write("\3\2\2\2\u0465\u0466\3\2\2\2\u0466\u0467\3\2\2\2\u0467")
        buf.write("\u0469\7q\2\2\u0468\u046a\5> \2\u0469\u0468\3\2\2\2\u0469")
        buf.write("\u046a\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u046c\7s\2\2")
        buf.write("\u046c\u00e9\3\2\2\2\u046d\u046e\7\u008a\2\2\u046e\u0470")
        buf.write("\7p\2\2\u046f\u0471\5\u00d0i\2\u0470\u046f\3\2\2\2\u0470")
        buf.write("\u0471\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0473\7q\2\2")
        buf.write("\u0473\u00eb\3\2\2\2\u0474\u0475\7Q\2\2\u0475\u0476\7")
        buf.write("\u008a\2\2\u0476\u0478\7p\2\2\u0477\u0479\5t;\2\u0478")
        buf.write("\u0477\3\2\2\2\u0478\u0479\3\2\2\2\u0479\u047a\3\2\2\2")
        buf.write("\u047a\u047c\7q\2\2\u047b\u047d\5> \2\u047c\u047b\3\2")
        buf.write("\2\2\u047c\u047d\3\2\2\2\u047d\u047e\3\2\2\2\u047e\u047f")
        buf.write("\5\u00eex\2\u047f\u00ed\3\2\2\2\u0480\u0484\7n\2\2\u0481")
        buf.write("\u0483\5\64\33\2\u0482\u0481\3\2\2\2\u0483\u0486\3\2\2")
        buf.write("\2\u0484\u0482\3\2\2\2\u0484\u0485\3\2\2\2\u0485\u0488")
        buf.write("\3\2\2\2\u0486\u0484\3\2\2\2\u0487\u0489\5\u00e4s\2\u0488")
        buf.write("\u0487\3\2\2\2\u0488\u0489\3\2\2\2\u0489\u048a\3\2\2\2")
        buf.write("\u048a\u048b\7o\2\2\u048b\u00ef\3\2\2\2\u048c\u048d\7")
        buf.write("R\2\2\u048d\u0491\7n\2\2\u048e\u0490\5\64\33\2\u048f\u048e")
        buf.write("\3\2\2\2\u0490\u0493\3\2\2\2\u0491\u048f\3\2\2\2\u0491")
        buf.write("\u0492\3\2\2\2\u0492\u0494\3\2\2\2\u0493\u0491\3\2\2\2")
        buf.write("\u0494\u0495\7o\2\2\u0495\u00f1\3\2\2\2\u0496\u0497\t")
        buf.write("\30\2\2\u0497\u00f3\3\2\2\2\u0498\u049a\7U\2\2\u0499\u049b")
        buf.write("\5@!\2\u049a\u0499\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049c")
        buf.write("\3\2\2\2\u049c\u049d\5\u0082B\2\u049d\u00f5\3\2\2\2\u049e")
        buf.write("\u04a7\7\u008c\2\2\u049f\u04a0\7V\2\2\u04a0\u04a3\7p\2")
        buf.write("\2\u04a1\u04a4\7\u008a\2\2\u04a2\u04a4\5\u0082B\2\u04a3")
        buf.write("\u04a1\3\2\2\2\u04a3\u04a2\3\2\2\2\u04a4\u04a5\3\2\2\2")
        buf.write("\u04a5\u04a7\7q\2\2\u04a6\u049e\3\2\2\2\u04a6\u049f\3")
        buf.write("\2\2\2\u04a7\u00f7\3\2\2\2\u04a8\u04a9\t\31\2\2\u04a9")
        buf.write("\u00f9\3\2\2\2\u04aa\u04b0\5\u00f8}\2\u04ab\u04ad\7p\2")
        buf.write("\2\u04ac\u04ae\5\u00d0i\2\u04ad\u04ac\3\2\2\2\u04ad\u04ae")
        buf.write("\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b1\7q\2\2\u04b0")
        buf.write("\u04ab\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\u04b2\3\2\2\2")
        buf.write("\u04b2\u04b3\5@!\2\u04b3\u04b8\5\u00c4c\2\u04b4\u04b5")
        buf.write("\7u\2\2\u04b5\u04b7\5\u00c4c\2\u04b6\u04b4\3\2\2\2\u04b7")
        buf.write("\u04ba\3\2\2\2\u04b8\u04b6\3\2\2\2\u04b8\u04b9\3\2\2\2")
        buf.write("\u04b9\u00fb\3\2\2\2\u04ba\u04b8\3\2\2\2\u04bb\u04bc\5")
        buf.write("\u00fa~\2\u04bc\u04bd\7s\2\2\u04bd\u04c0\3\2\2\2\u04be")
        buf.write("\u04c0\5\u00f4{\2\u04bf\u04bb\3\2\2\2\u04bf\u04be\3\2")
        buf.write("\2\2\u04c0\u00fd\3\2\2\2\u04c1\u04c4\5\u0100\u0081\2\u04c2")
        buf.write("\u04c4\5\u0102\u0082\2\u04c3\u04c1\3\2\2\2\u04c3\u04c2")
        buf.write("\3\2\2\2\u04c4\u00ff\3\2\2\2\u04c5\u04c6\7Y\2\2\u04c6")
        buf.write("\u04c7\5\u0104\u0083\2\u04c7\u04c8\7s\2\2\u04c8\u0101")
        buf.write("\3\2\2\2\u04c9\u04ca\7Z\2\2\u04ca\u04d0\7\u008a\2\2\u04cb")
        buf.write("\u04cd\7p\2\2\u04cc\u04ce\5\u0106\u0084\2\u04cd\u04cc")
        buf.write("\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf")
        buf.write("\u04d1\7q\2\2\u04d0\u04cb\3\2\2\2\u04d0\u04d1\3\2\2\2")
        buf.write("\u04d1\u04d2\3\2\2\2\u04d2\u04d4\5B\"\2\u04d3\u04d5\5")
        buf.write("> \2\u04d4\u04d3\3\2\2\2\u04d4\u04d5\3\2\2\2\u04d5\u04d6")
        buf.write("\3\2\2\2\u04d6\u04da\7n\2\2\u04d7\u04d9\13\2\2\2\u04d8")
        buf.write("\u04d7\3\2\2\2\u04d9\u04dc\3\2\2\2\u04da\u04db\3\2\2\2")
        buf.write("\u04da\u04d8\3\2\2\2\u04db\u04dd\3\2\2\2\u04dc\u04da\3")
        buf.write("\2\2\2\u04dd\u04de\7o\2\2\u04de\u0103\3\2\2\2\u04df\u04e0")
        buf.write("\t\32\2\2\u04e0\u0105\3\2\2\2\u04e1\u04e4\5p9\2\u04e2")
        buf.write("\u04e4\5\u00d0i\2\u04e3\u04e1\3\2\2\2\u04e3\u04e2\3\2")
        buf.write("\2\2\u04e4\u0107\3\2\2\2\u0080\u0110\u0118\u0121\u0133")
        buf.write("\u013b\u013f\u015b\u0162\u0164\u0168\u016d\u0173\u018b")
        buf.write("\u0195\u019c\u01a6\u01b5\u01bd\u01c1\u01c4\u01c9\u01cd")
        buf.write("\u01d0\u01d7\u01e0\u01e8\u01ef\u01fc\u0207\u0215\u021a")
        buf.write("\u021f\u0223\u0226\u0229\u0231\u0236\u023b\u023f\u0249")
        buf.write("\u024b\u0252\u0259\u0262\u0269\u026d\u027a\u0281\u0286")
        buf.write("\u028d\u02a0\u02a4\u02a8\u02ac\u02b5\u02b8\u02c1\u02c3")
        buf.write("\u02d0\u02d4\u02da\u02e1\u02e6\u02f2\u02f5\u0300\u0306")
        buf.write("\u030e\u0311\u0316\u0324\u0329\u0331\u0338\u034a\u0351")
        buf.write("\u035c\u0367\u0372\u037d\u0389\u0395\u03a0\u03ab\u03b6")
        buf.write("\u03ba\u03c6\u03cd\u03d2\u03d6\u03d9\u03e4\u03eb\u03fc")
        buf.write("\u0403\u0412\u0420\u042b\u0432\u0434\u0438\u0441\u044c")
        buf.write("\u0457\u045f\u0465\u0469\u0470\u0478\u047c\u0484\u0488")
        buf.write("\u0491\u049a\u04a3\u04a6\u04ad\u04b0\u04b8\u04bf\u04c3")
        buf.write("\u04cd\u04d0\u04d4\u04da\u04e3")
        return buf.getvalue()


class BraketPragmasParser ( Parser ):

    grammarFileName = "BraketPragmas.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'OPENQASM'", "'include'", "'input'", 
                     "'output'", "'qreg'", "'qubit'", "'bit'", "'creg'", 
                     "'int'", "'uint'", "'float'", "'angle'", "'bool'", 
                     "'let'", "'++'", "'gate'", "'U'", "'CX'", "'gphase'", 
                     "'reset'", "'measure'", "'barrier'", "'inv'", "'pow'", 
                     "'ctrl'", "'negctrl'", "'~'", "'!'", "'>'", "'<'", 
                     "'>='", "'<='", "'=='", "'!='", "'&&'", "'||'", "'|'", 
                     "'^'", "'&'", "'<<'", "'>>'", "'**'", "'true'", "'false'", 
                     "'arcsin'", "'sin'", "'arccos'", "'cos'", "'arctan'", 
                     "'tan'", "'exp'", "'ln'", "'sqrt'", "'rotl'", "'rotr'", 
                     "'popcount'", "'+='", "'-='", "'*='", "'/='", "'&='", 
                     "'|='", "'~='", "'^='", "'<<='", "'>>='", "'%='", "'**='", 
                     "'if'", "'else'", "'for'", "'in'", "'while'", "'end'", 
                     "'return'", "'break'", "'continue'", "'extern'", "'def'", 
                     "'#pragma'", "'duration'", "'stretch'", "'box'", "'durationof'", 
                     "'delay'", "'rotary'", "'defcalgrammar'", "'defcal'", 
                     "'\"openpulse\"'", "'braket'", "'result'", "'state_vector'", 
                     "'probability'", "'density_matrix'", "'amplitude'", 
                     "'expectation'", "'variance'", "'sample'", "'x'", "'y'", 
                     "'z'", "'i'", "'h'", "'hermitian'", "'@'", "'['", "']'", 
                     "'{'", "'}'", "'('", "')'", "':'", "';'", "'.'", "','", 
                     "'='", "'->'", "'+'", "'-'", "'*'", "'/'", "'%'", "'im'", 
                     "<INVALID>", "'complex'", "'#'", "'const'", "'mutable'", 
                     "'array'", "'sizeof'", "'#dim'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "BRAKET", "RESULT", "STATE_VECTOR", 
                      "PROBABILITY", "DENSITY_MATRIX", "AMPLITUDE", "EXPECTATION", 
                      "VARIANCE", "SAMPLE", "X", "Y", "Z", "I", "H", "HERMITIAN", 
                      "AT", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", 
                      "LPAREN", "RPAREN", "COLON", "SEMICOLON", "DOT", "COMMA", 
                      "EQUALS", "ARROW", "PLUS", "MINUS", "MUL", "DIV", 
                      "MOD", "IMAG", "ImagNumber", "COMPLEX", "HASH", "CONST", 
                      "MUTABLE", "ARRAY", "SIZEOF", "DIM", "Constant", "Whitespace", 
                      "Newline", "Integer", "Identifier", "RealNumber", 
                      "TimingLiteral", "StringLiteral", "LineComment", "BlockComment" ]

    RULE_braketPragma = 0
    RULE_braketResultPragma = 1
    RULE_noArgResultType = 2
    RULE_noArgResultTypeName = 3
    RULE_optionalMultiTargetResultType = 4
    RULE_optionalMultiTargetResultTypeName = 5
    RULE_multiTarget = 6
    RULE_multiStateResultType = 7
    RULE_multiStateResultTypeName = 8
    RULE_multiState = 9
    RULE_observableResultType = 10
    RULE_observable = 11
    RULE_standardObservable = 12
    RULE_tensorProductObservable = 13
    RULE_hermitianObservable = 14
    RULE_observableResultTypeName = 15
    RULE_standardObservableName = 16
    RULE_complex = 17
    RULE_program = 18
    RULE_header = 19
    RULE_version = 20
    RULE_include = 21
    RULE_ioIdentifier = 22
    RULE_io = 23
    RULE_globalStatement = 24
    RULE_statement = 25
    RULE_quantumDeclarationStatement = 26
    RULE_classicalDeclarationStatement = 27
    RULE_classicalAssignment = 28
    RULE_assignmentStatement = 29
    RULE_returnSignature = 30
    RULE_designator = 31
    RULE_identifierList = 32
    RULE_quantumDeclaration = 33
    RULE_quantumArgument = 34
    RULE_quantumArgumentList = 35
    RULE_bitType = 36
    RULE_singleDesignatorType = 37
    RULE_noDesignatorType = 38
    RULE_nonArrayType = 39
    RULE_arrayType = 40
    RULE_arrayReferenceTypeDimensionSpecifier = 41
    RULE_arrayReferenceType = 42
    RULE_classicalType = 43
    RULE_numericType = 44
    RULE_constantDeclaration = 45
    RULE_singleDesignatorDeclaration = 46
    RULE_noDesignatorDeclaration = 47
    RULE_bitDeclaration = 48
    RULE_complexDeclaration = 49
    RULE_arrayInitializer = 50
    RULE_arrayDeclaration = 51
    RULE_classicalDeclaration = 52
    RULE_classicalTypeList = 53
    RULE_classicalArgument = 54
    RULE_classicalArgumentList = 55
    RULE_anyTypeArgument = 56
    RULE_anyTypeArgumentList = 57
    RULE_aliasStatement = 58
    RULE_aliasInitializer = 59
    RULE_rangeDefinition = 60
    RULE_quantumGateDefinition = 61
    RULE_quantumGateSignature = 62
    RULE_quantumGateName = 63
    RULE_quantumBlock = 64
    RULE_quantumLoop = 65
    RULE_quantumLoopBlock = 66
    RULE_quantumStatement = 67
    RULE_quantumInstruction = 68
    RULE_quantumPhase = 69
    RULE_quantumReset = 70
    RULE_quantumMeasurement = 71
    RULE_quantumMeasurementAssignment = 72
    RULE_quantumBarrier = 73
    RULE_quantumGateModifier = 74
    RULE_powModifier = 75
    RULE_ctrlModifier = 76
    RULE_quantumGateCall = 77
    RULE_unaryOperator = 78
    RULE_comparisonOperator = 79
    RULE_equalityOperator = 80
    RULE_logicalOperator = 81
    RULE_expressionStatement = 82
    RULE_expression = 83
    RULE_logicalAndExpression = 84
    RULE_bitOrExpression = 85
    RULE_xOrExpression = 86
    RULE_bitAndExpression = 87
    RULE_equalityExpression = 88
    RULE_comparisonExpression = 89
    RULE_bitShiftExpression = 90
    RULE_additiveExpression = 91
    RULE_multiplicativeExpression = 92
    RULE_unaryExpression = 93
    RULE_powerExpression = 94
    RULE_indexOperator = 95
    RULE_indexExpression = 96
    RULE_indexedIdentifier = 97
    RULE_expressionTerminator = 98
    RULE_booleanLiteral = 99
    RULE_builtInCall = 100
    RULE_builtInMath = 101
    RULE_castOperator = 102
    RULE_expressionList = 103
    RULE_equalsExpression = 104
    RULE_assignmentOperator = 105
    RULE_discreteSet = 106
    RULE_setDeclaration = 107
    RULE_programBlock = 108
    RULE_branchingStatement = 109
    RULE_loopSignature = 110
    RULE_loopStatement = 111
    RULE_endStatement = 112
    RULE_returnStatement = 113
    RULE_controlDirective = 114
    RULE_externDeclaration = 115
    RULE_externOrSubroutineCall = 116
    RULE_subroutineDefinition = 117
    RULE_subroutineBlock = 118
    RULE_pragma = 119
    RULE_timingType = 120
    RULE_timingBox = 121
    RULE_timingIdentifier = 122
    RULE_timingInstructionName = 123
    RULE_timingInstruction = 124
    RULE_timingStatement = 125
    RULE_calibration = 126
    RULE_calibrationGrammarDeclaration = 127
    RULE_calibrationDefinition = 128
    RULE_calibrationGrammar = 129
    RULE_calibrationArgumentList = 130

    ruleNames =  [ "braketPragma", "braketResultPragma", "noArgResultType", 
                   "noArgResultTypeName", "optionalMultiTargetResultType", 
                   "optionalMultiTargetResultTypeName", "multiTarget", "multiStateResultType", 
                   "multiStateResultTypeName", "multiState", "observableResultType", 
                   "observable", "standardObservable", "tensorProductObservable", 
                   "hermitianObservable", "observableResultTypeName", "standardObservableName", 
                   "complex", "program", "header", "version", "include", 
                   "ioIdentifier", "io", "globalStatement", "statement", 
                   "quantumDeclarationStatement", "classicalDeclarationStatement", 
                   "classicalAssignment", "assignmentStatement", "returnSignature", 
                   "designator", "identifierList", "quantumDeclaration", 
                   "quantumArgument", "quantumArgumentList", "bitType", 
                   "singleDesignatorType", "noDesignatorType", "nonArrayType", 
                   "arrayType", "arrayReferenceTypeDimensionSpecifier", 
                   "arrayReferenceType", "classicalType", "numericType", 
                   "constantDeclaration", "singleDesignatorDeclaration", 
                   "noDesignatorDeclaration", "bitDeclaration", "complexDeclaration", 
                   "arrayInitializer", "arrayDeclaration", "classicalDeclaration", 
                   "classicalTypeList", "classicalArgument", "classicalArgumentList", 
                   "anyTypeArgument", "anyTypeArgumentList", "aliasStatement", 
                   "aliasInitializer", "rangeDefinition", "quantumGateDefinition", 
                   "quantumGateSignature", "quantumGateName", "quantumBlock", 
                   "quantumLoop", "quantumLoopBlock", "quantumStatement", 
                   "quantumInstruction", "quantumPhase", "quantumReset", 
                   "quantumMeasurement", "quantumMeasurementAssignment", 
                   "quantumBarrier", "quantumGateModifier", "powModifier", 
                   "ctrlModifier", "quantumGateCall", "unaryOperator", "comparisonOperator", 
                   "equalityOperator", "logicalOperator", "expressionStatement", 
                   "expression", "logicalAndExpression", "bitOrExpression", 
                   "xOrExpression", "bitAndExpression", "equalityExpression", 
                   "comparisonExpression", "bitShiftExpression", "additiveExpression", 
                   "multiplicativeExpression", "unaryExpression", "powerExpression", 
                   "indexOperator", "indexExpression", "indexedIdentifier", 
                   "expressionTerminator", "booleanLiteral", "builtInCall", 
                   "builtInMath", "castOperator", "expressionList", "equalsExpression", 
                   "assignmentOperator", "discreteSet", "setDeclaration", 
                   "programBlock", "branchingStatement", "loopSignature", 
                   "loopStatement", "endStatement", "returnStatement", "controlDirective", 
                   "externDeclaration", "externOrSubroutineCall", "subroutineDefinition", 
                   "subroutineBlock", "pragma", "timingType", "timingBox", 
                   "timingIdentifier", "timingInstructionName", "timingInstruction", 
                   "timingStatement", "calibration", "calibrationGrammarDeclaration", 
                   "calibrationDefinition", "calibrationGrammar", "calibrationArgumentList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    BRAKET=90
    RESULT=91
    STATE_VECTOR=92
    PROBABILITY=93
    DENSITY_MATRIX=94
    AMPLITUDE=95
    EXPECTATION=96
    VARIANCE=97
    SAMPLE=98
    X=99
    Y=100
    Z=101
    I=102
    H=103
    HERMITIAN=104
    AT=105
    LBRACKET=106
    RBRACKET=107
    LBRACE=108
    RBRACE=109
    LPAREN=110
    RPAREN=111
    COLON=112
    SEMICOLON=113
    DOT=114
    COMMA=115
    EQUALS=116
    ARROW=117
    PLUS=118
    MINUS=119
    MUL=120
    DIV=121
    MOD=122
    IMAG=123
    ImagNumber=124
    COMPLEX=125
    HASH=126
    CONST=127
    MUTABLE=128
    ARRAY=129
    SIZEOF=130
    DIM=131
    Constant=132
    Whitespace=133
    Newline=134
    Integer=135
    Identifier=136
    RealNumber=137
    TimingLiteral=138
    StringLiteral=139
    LineComment=140
    BlockComment=141

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class BraketPragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def braketResultPragma(self):
            return self.getTypedRuleContext(BraketPragmasParser.BraketResultPragmaContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_braketPragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraketPragma" ):
                listener.enterBraketPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraketPragma" ):
                listener.exitBraketPragma(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBraketPragma" ):
                return visitor.visitBraketPragma(self)
            else:
                return visitor.visitChildren(self)




    def braketPragma(self):

        localctx = BraketPragmasParser.BraketPragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_braketPragma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.braketResultPragma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BraketResultPragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRAKET(self):
            return self.getToken(BraketPragmasParser.BRAKET, 0)

        def RESULT(self):
            return self.getToken(BraketPragmasParser.RESULT, 0)

        def noArgResultType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NoArgResultTypeContext,0)


        def optionalMultiTargetResultType(self):
            return self.getTypedRuleContext(BraketPragmasParser.OptionalMultiTargetResultTypeContext,0)


        def multiStateResultType(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiStateResultTypeContext,0)


        def observableResultType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ObservableResultTypeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_braketResultPragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraketResultPragma" ):
                listener.enterBraketResultPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraketResultPragma" ):
                listener.exitBraketResultPragma(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBraketResultPragma" ):
                return visitor.visitBraketResultPragma(self)
            else:
                return visitor.visitChildren(self)




    def braketResultPragma(self):

        localctx = BraketPragmasParser.BraketResultPragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_braketResultPragma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.match(BraketPragmasParser.BRAKET)
            self.state = 265
            self.match(BraketPragmasParser.RESULT)
            self.state = 270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.STATE_VECTOR]:
                self.state = 266
                self.noArgResultType()
                pass
            elif token in [BraketPragmasParser.PROBABILITY, BraketPragmasParser.DENSITY_MATRIX]:
                self.state = 267
                self.optionalMultiTargetResultType()
                pass
            elif token in [BraketPragmasParser.AMPLITUDE]:
                self.state = 268
                self.multiStateResultType()
                pass
            elif token in [BraketPragmasParser.EXPECTATION, BraketPragmasParser.VARIANCE, BraketPragmasParser.SAMPLE]:
                self.state = 269
                self.observableResultType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoArgResultTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noArgResultTypeName(self):
            return self.getTypedRuleContext(BraketPragmasParser.NoArgResultTypeNameContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_noArgResultType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoArgResultType" ):
                listener.enterNoArgResultType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoArgResultType" ):
                listener.exitNoArgResultType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoArgResultType" ):
                return visitor.visitNoArgResultType(self)
            else:
                return visitor.visitChildren(self)




    def noArgResultType(self):

        localctx = BraketPragmasParser.NoArgResultTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_noArgResultType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.noArgResultTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoArgResultTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATE_VECTOR(self):
            return self.getToken(BraketPragmasParser.STATE_VECTOR, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_noArgResultTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoArgResultTypeName" ):
                listener.enterNoArgResultTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoArgResultTypeName" ):
                listener.exitNoArgResultTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoArgResultTypeName" ):
                return visitor.visitNoArgResultTypeName(self)
            else:
                return visitor.visitChildren(self)




    def noArgResultTypeName(self):

        localctx = BraketPragmasParser.NoArgResultTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_noArgResultTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.match(BraketPragmasParser.STATE_VECTOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalMultiTargetResultTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionalMultiTargetResultTypeName(self):
            return self.getTypedRuleContext(BraketPragmasParser.OptionalMultiTargetResultTypeNameContext,0)


        def multiTarget(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiTargetContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_optionalMultiTargetResultType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalMultiTargetResultType" ):
                listener.enterOptionalMultiTargetResultType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalMultiTargetResultType" ):
                listener.exitOptionalMultiTargetResultType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalMultiTargetResultType" ):
                return visitor.visitOptionalMultiTargetResultType(self)
            else:
                return visitor.visitChildren(self)




    def optionalMultiTargetResultType(self):

        localctx = BraketPragmasParser.OptionalMultiTargetResultTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_optionalMultiTargetResultType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.optionalMultiTargetResultTypeName()
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.Identifier:
                self.state = 277
                self.multiTarget()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalMultiTargetResultTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROBABILITY(self):
            return self.getToken(BraketPragmasParser.PROBABILITY, 0)

        def DENSITY_MATRIX(self):
            return self.getToken(BraketPragmasParser.DENSITY_MATRIX, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_optionalMultiTargetResultTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalMultiTargetResultTypeName" ):
                listener.enterOptionalMultiTargetResultTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalMultiTargetResultTypeName" ):
                listener.exitOptionalMultiTargetResultTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalMultiTargetResultTypeName" ):
                return visitor.visitOptionalMultiTargetResultTypeName(self)
            else:
                return visitor.visitChildren(self)




    def optionalMultiTargetResultTypeName(self):

        localctx = BraketPragmasParser.OptionalMultiTargetResultTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_optionalMultiTargetResultTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.PROBABILITY or _la==BraketPragmasParser.DENSITY_MATRIX):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiTargetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IndexedIdentifierContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_multiTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiTarget" ):
                listener.enterMultiTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiTarget" ):
                listener.exitMultiTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiTarget" ):
                return visitor.visitMultiTarget(self)
            else:
                return visitor.visitChildren(self)




    def multiTarget(self):

        localctx = BraketPragmasParser.MultiTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_multiTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.indexedIdentifier()
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 283
                self.match(BraketPragmasParser.COMMA)
                self.state = 284
                self.indexedIdentifier()
                self.state = 289
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiStateResultTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiStateResultTypeName(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiStateResultTypeNameContext,0)


        def multiState(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiStateContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_multiStateResultType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiStateResultType" ):
                listener.enterMultiStateResultType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiStateResultType" ):
                listener.exitMultiStateResultType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiStateResultType" ):
                return visitor.visitMultiStateResultType(self)
            else:
                return visitor.visitChildren(self)




    def multiStateResultType(self):

        localctx = BraketPragmasParser.MultiStateResultTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_multiStateResultType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.multiStateResultTypeName()
            self.state = 291
            self.multiState()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiStateResultTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPLITUDE(self):
            return self.getToken(BraketPragmasParser.AMPLITUDE, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_multiStateResultTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiStateResultTypeName" ):
                listener.enterMultiStateResultTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiStateResultTypeName" ):
                listener.exitMultiStateResultTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiStateResultTypeName" ):
                return visitor.visitMultiStateResultTypeName(self)
            else:
                return visitor.visitChildren(self)




    def multiStateResultTypeName(self):

        localctx = BraketPragmasParser.MultiStateResultTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_multiStateResultTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.match(BraketPragmasParser.AMPLITUDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiStateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.StringLiteral)
            else:
                return self.getToken(BraketPragmasParser.StringLiteral, i)

        def COMMA(self):
            return self.getToken(BraketPragmasParser.COMMA, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_multiState

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiState" ):
                listener.enterMultiState(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiState" ):
                listener.exitMultiState(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiState" ):
                return visitor.visitMultiState(self)
            else:
                return visitor.visitChildren(self)




    def multiState(self):

        localctx = BraketPragmasParser.MultiStateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_multiState)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self.match(BraketPragmasParser.StringLiteral)

            self.state = 296
            self.match(BraketPragmasParser.COMMA)
            self.state = 297
            self.match(BraketPragmasParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservableResultTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observableResultTypeName(self):
            return self.getTypedRuleContext(BraketPragmasParser.ObservableResultTypeNameContext,0)


        def observable(self):
            return self.getTypedRuleContext(BraketPragmasParser.ObservableContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_observableResultType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObservableResultType" ):
                listener.enterObservableResultType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObservableResultType" ):
                listener.exitObservableResultType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObservableResultType" ):
                return visitor.visitObservableResultType(self)
            else:
                return visitor.visitChildren(self)




    def observableResultType(self):

        localctx = BraketPragmasParser.ObservableResultTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_observableResultType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.observableResultTypeName()
            self.state = 300
            self.observable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def standardObservable(self):
            return self.getTypedRuleContext(BraketPragmasParser.StandardObservableContext,0)


        def tensorProductObservable(self):
            return self.getTypedRuleContext(BraketPragmasParser.TensorProductObservableContext,0)


        def hermitianObservable(self):
            return self.getTypedRuleContext(BraketPragmasParser.HermitianObservableContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_observable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObservable" ):
                listener.enterObservable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObservable" ):
                listener.exitObservable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObservable" ):
                return visitor.visitObservable(self)
            else:
                return visitor.visitChildren(self)




    def observable(self):

        localctx = BraketPragmasParser.ObservableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_observable)
        try:
            self.state = 305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 302
                self.standardObservable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 303
                self.tensorProductObservable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 304
                self.hermitianObservable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandardObservableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def standardObservableName(self):
            return self.getTypedRuleContext(BraketPragmasParser.StandardObservableNameContext,0)


        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def indexedIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_standardObservable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandardObservable" ):
                listener.enterStandardObservable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandardObservable" ):
                listener.exitStandardObservable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandardObservable" ):
                return visitor.visitStandardObservable(self)
            else:
                return visitor.visitChildren(self)




    def standardObservable(self):

        localctx = BraketPragmasParser.StandardObservableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_standardObservable)
        try:
            self.state = 313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 307
                self.standardObservableName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 308
                self.standardObservableName()
                self.state = 309
                self.match(BraketPragmasParser.LPAREN)
                self.state = 310
                self.indexedIdentifier()
                self.state = 311
                self.match(BraketPragmasParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TensorProductObservableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(BraketPragmasParser.AT, 0)

        def observable(self):
            return self.getTypedRuleContext(BraketPragmasParser.ObservableContext,0)


        def standardObservable(self):
            return self.getTypedRuleContext(BraketPragmasParser.StandardObservableContext,0)


        def hermitianObservable(self):
            return self.getTypedRuleContext(BraketPragmasParser.HermitianObservableContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_tensorProductObservable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTensorProductObservable" ):
                listener.enterTensorProductObservable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTensorProductObservable" ):
                listener.exitTensorProductObservable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTensorProductObservable" ):
                return visitor.visitTensorProductObservable(self)
            else:
                return visitor.visitChildren(self)




    def tensorProductObservable(self):

        localctx = BraketPragmasParser.TensorProductObservableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_tensorProductObservable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.X, BraketPragmasParser.Y, BraketPragmasParser.Z, BraketPragmasParser.I, BraketPragmasParser.H]:
                self.state = 315
                self.standardObservable()
                pass
            elif token in [BraketPragmasParser.HERMITIAN]:
                self.state = 316
                self.hermitianObservable()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 319
            self.match(BraketPragmasParser.AT)
            self.state = 320
            self.observable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HermitianObservableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HERMITIAN(self):
            return self.getToken(BraketPragmasParser.HERMITIAN, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def LBRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.LBRACKET)
            else:
                return self.getToken(BraketPragmasParser.LBRACKET, i)

        def complex(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ComplexContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ComplexContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def RBRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.RBRACKET)
            else:
                return self.getToken(BraketPragmasParser.RBRACKET, i)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def indexedIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_hermitianObservable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHermitianObservable" ):
                listener.enterHermitianObservable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHermitianObservable" ):
                listener.exitHermitianObservable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHermitianObservable" ):
                return visitor.visitHermitianObservable(self)
            else:
                return visitor.visitChildren(self)




    def hermitianObservable(self):

        localctx = BraketPragmasParser.HermitianObservableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_hermitianObservable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(BraketPragmasParser.HERMITIAN)
            self.state = 323
            self.match(BraketPragmasParser.LPAREN)
            self.state = 324
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 325
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 326
            self.complex()
            self.state = 327
            self.match(BraketPragmasParser.COMMA)
            self.state = 328
            self.complex()
            self.state = 329
            self.match(BraketPragmasParser.RBRACKET)
            self.state = 330
            self.match(BraketPragmasParser.COMMA)
            self.state = 331
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 332
            self.complex()
            self.state = 333
            self.match(BraketPragmasParser.COMMA)
            self.state = 334
            self.complex()
            self.state = 335
            self.match(BraketPragmasParser.RBRACKET)
            self.state = 336
            self.match(BraketPragmasParser.RBRACKET)
            self.state = 337
            self.match(BraketPragmasParser.RPAREN)
            self.state = 338
            self.indexedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservableResultTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPECTATION(self):
            return self.getToken(BraketPragmasParser.EXPECTATION, 0)

        def VARIANCE(self):
            return self.getToken(BraketPragmasParser.VARIANCE, 0)

        def SAMPLE(self):
            return self.getToken(BraketPragmasParser.SAMPLE, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_observableResultTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObservableResultTypeName" ):
                listener.enterObservableResultTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObservableResultTypeName" ):
                listener.exitObservableResultTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObservableResultTypeName" ):
                return visitor.visitObservableResultTypeName(self)
            else:
                return visitor.visitChildren(self)




    def observableResultTypeName(self):

        localctx = BraketPragmasParser.ObservableResultTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_observableResultTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            _la = self._input.LA(1)
            if not(((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (BraketPragmasParser.EXPECTATION - 96)) | (1 << (BraketPragmasParser.VARIANCE - 96)) | (1 << (BraketPragmasParser.SAMPLE - 96)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandardObservableNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def X(self):
            return self.getToken(BraketPragmasParser.X, 0)

        def Y(self):
            return self.getToken(BraketPragmasParser.Y, 0)

        def Z(self):
            return self.getToken(BraketPragmasParser.Z, 0)

        def I(self):
            return self.getToken(BraketPragmasParser.I, 0)

        def H(self):
            return self.getToken(BraketPragmasParser.H, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_standardObservableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandardObservableName" ):
                listener.enterStandardObservableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandardObservableName" ):
                listener.exitStandardObservableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandardObservableName" ):
                return visitor.visitStandardObservableName(self)
            else:
                return visitor.visitChildren(self)




    def standardObservableName(self):

        localctx = BraketPragmasParser.StandardObservableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_standardObservableName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            _la = self._input.LA(1)
            if not(((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (BraketPragmasParser.X - 99)) | (1 << (BraketPragmasParser.Y - 99)) | (1 << (BraketPragmasParser.Z - 99)) | (1 << (BraketPragmasParser.I - 99)) | (1 << (BraketPragmasParser.H - 99)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.neg = None # Token
            self.value = None # Token

        def RealNumber(self):
            return self.getToken(BraketPragmasParser.RealNumber, 0)

        def Integer(self):
            return self.getToken(BraketPragmasParser.Integer, 0)

        def ImagNumber(self):
            return self.getToken(BraketPragmasParser.ImagNumber, 0)

        def MINUS(self):
            return self.getToken(BraketPragmasParser.MINUS, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_complex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex" ):
                listener.enterComplex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex" ):
                listener.exitComplex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex" ):
                return visitor.visitComplex(self)
            else:
                return visitor.visitChildren(self)




    def complex(self):

        localctx = BraketPragmasParser.ComplexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_complex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.MINUS:
                self.state = 344
                localctx.neg = self.match(BraketPragmasParser.MINUS)


            self.state = 347
            localctx.value = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (BraketPragmasParser.ImagNumber - 124)) | (1 << (BraketPragmasParser.Integer - 124)) | (1 << (BraketPragmasParser.RealNumber - 124)))) != 0)):
                localctx.value = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def header(self):
            return self.getTypedRuleContext(BraketPragmasParser.HeaderContext,0)


        def globalStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.GlobalStatementContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.GlobalStatementContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.StatementContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.StatementContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = BraketPragmasParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.header()
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__4) | (1 << BraketPragmasParser.T__5) | (1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__13) | (1 << BraketPragmasParser.T__15) | (1 << BraketPragmasParser.T__16) | (1 << BraketPragmasParser.T__17) | (1 << BraketPragmasParser.T__18) | (1 << BraketPragmasParser.T__19) | (1 << BraketPragmasParser.T__20) | (1 << BraketPragmasParser.T__21) | (1 << BraketPragmasParser.T__22) | (1 << BraketPragmasParser.T__23) | (1 << BraketPragmasParser.T__24) | (1 << BraketPragmasParser.T__25) | (1 << BraketPragmasParser.T__26) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__42) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (BraketPragmasParser.T__68 - 69)) | (1 << (BraketPragmasParser.T__70 - 69)) | (1 << (BraketPragmasParser.T__72 - 69)) | (1 << (BraketPragmasParser.T__73 - 69)) | (1 << (BraketPragmasParser.T__77 - 69)) | (1 << (BraketPragmasParser.T__78 - 69)) | (1 << (BraketPragmasParser.T__79 - 69)) | (1 << (BraketPragmasParser.T__80 - 69)) | (1 << (BraketPragmasParser.T__81 - 69)) | (1 << (BraketPragmasParser.T__82 - 69)) | (1 << (BraketPragmasParser.T__83 - 69)) | (1 << (BraketPragmasParser.T__84 - 69)) | (1 << (BraketPragmasParser.T__85 - 69)) | (1 << (BraketPragmasParser.T__86 - 69)) | (1 << (BraketPragmasParser.T__87 - 69)) | (1 << (BraketPragmasParser.LPAREN - 69)) | (1 << (BraketPragmasParser.MINUS - 69)) | (1 << (BraketPragmasParser.ImagNumber - 69)) | (1 << (BraketPragmasParser.COMPLEX - 69)) | (1 << (BraketPragmasParser.CONST - 69)) | (1 << (BraketPragmasParser.ARRAY - 69)) | (1 << (BraketPragmasParser.SIZEOF - 69)) | (1 << (BraketPragmasParser.Constant - 69)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (BraketPragmasParser.Integer - 135)) | (1 << (BraketPragmasParser.Identifier - 135)) | (1 << (BraketPragmasParser.RealNumber - 135)) | (1 << (BraketPragmasParser.TimingLiteral - 135)) | (1 << (BraketPragmasParser.StringLiteral - 135)))) != 0):
                self.state = 352
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [BraketPragmasParser.T__4, BraketPragmasParser.T__5, BraketPragmasParser.T__15, BraketPragmasParser.T__77, BraketPragmasParser.T__78, BraketPragmasParser.T__79, BraketPragmasParser.T__86, BraketPragmasParser.T__87]:
                    self.state = 350
                    self.globalStatement()
                    pass
                elif token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__13, BraketPragmasParser.T__16, BraketPragmasParser.T__17, BraketPragmasParser.T__18, BraketPragmasParser.T__19, BraketPragmasParser.T__20, BraketPragmasParser.T__21, BraketPragmasParser.T__22, BraketPragmasParser.T__23, BraketPragmasParser.T__24, BraketPragmasParser.T__25, BraketPragmasParser.T__26, BraketPragmasParser.T__27, BraketPragmasParser.T__42, BraketPragmasParser.T__43, BraketPragmasParser.T__44, BraketPragmasParser.T__45, BraketPragmasParser.T__46, BraketPragmasParser.T__47, BraketPragmasParser.T__48, BraketPragmasParser.T__49, BraketPragmasParser.T__50, BraketPragmasParser.T__51, BraketPragmasParser.T__52, BraketPragmasParser.T__53, BraketPragmasParser.T__54, BraketPragmasParser.T__55, BraketPragmasParser.T__68, BraketPragmasParser.T__70, BraketPragmasParser.T__72, BraketPragmasParser.T__73, BraketPragmasParser.T__80, BraketPragmasParser.T__81, BraketPragmasParser.T__82, BraketPragmasParser.T__83, BraketPragmasParser.T__84, BraketPragmasParser.T__85, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.ImagNumber, BraketPragmasParser.COMPLEX, BraketPragmasParser.CONST, BraketPragmasParser.ARRAY, BraketPragmasParser.SIZEOF, BraketPragmasParser.Constant, BraketPragmasParser.Integer, BraketPragmasParser.Identifier, BraketPragmasParser.RealNumber, BraketPragmasParser.TimingLiteral, BraketPragmasParser.StringLiteral]:
                    self.state = 351
                    self.statement()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(BraketPragmasParser.VersionContext,0)


        def include(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IncludeContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IncludeContext,i)


        def io(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IoContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IoContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader" ):
                listener.enterHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader" ):
                listener.exitHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader" ):
                return visitor.visitHeader(self)
            else:
                return visitor.visitChildren(self)




    def header(self):

        localctx = BraketPragmasParser.HeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.T__0:
                self.state = 357
                self.version()


            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.T__1:
                self.state = 360
                self.include()
                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.T__2 or _la==BraketPragmasParser.T__3:
                self.state = 366
                self.io()
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def Integer(self):
            return self.getToken(BraketPragmasParser.Integer, 0)

        def RealNumber(self):
            return self.getToken(BraketPragmasParser.RealNumber, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = BraketPragmasParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(BraketPragmasParser.T__0)
            self.state = 373
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.Integer or _la==BraketPragmasParser.RealNumber):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 374
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(BraketPragmasParser.StringLiteral, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_include

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude" ):
                listener.enterInclude(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude" ):
                listener.exitInclude(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclude" ):
                return visitor.visitInclude(self)
            else:
                return visitor.visitChildren(self)




    def include(self):

        localctx = BraketPragmasParser.IncludeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_include)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.match(BraketPragmasParser.T__1)
            self.state = 377
            self.match(BraketPragmasParser.StringLiteral)
            self.state = 378
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_ioIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoIdentifier" ):
                listener.enterIoIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoIdentifier" ):
                listener.exitIoIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoIdentifier" ):
                return visitor.visitIoIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def ioIdentifier(self):

        localctx = BraketPragmasParser.IoIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_ioIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__2 or _la==BraketPragmasParser.T__3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ioIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IoIdentifierContext,0)


        def classicalType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalTypeContext,0)


        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_io

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIo" ):
                listener.enterIo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIo" ):
                listener.exitIo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIo" ):
                return visitor.visitIo(self)
            else:
                return visitor.visitChildren(self)




    def io(self):

        localctx = BraketPragmasParser.IoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_io)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.ioIdentifier()
            self.state = 383
            self.classicalType()
            self.state = 384
            self.match(BraketPragmasParser.Identifier)
            self.state = 385
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subroutineDefinition(self):
            return self.getTypedRuleContext(BraketPragmasParser.SubroutineDefinitionContext,0)


        def externDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExternDeclarationContext,0)


        def quantumGateDefinition(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumGateDefinitionContext,0)


        def calibration(self):
            return self.getTypedRuleContext(BraketPragmasParser.CalibrationContext,0)


        def quantumDeclarationStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumDeclarationStatementContext,0)


        def pragma(self):
            return self.getTypedRuleContext(BraketPragmasParser.PragmaContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_globalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalStatement" ):
                listener.enterGlobalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalStatement" ):
                listener.exitGlobalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalStatement" ):
                return visitor.visitGlobalStatement(self)
            else:
                return visitor.visitChildren(self)




    def globalStatement(self):

        localctx = BraketPragmasParser.GlobalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_globalStatement)
        try:
            self.state = 393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 387
                self.subroutineDefinition()
                pass
            elif token in [BraketPragmasParser.T__77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 388
                self.externDeclaration()
                pass
            elif token in [BraketPragmasParser.T__15]:
                self.enterOuterAlt(localctx, 3)
                self.state = 389
                self.quantumGateDefinition()
                pass
            elif token in [BraketPragmasParser.T__86, BraketPragmasParser.T__87]:
                self.enterOuterAlt(localctx, 4)
                self.state = 390
                self.calibration()
                pass
            elif token in [BraketPragmasParser.T__4, BraketPragmasParser.T__5]:
                self.enterOuterAlt(localctx, 5)
                self.state = 391
                self.quantumDeclarationStatement()
                pass
            elif token in [BraketPragmasParser.T__79]:
                self.enterOuterAlt(localctx, 6)
                self.state = 392
                self.pragma()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionStatementContext,0)


        def assignmentStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.AssignmentStatementContext,0)


        def classicalDeclarationStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalDeclarationStatementContext,0)


        def branchingStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.BranchingStatementContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.LoopStatementContext,0)


        def endStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.EndStatementContext,0)


        def aliasStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.AliasStatementContext,0)


        def quantumStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumStatementContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = BraketPragmasParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_statement)
        try:
            self.state = 403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 395
                self.expressionStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 396
                self.assignmentStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 397
                self.classicalDeclarationStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 398
                self.branchingStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 399
                self.loopStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 400
                self.endStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 401
                self.aliasStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 402
                self.quantumStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumDeclarationContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumDeclarationStatement" ):
                listener.enterQuantumDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumDeclarationStatement" ):
                listener.exitQuantumDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumDeclarationStatement" ):
                return visitor.visitQuantumDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def quantumDeclarationStatement(self):

        localctx = BraketPragmasParser.QuantumDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_quantumDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.quantumDeclaration()
            self.state = 406
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def classicalDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalDeclarationContext,0)


        def constantDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.ConstantDeclarationContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_classicalDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalDeclarationStatement" ):
                listener.enterClassicalDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalDeclarationStatement" ):
                listener.exitClassicalDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalDeclarationStatement" ):
                return visitor.visitClassicalDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def classicalDeclarationStatement(self):

        localctx = BraketPragmasParser.ClassicalDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_classicalDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__80, BraketPragmasParser.T__81, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY]:
                self.state = 408
                self.classicalDeclaration()
                pass
            elif token in [BraketPragmasParser.CONST]:
                self.state = 409
                self.constantDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 412
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexedIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(BraketPragmasParser.AssignmentOperatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_classicalAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalAssignment" ):
                listener.enterClassicalAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalAssignment" ):
                listener.exitClassicalAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalAssignment" ):
                return visitor.visitClassicalAssignment(self)
            else:
                return visitor.visitChildren(self)




    def classicalAssignment(self):

        localctx = BraketPragmasParser.ClassicalAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_classicalAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.indexedIdentifier()
            self.state = 415
            self.assignmentOperator()
            self.state = 416
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def classicalAssignment(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalAssignmentContext,0)


        def quantumMeasurementAssignment(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumMeasurementAssignmentContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_assignmentStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentStatement" ):
                listener.enterAssignmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentStatement" ):
                listener.exitAssignmentStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentStatement" ):
                return visitor.visitAssignmentStatement(self)
            else:
                return visitor.visitChildren(self)




    def assignmentStatement(self):

        localctx = BraketPragmasParser.AssignmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_assignmentStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 418
                self.classicalAssignment()
                pass

            elif la_ == 2:
                self.state = 419
                self.quantumMeasurementAssignment()
                pass


            self.state = 422
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnSignatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(BraketPragmasParser.ARROW, 0)

        def classicalType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalTypeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_returnSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnSignature" ):
                listener.enterReturnSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnSignature" ):
                listener.exitReturnSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnSignature" ):
                return visitor.visitReturnSignature(self)
            else:
                return visitor.visitChildren(self)




    def returnSignature(self):

        localctx = BraketPragmasParser.ReturnSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_returnSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(BraketPragmasParser.ARROW)
            self.state = 425
            self.classicalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignator" ):
                return visitor.visitDesignator(self)
            else:
                return visitor.visitChildren(self)




    def designator(self):

        localctx = BraketPragmasParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_designator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 428
            self.expression(0)
            self.state = 429
            self.match(BraketPragmasParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.Identifier)
            else:
                return self.getToken(BraketPragmasParser.Identifier, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = BraketPragmasParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 431
                    self.match(BraketPragmasParser.Identifier)
                    self.state = 432
                    self.match(BraketPragmasParser.COMMA) 
                self.state = 437
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

            self.state = 438
            self.match(BraketPragmasParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumDeclaration" ):
                listener.enterQuantumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumDeclaration" ):
                listener.exitQuantumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumDeclaration" ):
                return visitor.visitQuantumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def quantumDeclaration(self):

        localctx = BraketPragmasParser.QuantumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_quantumDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 440
                self.match(BraketPragmasParser.T__4)
                self.state = 441
                self.match(BraketPragmasParser.Identifier)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 442
                    self.designator()


                pass
            elif token in [BraketPragmasParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 445
                self.match(BraketPragmasParser.T__5)
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 446
                    self.designator()


                self.state = 449
                self.match(BraketPragmasParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumArgument" ):
                listener.enterQuantumArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumArgument" ):
                listener.exitQuantumArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumArgument" ):
                return visitor.visitQuantumArgument(self)
            else:
                return visitor.visitChildren(self)




    def quantumArgument(self):

        localctx = BraketPragmasParser.QuantumArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_quantumArgument)
        self._la = 0 # Token type
        try:
            self.state = 462
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 452
                self.match(BraketPragmasParser.T__4)
                self.state = 453
                self.match(BraketPragmasParser.Identifier)
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 454
                    self.designator()


                pass
            elif token in [BraketPragmasParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 457
                self.match(BraketPragmasParser.T__5)
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 458
                    self.designator()


                self.state = 461
                self.match(BraketPragmasParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.QuantumArgumentContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.QuantumArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumArgumentList" ):
                listener.enterQuantumArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumArgumentList" ):
                listener.exitQuantumArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumArgumentList" ):
                return visitor.visitQuantumArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def quantumArgumentList(self):

        localctx = BraketPragmasParser.QuantumArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_quantumArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.quantumArgument()
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 465
                self.match(BraketPragmasParser.COMMA)
                self.state = 466
                self.quantumArgument()
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_bitType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitType" ):
                listener.enterBitType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitType" ):
                listener.exitBitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitType" ):
                return visitor.visitBitType(self)
            else:
                return visitor.visitChildren(self)




    def bitType(self):

        localctx = BraketPragmasParser.BitTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_bitType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__6 or _la==BraketPragmasParser.T__7):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDesignatorTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_singleDesignatorType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDesignatorType" ):
                listener.enterSingleDesignatorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDesignatorType" ):
                listener.exitSingleDesignatorType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDesignatorType" ):
                return visitor.visitSingleDesignatorType(self)
            else:
                return visitor.visitChildren(self)




    def singleDesignatorType(self):

        localctx = BraketPragmasParser.SingleDesignatorTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_singleDesignatorType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoDesignatorTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timingType(self):
            return self.getTypedRuleContext(BraketPragmasParser.TimingTypeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_noDesignatorType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoDesignatorType" ):
                listener.enterNoDesignatorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoDesignatorType" ):
                listener.exitNoDesignatorType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoDesignatorType" ):
                return visitor.visitNoDesignatorType(self)
            else:
                return visitor.visitChildren(self)




    def noDesignatorType(self):

        localctx = BraketPragmasParser.NoDesignatorTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_noDesignatorType)
        try:
            self.state = 478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 476
                self.match(BraketPragmasParser.T__12)
                pass
            elif token in [BraketPragmasParser.T__80, BraketPragmasParser.T__81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 477
                self.timingType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonArrayTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorType(self):
            return self.getTypedRuleContext(BraketPragmasParser.SingleDesignatorTypeContext,0)


        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def noDesignatorType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NoDesignatorTypeContext,0)


        def bitType(self):
            return self.getTypedRuleContext(BraketPragmasParser.BitTypeContext,0)


        def COMPLEX(self):
            return self.getToken(BraketPragmasParser.COMPLEX, 0)

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def numericType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NumericTypeContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_nonArrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonArrayType" ):
                listener.enterNonArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonArrayType" ):
                listener.exitNonArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonArrayType" ):
                return visitor.visitNonArrayType(self)
            else:
                return visitor.visitChildren(self)




    def nonArrayType(self):

        localctx = BraketPragmasParser.NonArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_nonArrayType)
        self._la = 0 # Token type
        try:
            self.state = 493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 480
                self.singleDesignatorType()
                self.state = 481
                self.designator()
                pass
            elif token in [BraketPragmasParser.T__12, BraketPragmasParser.T__80, BraketPragmasParser.T__81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 483
                self.noDesignatorType()
                pass
            elif token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7]:
                self.enterOuterAlt(localctx, 3)
                self.state = 484
                self.bitType()
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 485
                    self.designator()


                pass
            elif token in [BraketPragmasParser.COMPLEX]:
                self.enterOuterAlt(localctx, 4)
                self.state = 488
                self.match(BraketPragmasParser.COMPLEX)
                self.state = 489
                self.match(BraketPragmasParser.LBRACKET)
                self.state = 490
                self.numericType()
                self.state = 491
                self.match(BraketPragmasParser.RBRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(BraketPragmasParser.ARRAY, 0)

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def nonArrayType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NonArrayTypeContext,0)


        def COMMA(self):
            return self.getToken(BraketPragmasParser.COMMA, 0)

        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = BraketPragmasParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.match(BraketPragmasParser.ARRAY)
            self.state = 496
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 497
            self.nonArrayType()
            self.state = 498
            self.match(BraketPragmasParser.COMMA)
            self.state = 499
            self.expressionList()
            self.state = 500
            self.match(BraketPragmasParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayReferenceTypeDimensionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def DIM(self):
            return self.getToken(BraketPragmasParser.DIM, 0)

        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_arrayReferenceTypeDimensionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayReferenceTypeDimensionSpecifier" ):
                listener.enterArrayReferenceTypeDimensionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayReferenceTypeDimensionSpecifier" ):
                listener.exitArrayReferenceTypeDimensionSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayReferenceTypeDimensionSpecifier" ):
                return visitor.visitArrayReferenceTypeDimensionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def arrayReferenceTypeDimensionSpecifier(self):

        localctx = BraketPragmasParser.ArrayReferenceTypeDimensionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_arrayReferenceTypeDimensionSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__26, BraketPragmasParser.T__27, BraketPragmasParser.T__42, BraketPragmasParser.T__43, BraketPragmasParser.T__44, BraketPragmasParser.T__45, BraketPragmasParser.T__46, BraketPragmasParser.T__47, BraketPragmasParser.T__48, BraketPragmasParser.T__49, BraketPragmasParser.T__50, BraketPragmasParser.T__51, BraketPragmasParser.T__52, BraketPragmasParser.T__53, BraketPragmasParser.T__54, BraketPragmasParser.T__55, BraketPragmasParser.T__80, BraketPragmasParser.T__81, BraketPragmasParser.T__83, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.ImagNumber, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.SIZEOF, BraketPragmasParser.Constant, BraketPragmasParser.Integer, BraketPragmasParser.Identifier, BraketPragmasParser.RealNumber, BraketPragmasParser.TimingLiteral, BraketPragmasParser.StringLiteral]:
                self.state = 502
                self.expressionList()
                pass
            elif token in [BraketPragmasParser.DIM]:
                self.state = 503
                self.match(BraketPragmasParser.DIM)
                self.state = 504
                self.match(BraketPragmasParser.EQUALS)
                self.state = 505
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayReferenceTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(BraketPragmasParser.ARRAY, 0)

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def nonArrayType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NonArrayTypeContext,0)


        def COMMA(self):
            return self.getToken(BraketPragmasParser.COMMA, 0)

        def arrayReferenceTypeDimensionSpecifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayReferenceTypeDimensionSpecifierContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_arrayReferenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayReferenceType" ):
                listener.enterArrayReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayReferenceType" ):
                listener.exitArrayReferenceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayReferenceType" ):
                return visitor.visitArrayReferenceType(self)
            else:
                return visitor.visitChildren(self)




    def arrayReferenceType(self):

        localctx = BraketPragmasParser.ArrayReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_arrayReferenceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.match(BraketPragmasParser.ARRAY)
            self.state = 509
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 510
            self.nonArrayType()
            self.state = 511
            self.match(BraketPragmasParser.COMMA)
            self.state = 512
            self.arrayReferenceTypeDimensionSpecifier()
            self.state = 513
            self.match(BraketPragmasParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonArrayType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NonArrayTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_classicalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalType" ):
                listener.enterClassicalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalType" ):
                listener.exitClassicalType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalType" ):
                return visitor.visitClassicalType(self)
            else:
                return visitor.visitChildren(self)




    def classicalType(self):

        localctx = BraketPragmasParser.ClassicalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_classicalType)
        try:
            self.state = 517
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__80, BraketPragmasParser.T__81, BraketPragmasParser.COMPLEX]:
                self.enterOuterAlt(localctx, 1)
                self.state = 515
                self.nonArrayType()
                pass
            elif token in [BraketPragmasParser.ARRAY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 516
                self.arrayType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorType(self):
            return self.getTypedRuleContext(BraketPragmasParser.SingleDesignatorTypeContext,0)


        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_numericType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericType" ):
                listener.enterNumericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericType" ):
                listener.exitNumericType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericType" ):
                return visitor.visitNumericType(self)
            else:
                return visitor.visitChildren(self)




    def numericType(self):

        localctx = BraketPragmasParser.NumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_numericType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.singleDesignatorType()
            self.state = 520
            self.designator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(BraketPragmasParser.CONST, 0)

        def classicalType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalTypeContext,0)


        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_constantDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclaration" ):
                listener.enterConstantDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclaration" ):
                listener.exitConstantDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDeclaration" ):
                return visitor.visitConstantDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constantDeclaration(self):

        localctx = BraketPragmasParser.ConstantDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_constantDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.match(BraketPragmasParser.CONST)
            self.state = 523
            self.classicalType()
            self.state = 524
            self.match(BraketPragmasParser.Identifier)
            self.state = 525
            self.equalsExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDesignatorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorType(self):
            return self.getTypedRuleContext(BraketPragmasParser.SingleDesignatorTypeContext,0)


        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_singleDesignatorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDesignatorDeclaration" ):
                listener.enterSingleDesignatorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDesignatorDeclaration" ):
                listener.exitSingleDesignatorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDesignatorDeclaration" ):
                return visitor.visitSingleDesignatorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def singleDesignatorDeclaration(self):

        localctx = BraketPragmasParser.SingleDesignatorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_singleDesignatorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.singleDesignatorType()
            self.state = 528
            self.designator()
            self.state = 529
            self.match(BraketPragmasParser.Identifier)
            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.EQUALS:
                self.state = 530
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoDesignatorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noDesignatorType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NoDesignatorTypeContext,0)


        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_noDesignatorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoDesignatorDeclaration" ):
                listener.enterNoDesignatorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoDesignatorDeclaration" ):
                listener.exitNoDesignatorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoDesignatorDeclaration" ):
                return visitor.visitNoDesignatorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def noDesignatorDeclaration(self):

        localctx = BraketPragmasParser.NoDesignatorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_noDesignatorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.noDesignatorType()
            self.state = 534
            self.match(BraketPragmasParser.Identifier)
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.EQUALS:
                self.state = 535
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.EqualsExpressionContext,0)


        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_bitDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitDeclaration" ):
                listener.enterBitDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitDeclaration" ):
                listener.exitBitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitDeclaration" ):
                return visitor.visitBitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def bitDeclaration(self):

        localctx = BraketPragmasParser.BitDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_bitDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__7]:
                self.state = 538
                self.match(BraketPragmasParser.T__7)
                self.state = 539
                self.match(BraketPragmasParser.Identifier)
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 540
                    self.designator()


                pass
            elif token in [BraketPragmasParser.T__6]:
                self.state = 543
                self.match(BraketPragmasParser.T__6)
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 544
                    self.designator()


                self.state = 547
                self.match(BraketPragmasParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.EQUALS:
                self.state = 550
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPLEX(self):
            return self.getToken(BraketPragmasParser.COMPLEX, 0)

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def numericType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NumericTypeContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_complexDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexDeclaration" ):
                listener.enterComplexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexDeclaration" ):
                listener.exitComplexDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexDeclaration" ):
                return visitor.visitComplexDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def complexDeclaration(self):

        localctx = BraketPragmasParser.ComplexDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_complexDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.match(BraketPragmasParser.COMPLEX)
            self.state = 554
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 555
            self.numericType()
            self.state = 556
            self.match(BraketPragmasParser.RBRACKET)
            self.state = 557
            self.match(BraketPragmasParser.Identifier)
            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.EQUALS:
                self.state = 558
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)


        def arrayInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ArrayInitializerContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ArrayInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayInitializer" ):
                return visitor.visitArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def arrayInitializer(self):

        localctx = BraketPragmasParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(BraketPragmasParser.LBRACE)

            self.state = 564
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__26, BraketPragmasParser.T__27, BraketPragmasParser.T__42, BraketPragmasParser.T__43, BraketPragmasParser.T__44, BraketPragmasParser.T__45, BraketPragmasParser.T__46, BraketPragmasParser.T__47, BraketPragmasParser.T__48, BraketPragmasParser.T__49, BraketPragmasParser.T__50, BraketPragmasParser.T__51, BraketPragmasParser.T__52, BraketPragmasParser.T__53, BraketPragmasParser.T__54, BraketPragmasParser.T__55, BraketPragmasParser.T__80, BraketPragmasParser.T__81, BraketPragmasParser.T__83, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.ImagNumber, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.SIZEOF, BraketPragmasParser.Constant, BraketPragmasParser.Integer, BraketPragmasParser.Identifier, BraketPragmasParser.RealNumber, BraketPragmasParser.TimingLiteral, BraketPragmasParser.StringLiteral]:
                self.state = 562
                self.expression(0)
                pass
            elif token in [BraketPragmasParser.LBRACE]:
                self.state = 563
                self.arrayInitializer()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 566
                self.match(BraketPragmasParser.COMMA)
                self.state = 569
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__26, BraketPragmasParser.T__27, BraketPragmasParser.T__42, BraketPragmasParser.T__43, BraketPragmasParser.T__44, BraketPragmasParser.T__45, BraketPragmasParser.T__46, BraketPragmasParser.T__47, BraketPragmasParser.T__48, BraketPragmasParser.T__49, BraketPragmasParser.T__50, BraketPragmasParser.T__51, BraketPragmasParser.T__52, BraketPragmasParser.T__53, BraketPragmasParser.T__54, BraketPragmasParser.T__55, BraketPragmasParser.T__80, BraketPragmasParser.T__81, BraketPragmasParser.T__83, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.ImagNumber, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.SIZEOF, BraketPragmasParser.Constant, BraketPragmasParser.Integer, BraketPragmasParser.Identifier, BraketPragmasParser.RealNumber, BraketPragmasParser.TimingLiteral, BraketPragmasParser.StringLiteral]:
                    self.state = 567
                    self.expression(0)
                    pass
                elif token in [BraketPragmasParser.LBRACE]:
                    self.state = 568
                    self.arrayInitializer()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 576
            self.match(BraketPragmasParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayTypeContext,0)


        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def arrayInitializer(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_arrayDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDeclaration" ):
                listener.enterArrayDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDeclaration" ):
                listener.exitArrayDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDeclaration" ):
                return visitor.visitArrayDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def arrayDeclaration(self):

        localctx = BraketPragmasParser.ArrayDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_arrayDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.arrayType()
            self.state = 579
            self.match(BraketPragmasParser.Identifier)
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.EQUALS:
                self.state = 580
                self.match(BraketPragmasParser.EQUALS)
                self.state = 583
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [BraketPragmasParser.LBRACE]:
                    self.state = 581
                    self.arrayInitializer()
                    pass
                elif token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__26, BraketPragmasParser.T__27, BraketPragmasParser.T__42, BraketPragmasParser.T__43, BraketPragmasParser.T__44, BraketPragmasParser.T__45, BraketPragmasParser.T__46, BraketPragmasParser.T__47, BraketPragmasParser.T__48, BraketPragmasParser.T__49, BraketPragmasParser.T__50, BraketPragmasParser.T__51, BraketPragmasParser.T__52, BraketPragmasParser.T__53, BraketPragmasParser.T__54, BraketPragmasParser.T__55, BraketPragmasParser.T__80, BraketPragmasParser.T__81, BraketPragmasParser.T__83, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.ImagNumber, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.SIZEOF, BraketPragmasParser.Constant, BraketPragmasParser.Integer, BraketPragmasParser.Identifier, BraketPragmasParser.RealNumber, BraketPragmasParser.TimingLiteral, BraketPragmasParser.StringLiteral]:
                    self.state = 582
                    self.expression(0)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.SingleDesignatorDeclarationContext,0)


        def noDesignatorDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.NoDesignatorDeclarationContext,0)


        def bitDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.BitDeclarationContext,0)


        def complexDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.ComplexDeclarationContext,0)


        def arrayDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayDeclarationContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_classicalDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalDeclaration" ):
                listener.enterClassicalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalDeclaration" ):
                listener.exitClassicalDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalDeclaration" ):
                return visitor.visitClassicalDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classicalDeclaration(self):

        localctx = BraketPragmasParser.ClassicalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_classicalDeclaration)
        try:
            self.state = 592
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 587
                self.singleDesignatorDeclaration()
                pass
            elif token in [BraketPragmasParser.T__12, BraketPragmasParser.T__80, BraketPragmasParser.T__81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 588
                self.noDesignatorDeclaration()
                pass
            elif token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7]:
                self.enterOuterAlt(localctx, 3)
                self.state = 589
                self.bitDeclaration()
                pass
            elif token in [BraketPragmasParser.COMPLEX]:
                self.enterOuterAlt(localctx, 4)
                self.state = 590
                self.complexDeclaration()
                pass
            elif token in [BraketPragmasParser.ARRAY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 591
                self.arrayDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ClassicalTypeContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ClassicalTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_classicalTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalTypeList" ):
                listener.enterClassicalTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalTypeList" ):
                listener.exitClassicalTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalTypeList" ):
                return visitor.visitClassicalTypeList(self)
            else:
                return visitor.visitChildren(self)




    def classicalTypeList(self):

        localctx = BraketPragmasParser.ClassicalTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_classicalTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 594
                    self.classicalType()
                    self.state = 595
                    self.match(BraketPragmasParser.COMMA) 
                self.state = 601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 602
            self.classicalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def singleDesignatorType(self):
            return self.getTypedRuleContext(BraketPragmasParser.SingleDesignatorTypeContext,0)


        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def noDesignatorType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NoDesignatorTypeContext,0)


        def COMPLEX(self):
            return self.getToken(BraketPragmasParser.COMPLEX, 0)

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def numericType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NumericTypeContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def arrayReferenceType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayReferenceTypeContext,0)


        def CONST(self):
            return self.getToken(BraketPragmasParser.CONST, 0)

        def MUTABLE(self):
            return self.getToken(BraketPragmasParser.MUTABLE, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_classicalArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalArgument" ):
                listener.enterClassicalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalArgument" ):
                listener.exitClassicalArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalArgument" ):
                return visitor.visitClassicalArgument(self)
            else:
                return visitor.visitChildren(self)




    def classicalArgument(self):

        localctx = BraketPragmasParser.ClassicalArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_classicalArgument)
        self._la = 0 # Token type
        try:
            self.state = 632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__80, BraketPragmasParser.T__81]:
                self.enterOuterAlt(localctx, 1)
                self.state = 608
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11]:
                    self.state = 604
                    self.singleDesignatorType()
                    self.state = 605
                    self.designator()
                    pass
                elif token in [BraketPragmasParser.T__12, BraketPragmasParser.T__80, BraketPragmasParser.T__81]:
                    self.state = 607
                    self.noDesignatorType()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 610
                self.match(BraketPragmasParser.Identifier)
                pass
            elif token in [BraketPragmasParser.T__7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 612
                self.match(BraketPragmasParser.T__7)
                self.state = 613
                self.match(BraketPragmasParser.Identifier)
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 614
                    self.designator()


                pass
            elif token in [BraketPragmasParser.T__6]:
                self.enterOuterAlt(localctx, 3)
                self.state = 617
                self.match(BraketPragmasParser.T__6)
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 618
                    self.designator()


                self.state = 621
                self.match(BraketPragmasParser.Identifier)
                pass
            elif token in [BraketPragmasParser.COMPLEX]:
                self.enterOuterAlt(localctx, 4)
                self.state = 622
                self.match(BraketPragmasParser.COMPLEX)
                self.state = 623
                self.match(BraketPragmasParser.LBRACKET)
                self.state = 624
                self.numericType()
                self.state = 625
                self.match(BraketPragmasParser.RBRACKET)
                self.state = 626
                self.match(BraketPragmasParser.Identifier)
                pass
            elif token in [BraketPragmasParser.CONST, BraketPragmasParser.MUTABLE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 628
                _la = self._input.LA(1)
                if not(_la==BraketPragmasParser.CONST or _la==BraketPragmasParser.MUTABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 629
                self.arrayReferenceType()
                self.state = 630
                self.match(BraketPragmasParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ClassicalArgumentContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ClassicalArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_classicalArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalArgumentList" ):
                listener.enterClassicalArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalArgumentList" ):
                listener.exitClassicalArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalArgumentList" ):
                return visitor.visitClassicalArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def classicalArgumentList(self):

        localctx = BraketPragmasParser.ClassicalArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_classicalArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.classicalArgument()
            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 635
                self.match(BraketPragmasParser.COMMA)
                self.state = 636
                self.classicalArgument()
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyTypeArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalArgument(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalArgumentContext,0)


        def quantumArgument(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumArgumentContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_anyTypeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyTypeArgument" ):
                listener.enterAnyTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyTypeArgument" ):
                listener.exitAnyTypeArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnyTypeArgument" ):
                return visitor.visitAnyTypeArgument(self)
            else:
                return visitor.visitChildren(self)




    def anyTypeArgument(self):

        localctx = BraketPragmasParser.AnyTypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_anyTypeArgument)
        try:
            self.state = 644
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__80, BraketPragmasParser.T__81, BraketPragmasParser.COMPLEX, BraketPragmasParser.CONST, BraketPragmasParser.MUTABLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 642
                self.classicalArgument()
                pass
            elif token in [BraketPragmasParser.T__4, BraketPragmasParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 643
                self.quantumArgument()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyTypeArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyTypeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.AnyTypeArgumentContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.AnyTypeArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_anyTypeArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyTypeArgumentList" ):
                listener.enterAnyTypeArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyTypeArgumentList" ):
                listener.exitAnyTypeArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnyTypeArgumentList" ):
                return visitor.visitAnyTypeArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def anyTypeArgumentList(self):

        localctx = BraketPragmasParser.AnyTypeArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_anyTypeArgumentList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 646
                    self.anyTypeArgument()
                    self.state = 647
                    self.match(BraketPragmasParser.COMMA) 
                self.state = 653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 654
            self.anyTypeArgument()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def aliasInitializer(self):
            return self.getTypedRuleContext(BraketPragmasParser.AliasInitializerContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_aliasStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasStatement" ):
                listener.enterAliasStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasStatement" ):
                listener.exitAliasStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasStatement" ):
                return visitor.visitAliasStatement(self)
            else:
                return visitor.visitChildren(self)




    def aliasStatement(self):

        localctx = BraketPragmasParser.AliasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_aliasStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(BraketPragmasParser.T__13)
            self.state = 657
            self.match(BraketPragmasParser.Identifier)
            self.state = 658
            self.match(BraketPragmasParser.EQUALS)
            self.state = 659
            self.aliasInitializer(0)
            self.state = 660
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def aliasInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.AliasInitializerContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.AliasInitializerContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_aliasInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasInitializer" ):
                listener.enterAliasInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasInitializer" ):
                listener.exitAliasInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasInitializer" ):
                return visitor.visitAliasInitializer(self)
            else:
                return visitor.visitChildren(self)



    def aliasInitializer(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.AliasInitializerContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 118
        self.enterRecursionRule(localctx, 118, self.RULE_aliasInitializer, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 670
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.AliasInitializerContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_aliasInitializer)
                    self.state = 665
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 666
                    self.match(BraketPragmasParser.T__14)
                    self.state = 667
                    self.aliasInitializer(2) 
                self.state = 672
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RangeDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COLON)
            else:
                return self.getToken(BraketPragmasParser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_rangeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeDefinition" ):
                listener.enterRangeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeDefinition" ):
                listener.exitRangeDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeDefinition" ):
                return visitor.visitRangeDefinition(self)
            else:
                return visitor.visitChildren(self)




    def rangeDefinition(self):

        localctx = BraketPragmasParser.RangeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_rangeDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__26) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__42) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (BraketPragmasParser.T__80 - 81)) | (1 << (BraketPragmasParser.T__81 - 81)) | (1 << (BraketPragmasParser.T__83 - 81)) | (1 << (BraketPragmasParser.LPAREN - 81)) | (1 << (BraketPragmasParser.MINUS - 81)) | (1 << (BraketPragmasParser.ImagNumber - 81)) | (1 << (BraketPragmasParser.COMPLEX - 81)) | (1 << (BraketPragmasParser.ARRAY - 81)) | (1 << (BraketPragmasParser.SIZEOF - 81)) | (1 << (BraketPragmasParser.Constant - 81)) | (1 << (BraketPragmasParser.Integer - 81)) | (1 << (BraketPragmasParser.Identifier - 81)) | (1 << (BraketPragmasParser.RealNumber - 81)) | (1 << (BraketPragmasParser.TimingLiteral - 81)) | (1 << (BraketPragmasParser.StringLiteral - 81)))) != 0):
                self.state = 673
                self.expression(0)


            self.state = 676
            self.match(BraketPragmasParser.COLON)
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__26) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__42) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (BraketPragmasParser.T__80 - 81)) | (1 << (BraketPragmasParser.T__81 - 81)) | (1 << (BraketPragmasParser.T__83 - 81)) | (1 << (BraketPragmasParser.LPAREN - 81)) | (1 << (BraketPragmasParser.MINUS - 81)) | (1 << (BraketPragmasParser.ImagNumber - 81)) | (1 << (BraketPragmasParser.COMPLEX - 81)) | (1 << (BraketPragmasParser.ARRAY - 81)) | (1 << (BraketPragmasParser.SIZEOF - 81)) | (1 << (BraketPragmasParser.Constant - 81)) | (1 << (BraketPragmasParser.Integer - 81)) | (1 << (BraketPragmasParser.Identifier - 81)) | (1 << (BraketPragmasParser.RealNumber - 81)) | (1 << (BraketPragmasParser.TimingLiteral - 81)) | (1 << (BraketPragmasParser.StringLiteral - 81)))) != 0):
                self.state = 677
                self.expression(0)


            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.COLON:
                self.state = 680
                self.match(BraketPragmasParser.COLON)
                self.state = 681
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumGateDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateSignature(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumGateSignatureContext,0)


        def quantumBlock(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumBlockContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumGateDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateDefinition" ):
                listener.enterQuantumGateDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateDefinition" ):
                listener.exitQuantumGateDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumGateDefinition" ):
                return visitor.visitQuantumGateDefinition(self)
            else:
                return visitor.visitChildren(self)




    def quantumGateDefinition(self):

        localctx = BraketPragmasParser.QuantumGateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_quantumGateDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(BraketPragmasParser.T__15)
            self.state = 685
            self.quantumGateSignature()
            self.state = 686
            self.quantumBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumGateSignatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateName(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumGateNameContext,0)


        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IdentifierListContext,i)


        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumGateSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateSignature" ):
                listener.enterQuantumGateSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateSignature" ):
                listener.exitQuantumGateSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumGateSignature" ):
                return visitor.visitQuantumGateSignature(self)
            else:
                return visitor.visitChildren(self)




    def quantumGateSignature(self):

        localctx = BraketPragmasParser.QuantumGateSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_quantumGateSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.quantumGateName()
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LPAREN:
                self.state = 689
                self.match(BraketPragmasParser.LPAREN)
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.Identifier:
                    self.state = 690
                    self.identifierList()


                self.state = 693
                self.match(BraketPragmasParser.RPAREN)


            self.state = 696
            self.identifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumGateNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumGateName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateName" ):
                listener.enterQuantumGateName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateName" ):
                listener.exitQuantumGateName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumGateName" ):
                return visitor.visitQuantumGateName(self)
            else:
                return visitor.visitChildren(self)




    def quantumGateName(self):

        localctx = BraketPragmasParser.QuantumGateNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_quantumGateName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__16 or _la==BraketPragmasParser.T__17 or _la==BraketPragmasParser.Identifier):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def quantumStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.QuantumStatementContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.QuantumStatementContext,i)


        def quantumLoop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.QuantumLoopContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.QuantumLoopContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumBlock" ):
                listener.enterQuantumBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumBlock" ):
                listener.exitQuantumBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumBlock" ):
                return visitor.visitQuantumBlock(self)
            else:
                return visitor.visitChildren(self)




    def quantumBlock(self):

        localctx = BraketPragmasParser.QuantumBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_quantumBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(BraketPragmasParser.LBRACE)
            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (BraketPragmasParser.T__16 - 17)) | (1 << (BraketPragmasParser.T__17 - 17)) | (1 << (BraketPragmasParser.T__18 - 17)) | (1 << (BraketPragmasParser.T__19 - 17)) | (1 << (BraketPragmasParser.T__20 - 17)) | (1 << (BraketPragmasParser.T__21 - 17)) | (1 << (BraketPragmasParser.T__22 - 17)) | (1 << (BraketPragmasParser.T__23 - 17)) | (1 << (BraketPragmasParser.T__24 - 17)) | (1 << (BraketPragmasParser.T__25 - 17)) | (1 << (BraketPragmasParser.T__70 - 17)) | (1 << (BraketPragmasParser.T__72 - 17)))) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (BraketPragmasParser.T__82 - 83)) | (1 << (BraketPragmasParser.T__84 - 83)) | (1 << (BraketPragmasParser.T__85 - 83)) | (1 << (BraketPragmasParser.Identifier - 83)))) != 0):
                self.state = 703
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [BraketPragmasParser.T__16, BraketPragmasParser.T__17, BraketPragmasParser.T__18, BraketPragmasParser.T__19, BraketPragmasParser.T__20, BraketPragmasParser.T__21, BraketPragmasParser.T__22, BraketPragmasParser.T__23, BraketPragmasParser.T__24, BraketPragmasParser.T__25, BraketPragmasParser.T__82, BraketPragmasParser.T__84, BraketPragmasParser.T__85, BraketPragmasParser.Identifier]:
                    self.state = 701
                    self.quantumStatement()
                    pass
                elif token in [BraketPragmasParser.T__70, BraketPragmasParser.T__72]:
                    self.state = 702
                    self.quantumLoop()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 708
            self.match(BraketPragmasParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loopSignature(self):
            return self.getTypedRuleContext(BraketPragmasParser.LoopSignatureContext,0)


        def quantumLoopBlock(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumLoopBlockContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumLoop" ):
                listener.enterQuantumLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumLoop" ):
                listener.exitQuantumLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumLoop" ):
                return visitor.visitQuantumLoop(self)
            else:
                return visitor.visitChildren(self)




    def quantumLoop(self):

        localctx = BraketPragmasParser.QuantumLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_quantumLoop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.loopSignature()
            self.state = 711
            self.quantumLoopBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumLoopBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.QuantumStatementContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.QuantumStatementContext,i)


        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumLoopBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumLoopBlock" ):
                listener.enterQuantumLoopBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumLoopBlock" ):
                listener.exitQuantumLoopBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumLoopBlock" ):
                return visitor.visitQuantumLoopBlock(self)
            else:
                return visitor.visitChildren(self)




    def quantumLoopBlock(self):

        localctx = BraketPragmasParser.QuantumLoopBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_quantumLoopBlock)
        self._la = 0 # Token type
        try:
            self.state = 722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__16, BraketPragmasParser.T__17, BraketPragmasParser.T__18, BraketPragmasParser.T__19, BraketPragmasParser.T__20, BraketPragmasParser.T__21, BraketPragmasParser.T__22, BraketPragmasParser.T__23, BraketPragmasParser.T__24, BraketPragmasParser.T__25, BraketPragmasParser.T__82, BraketPragmasParser.T__84, BraketPragmasParser.T__85, BraketPragmasParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 713
                self.quantumStatement()
                pass
            elif token in [BraketPragmasParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self.match(BraketPragmasParser.LBRACE)
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__16) | (1 << BraketPragmasParser.T__17) | (1 << BraketPragmasParser.T__18) | (1 << BraketPragmasParser.T__19) | (1 << BraketPragmasParser.T__20) | (1 << BraketPragmasParser.T__21) | (1 << BraketPragmasParser.T__22) | (1 << BraketPragmasParser.T__23) | (1 << BraketPragmasParser.T__24) | (1 << BraketPragmasParser.T__25))) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (BraketPragmasParser.T__82 - 83)) | (1 << (BraketPragmasParser.T__84 - 83)) | (1 << (BraketPragmasParser.T__85 - 83)) | (1 << (BraketPragmasParser.Identifier - 83)))) != 0):
                    self.state = 715
                    self.quantumStatement()
                    self.state = 720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 721
                self.match(BraketPragmasParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumInstruction(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumInstructionContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def timingStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.TimingStatementContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumStatement" ):
                listener.enterQuantumStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumStatement" ):
                listener.exitQuantumStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumStatement" ):
                return visitor.visitQuantumStatement(self)
            else:
                return visitor.visitChildren(self)




    def quantumStatement(self):

        localctx = BraketPragmasParser.QuantumStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_quantumStatement)
        try:
            self.state = 728
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__16, BraketPragmasParser.T__17, BraketPragmasParser.T__18, BraketPragmasParser.T__19, BraketPragmasParser.T__20, BraketPragmasParser.T__21, BraketPragmasParser.T__22, BraketPragmasParser.T__23, BraketPragmasParser.T__24, BraketPragmasParser.T__25, BraketPragmasParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 724
                self.quantumInstruction()
                self.state = 725
                self.match(BraketPragmasParser.SEMICOLON)
                pass
            elif token in [BraketPragmasParser.T__82, BraketPragmasParser.T__84, BraketPragmasParser.T__85]:
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self.timingStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumInstructionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateCall(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumGateCallContext,0)


        def quantumPhase(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumPhaseContext,0)


        def quantumMeasurement(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumMeasurementContext,0)


        def quantumReset(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumResetContext,0)


        def quantumBarrier(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumBarrierContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumInstruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumInstruction" ):
                listener.enterQuantumInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumInstruction" ):
                listener.exitQuantumInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumInstruction" ):
                return visitor.visitQuantumInstruction(self)
            else:
                return visitor.visitChildren(self)




    def quantumInstruction(self):

        localctx = BraketPragmasParser.QuantumInstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_quantumInstruction)
        try:
            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 730
                self.quantumGateCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 731
                self.quantumPhase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 732
                self.quantumMeasurement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 733
                self.quantumReset()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 734
                self.quantumBarrier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumPhaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def quantumGateModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.QuantumGateModifierContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.QuantumGateModifierContext,i)


        def indexedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IndexedIdentifierContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumPhase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumPhase" ):
                listener.enterQuantumPhase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumPhase" ):
                listener.exitQuantumPhase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumPhase" ):
                return visitor.visitQuantumPhase(self)
            else:
                return visitor.visitChildren(self)




    def quantumPhase(self):

        localctx = BraketPragmasParser.QuantumPhaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_quantumPhase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__22) | (1 << BraketPragmasParser.T__23) | (1 << BraketPragmasParser.T__24) | (1 << BraketPragmasParser.T__25))) != 0):
                self.state = 737
                self.quantumGateModifier()
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 743
            self.match(BraketPragmasParser.T__18)
            self.state = 744
            self.match(BraketPragmasParser.LPAREN)
            self.state = 745
            self.expression(0)
            self.state = 746
            self.match(BraketPragmasParser.RPAREN)
            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.Identifier:
                self.state = 747
                self.indexedIdentifier()
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==BraketPragmasParser.COMMA:
                    self.state = 748
                    self.match(BraketPragmasParser.COMMA)
                    self.state = 749
                    self.indexedIdentifier()
                    self.state = 754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumResetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexedIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumReset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumReset" ):
                listener.enterQuantumReset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumReset" ):
                listener.exitQuantumReset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumReset" ):
                return visitor.visitQuantumReset(self)
            else:
                return visitor.visitChildren(self)




    def quantumReset(self):

        localctx = BraketPragmasParser.QuantumResetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_quantumReset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(BraketPragmasParser.T__19)
            self.state = 758
            self.indexedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumMeasurementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexedIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumMeasurement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumMeasurement" ):
                listener.enterQuantumMeasurement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumMeasurement" ):
                listener.exitQuantumMeasurement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumMeasurement" ):
                return visitor.visitQuantumMeasurement(self)
            else:
                return visitor.visitChildren(self)




    def quantumMeasurement(self):

        localctx = BraketPragmasParser.QuantumMeasurementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_quantumMeasurement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(BraketPragmasParser.T__20)
            self.state = 761
            self.indexedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumMeasurementAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumMeasurement(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumMeasurementContext,0)


        def ARROW(self):
            return self.getToken(BraketPragmasParser.ARROW, 0)

        def indexedIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,0)


        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumMeasurementAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumMeasurementAssignment" ):
                listener.enterQuantumMeasurementAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumMeasurementAssignment" ):
                listener.exitQuantumMeasurementAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumMeasurementAssignment" ):
                return visitor.visitQuantumMeasurementAssignment(self)
            else:
                return visitor.visitChildren(self)




    def quantumMeasurementAssignment(self):

        localctx = BraketPragmasParser.QuantumMeasurementAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_quantumMeasurementAssignment)
        self._la = 0 # Token type
        try:
            self.state = 772
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 763
                self.quantumMeasurement()
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.ARROW:
                    self.state = 764
                    self.match(BraketPragmasParser.ARROW)
                    self.state = 765
                    self.indexedIdentifier()


                pass
            elif token in [BraketPragmasParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 768
                self.indexedIdentifier()
                self.state = 769
                self.match(BraketPragmasParser.EQUALS)
                self.state = 770
                self.quantumMeasurement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumBarrierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IndexedIdentifierContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumBarrier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumBarrier" ):
                listener.enterQuantumBarrier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumBarrier" ):
                listener.exitQuantumBarrier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumBarrier" ):
                return visitor.visitQuantumBarrier(self)
            else:
                return visitor.visitChildren(self)




    def quantumBarrier(self):

        localctx = BraketPragmasParser.QuantumBarrierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_quantumBarrier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.match(BraketPragmasParser.T__21)
            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.Identifier:
                self.state = 775
                self.indexedIdentifier()
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==BraketPragmasParser.COMMA:
                    self.state = 776
                    self.match(BraketPragmasParser.COMMA)
                    self.state = 777
                    self.indexedIdentifier()
                    self.state = 782
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumGateModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(BraketPragmasParser.AT, 0)

        def powModifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.PowModifierContext,0)


        def ctrlModifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.CtrlModifierContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumGateModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateModifier" ):
                listener.enterQuantumGateModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateModifier" ):
                listener.exitQuantumGateModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumGateModifier" ):
                return visitor.visitQuantumGateModifier(self)
            else:
                return visitor.visitChildren(self)




    def quantumGateModifier(self):

        localctx = BraketPragmasParser.QuantumGateModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_quantumGateModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__22]:
                self.state = 785
                self.match(BraketPragmasParser.T__22)
                pass
            elif token in [BraketPragmasParser.T__23]:
                self.state = 786
                self.powModifier()
                pass
            elif token in [BraketPragmasParser.T__24, BraketPragmasParser.T__25]:
                self.state = 787
                self.ctrlModifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 790
            self.match(BraketPragmasParser.AT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_powModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowModifier" ):
                listener.enterPowModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowModifier" ):
                listener.exitPowModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowModifier" ):
                return visitor.visitPowModifier(self)
            else:
                return visitor.visitChildren(self)




    def powModifier(self):

        localctx = BraketPragmasParser.PowModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_powModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(BraketPragmasParser.T__23)
            self.state = 793
            self.match(BraketPragmasParser.LPAREN)
            self.state = 794
            self.expression(0)
            self.state = 795
            self.match(BraketPragmasParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtrlModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_ctrlModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtrlModifier" ):
                listener.enterCtrlModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtrlModifier" ):
                listener.exitCtrlModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtrlModifier" ):
                return visitor.visitCtrlModifier(self)
            else:
                return visitor.visitChildren(self)




    def ctrlModifier(self):

        localctx = BraketPragmasParser.CtrlModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_ctrlModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__24 or _la==BraketPragmasParser.T__25):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LPAREN:
                self.state = 798
                self.match(BraketPragmasParser.LPAREN)
                self.state = 799
                self.expression(0)
                self.state = 800
                self.match(BraketPragmasParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumGateCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateName(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumGateNameContext,0)


        def indexedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IndexedIdentifierContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,i)


        def quantumGateModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.QuantumGateModifierContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.QuantumGateModifierContext,i)


        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumGateCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateCall" ):
                listener.enterQuantumGateCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateCall" ):
                listener.exitQuantumGateCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumGateCall" ):
                return visitor.visitQuantumGateCall(self)
            else:
                return visitor.visitChildren(self)




    def quantumGateCall(self):

        localctx = BraketPragmasParser.QuantumGateCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_quantumGateCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__22) | (1 << BraketPragmasParser.T__23) | (1 << BraketPragmasParser.T__24) | (1 << BraketPragmasParser.T__25))) != 0):
                self.state = 804
                self.quantumGateModifier()
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 810
            self.quantumGateName()
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LPAREN:
                self.state = 811
                self.match(BraketPragmasParser.LPAREN)
                self.state = 812
                self.expressionList()
                self.state = 813
                self.match(BraketPragmasParser.RPAREN)


            self.state = 817
            self.indexedIdentifier()
            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 818
                self.match(BraketPragmasParser.COMMA)
                self.state = 819
                self.indexedIdentifier()
                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(BraketPragmasParser.MINUS, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperator" ):
                return visitor.visitUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryOperator(self):

        localctx = BraketPragmasParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__26 or _la==BraketPragmasParser.T__27 or _la==BraketPragmasParser.MINUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = BraketPragmasParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__28) | (1 << BraketPragmasParser.T__29) | (1 << BraketPragmasParser.T__30) | (1 << BraketPragmasParser.T__31))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_equalityOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityOperator" ):
                listener.enterEqualityOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityOperator" ):
                listener.exitEqualityOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityOperator" ):
                return visitor.visitEqualityOperator(self)
            else:
                return visitor.visitChildren(self)




    def equalityOperator(self):

        localctx = BraketPragmasParser.EqualityOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_equalityOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__32 or _la==BraketPragmasParser.T__33):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_logicalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOperator" ):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOperator" ):
                listener.exitLogicalOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOperator" ):
                return visitor.visitLogicalOperator(self)
            else:
                return visitor.visitChildren(self)




    def logicalOperator(self):

        localctx = BraketPragmasParser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_logicalOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__34 or _la==BraketPragmasParser.T__35):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = BraketPragmasParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.expression(0)
            self.state = 834
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionTerminator(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionTerminatorContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.UnaryExpressionContext,0)


        def logicalAndExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.LogicalAndExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 166
        self.enterRecursionRule(localctx, 166, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 837
                self.expressionTerminator()
                pass

            elif la_ == 2:
                self.state = 838
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.state = 839
                self.logicalAndExpression(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 847
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 842
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 843
                    self.match(BraketPragmasParser.T__35)
                    self.state = 844
                    self.logicalAndExpression(0) 
                self.state = 849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitOrExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.BitOrExpressionContext,0)


        def logicalAndExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.LogicalAndExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)



    def logicalAndExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.LogicalAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 168
        self.enterRecursionRule(localctx, 168, self.RULE_logicalAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.bitOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 858
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.LogicalAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalAndExpression)
                    self.state = 853
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 854
                    self.match(BraketPragmasParser.T__34)
                    self.state = 855
                    self.bitOrExpression(0) 
                self.state = 860
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xOrExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.XOrExpressionContext,0)


        def bitOrExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.BitOrExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_bitOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOrExpression" ):
                listener.enterBitOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOrExpression" ):
                listener.exitBitOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitOrExpression" ):
                return visitor.visitBitOrExpression(self)
            else:
                return visitor.visitChildren(self)



    def bitOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.BitOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 170
        self.enterRecursionRule(localctx, 170, self.RULE_bitOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.xOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 869
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.BitOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitOrExpression)
                    self.state = 864
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 865
                    self.match(BraketPragmasParser.T__36)
                    self.state = 866
                    self.xOrExpression(0) 
                self.state = 871
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class XOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitAndExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.BitAndExpressionContext,0)


        def xOrExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.XOrExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_xOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXOrExpression" ):
                listener.enterXOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXOrExpression" ):
                listener.exitXOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXOrExpression" ):
                return visitor.visitXOrExpression(self)
            else:
                return visitor.visitChildren(self)



    def xOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.XOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 172
        self.enterRecursionRule(localctx, 172, self.RULE_xOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.bitAndExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 880
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.XOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_xOrExpression)
                    self.state = 875
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 876
                    self.match(BraketPragmasParser.T__37)
                    self.state = 877
                    self.bitAndExpression(0) 
                self.state = 882
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.EqualityExpressionContext,0)


        def bitAndExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.BitAndExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_bitAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitAndExpression" ):
                listener.enterBitAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitAndExpression" ):
                listener.exitBitAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitAndExpression" ):
                return visitor.visitBitAndExpression(self)
            else:
                return visitor.visitChildren(self)



    def bitAndExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.BitAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 174
        self.enterRecursionRule(localctx, 174, self.RULE_bitAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.equalityExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 891
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.BitAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitAndExpression)
                    self.state = 886
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 887
                    self.match(BraketPragmasParser.T__38)
                    self.state = 888
                    self.equalityExpression(0) 
                self.state = 893
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparisonExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ComparisonExpressionContext,0)


        def equalityExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.EqualityExpressionContext,0)


        def equalityOperator(self):
            return self.getTypedRuleContext(BraketPragmasParser.EqualityOperatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)



    def equalityExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.EqualityExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 176
        self.enterRecursionRule(localctx, 176, self.RULE_equalityExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.comparisonExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 903
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.EqualityExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                    self.state = 897
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 898
                    self.equalityOperator()
                    self.state = 899
                    self.comparisonExpression(0) 
                self.state = 905
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ComparisonExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitShiftExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.BitShiftExpressionContext,0)


        def comparisonExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ComparisonExpressionContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(BraketPragmasParser.ComparisonOperatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_comparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonExpression" ):
                listener.enterComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonExpression" ):
                listener.exitComparisonExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonExpression" ):
                return visitor.visitComparisonExpression(self)
            else:
                return visitor.visitChildren(self)



    def comparisonExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.ComparisonExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 178
        self.enterRecursionRule(localctx, 178, self.RULE_comparisonExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.bitShiftExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 915
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.ComparisonExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_comparisonExpression)
                    self.state = 909
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 910
                    self.comparisonOperator()
                    self.state = 911
                    self.bitShiftExpression(0) 
                self.state = 917
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitShiftExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.AdditiveExpressionContext,0)


        def bitShiftExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.BitShiftExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_bitShiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitShiftExpression" ):
                listener.enterBitShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitShiftExpression" ):
                listener.exitBitShiftExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitShiftExpression" ):
                return visitor.visitBitShiftExpression(self)
            else:
                return visitor.visitChildren(self)



    def bitShiftExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.BitShiftExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 180
        self.enterRecursionRule(localctx, 180, self.RULE_bitShiftExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.additiveExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 926
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.BitShiftExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitShiftExpression)
                    self.state = 921
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 922
                    _la = self._input.LA(1)
                    if not(_la==BraketPragmasParser.T__39 or _la==BraketPragmasParser.T__40):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 923
                    self.additiveExpression(0) 
                self.state = 928
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiplicativeExpressionContext,0)


        def additiveExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.AdditiveExpressionContext,0)


        def PLUS(self):
            return self.getToken(BraketPragmasParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(BraketPragmasParser.MINUS, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)



    def additiveExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.AdditiveExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 182
        self.enterRecursionRule(localctx, 182, self.RULE_additiveExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.multiplicativeExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 937
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.AdditiveExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                    self.state = 932
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 933
                    _la = self._input.LA(1)
                    if not(_la==BraketPragmasParser.PLUS or _la==BraketPragmasParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 934
                    self.multiplicativeExpression(0) 
                self.state = 939
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.UnaryExpressionContext,0)


        def multiplicativeExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiplicativeExpressionContext,0)


        def MUL(self):
            return self.getToken(BraketPragmasParser.MUL, 0)

        def DIV(self):
            return self.getToken(BraketPragmasParser.DIV, 0)

        def MOD(self):
            return self.getToken(BraketPragmasParser.MOD, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)



    def multiplicativeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.MultiplicativeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 184
        self.enterRecursionRule(localctx, 184, self.RULE_multiplicativeExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.unaryExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 948
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                    self.state = 943
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 944
                    _la = self._input.LA(1)
                    if not(((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (BraketPragmasParser.MUL - 120)) | (1 << (BraketPragmasParser.DIV - 120)) | (1 << (BraketPragmasParser.MOD - 120)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 945
                    self.unaryExpression() 
                self.state = 950
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def powerExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.PowerExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(BraketPragmasParser.UnaryOperatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpression" ):
                return visitor.visitUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryExpression(self):

        localctx = BraketPragmasParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.T__26 or _la==BraketPragmasParser.T__27 or _la==BraketPragmasParser.MINUS:
                self.state = 951
                self.unaryOperator()


            self.state = 954
            self.powerExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexExpressionContext,0)


        def powerExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.PowerExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_powerExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerExpression" ):
                listener.enterPowerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerExpression" ):
                listener.exitPowerExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowerExpression" ):
                return visitor.visitPowerExpression(self)
            else:
                return visitor.visitChildren(self)



    def powerExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.PowerExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 188
        self.enterRecursionRule(localctx, 188, self.RULE_powerExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.indexExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 964
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.PowerExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_powerExpression)
                    self.state = 959
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 960
                    self.match(BraketPragmasParser.T__41)
                    self.state = 961
                    self.indexExpression(0) 
                self.state = 966
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class IndexOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def discreteSet(self):
            return self.getTypedRuleContext(BraketPragmasParser.DiscreteSetContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)


        def rangeDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.RangeDefinitionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.RangeDefinitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_indexOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexOperator" ):
                listener.enterIndexOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexOperator" ):
                listener.exitIndexOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexOperator" ):
                return visitor.visitIndexOperator(self)
            else:
                return visitor.visitChildren(self)




    def indexOperator(self):

        localctx = BraketPragmasParser.IndexOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_indexOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.LBRACE]:
                self.state = 968
                self.discreteSet()
                pass
            elif token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__26, BraketPragmasParser.T__27, BraketPragmasParser.T__42, BraketPragmasParser.T__43, BraketPragmasParser.T__44, BraketPragmasParser.T__45, BraketPragmasParser.T__46, BraketPragmasParser.T__47, BraketPragmasParser.T__48, BraketPragmasParser.T__49, BraketPragmasParser.T__50, BraketPragmasParser.T__51, BraketPragmasParser.T__52, BraketPragmasParser.T__53, BraketPragmasParser.T__54, BraketPragmasParser.T__55, BraketPragmasParser.T__80, BraketPragmasParser.T__81, BraketPragmasParser.T__83, BraketPragmasParser.LPAREN, BraketPragmasParser.COLON, BraketPragmasParser.MINUS, BraketPragmasParser.ImagNumber, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.SIZEOF, BraketPragmasParser.Constant, BraketPragmasParser.Integer, BraketPragmasParser.Identifier, BraketPragmasParser.RealNumber, BraketPragmasParser.TimingLiteral, BraketPragmasParser.StringLiteral]:
                self.state = 971
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 969
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 970
                    self.rangeDefinition()
                    pass


                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==BraketPragmasParser.COMMA:
                    self.state = 973
                    self.match(BraketPragmasParser.COMMA)
                    self.state = 976
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                    if la_ == 1:
                        self.state = 974
                        self.expression(0)
                        pass

                    elif la_ == 2:
                        self.state = 975
                        self.rangeDefinition()
                        pass


                    self.state = 982
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 985
            self.match(BraketPragmasParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionTerminator(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionTerminatorContext,0)


        def indexExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexExpressionContext,0)


        def indexOperator(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexOperatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_indexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExpression" ):
                listener.enterIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExpression" ):
                listener.exitIndexExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexExpression" ):
                return visitor.visitIndexExpression(self)
            else:
                return visitor.visitChildren(self)



    def indexExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.IndexExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 192
        self.enterRecursionRule(localctx, 192, self.RULE_indexExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.expressionTerminator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 994
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.IndexExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_indexExpression)
                    self.state = 990
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 991
                    self.indexOperator() 
                self.state = 996
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class IndexedIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def indexOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IndexOperatorContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IndexOperatorContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_indexedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexedIdentifier" ):
                listener.enterIndexedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexedIdentifier" ):
                listener.exitIndexedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexedIdentifier" ):
                return visitor.visitIndexedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def indexedIdentifier(self):

        localctx = BraketPragmasParser.IndexedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_indexedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(BraketPragmasParser.Identifier)
            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.LBRACKET:
                self.state = 998
                self.indexOperator()
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionTerminatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Constant(self):
            return self.getToken(BraketPragmasParser.Constant, 0)

        def Integer(self):
            return self.getToken(BraketPragmasParser.Integer, 0)

        def RealNumber(self):
            return self.getToken(BraketPragmasParser.RealNumber, 0)

        def ImagNumber(self):
            return self.getToken(BraketPragmasParser.ImagNumber, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(BraketPragmasParser.BooleanLiteralContext,0)


        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def StringLiteral(self):
            return self.getToken(BraketPragmasParser.StringLiteral, 0)

        def builtInCall(self):
            return self.getTypedRuleContext(BraketPragmasParser.BuiltInCallContext,0)


        def externOrSubroutineCall(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExternOrSubroutineCallContext,0)


        def timingIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.TimingIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_expressionTerminator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionTerminator" ):
                listener.enterExpressionTerminator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionTerminator" ):
                listener.exitExpressionTerminator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionTerminator" ):
                return visitor.visitExpressionTerminator(self)
            else:
                return visitor.visitChildren(self)




    def expressionTerminator(self):

        localctx = BraketPragmasParser.ExpressionTerminatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_expressionTerminator)
        try:
            self.state = 1018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1004
                self.match(BraketPragmasParser.Constant)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1005
                self.match(BraketPragmasParser.Integer)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1006
                self.match(BraketPragmasParser.RealNumber)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1007
                self.match(BraketPragmasParser.ImagNumber)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1008
                self.booleanLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1009
                self.match(BraketPragmasParser.Identifier)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1010
                self.match(BraketPragmasParser.StringLiteral)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1011
                self.builtInCall()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1012
                self.externOrSubroutineCall()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1013
                self.timingIdentifier()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1014
                self.match(BraketPragmasParser.LPAREN)
                self.state = 1015
                self.expression(0)
                self.state = 1016
                self.match(BraketPragmasParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = BraketPragmasParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__42 or _la==BraketPragmasParser.T__43):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BuiltInCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def builtInMath(self):
            return self.getTypedRuleContext(BraketPragmasParser.BuiltInMathContext,0)


        def castOperator(self):
            return self.getTypedRuleContext(BraketPragmasParser.CastOperatorContext,0)


        def SIZEOF(self):
            return self.getToken(BraketPragmasParser.SIZEOF, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_builtInCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltInCall" ):
                listener.enterBuiltInCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltInCall" ):
                listener.exitBuiltInCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBuiltInCall" ):
                return visitor.visitBuiltInCall(self)
            else:
                return visitor.visitChildren(self)




    def builtInCall(self):

        localctx = BraketPragmasParser.BuiltInCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_builtInCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__44, BraketPragmasParser.T__45, BraketPragmasParser.T__46, BraketPragmasParser.T__47, BraketPragmasParser.T__48, BraketPragmasParser.T__49, BraketPragmasParser.T__50, BraketPragmasParser.T__51, BraketPragmasParser.T__52, BraketPragmasParser.T__53, BraketPragmasParser.T__54, BraketPragmasParser.T__55]:
                self.state = 1022
                self.builtInMath()
                pass
            elif token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__80, BraketPragmasParser.T__81, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY]:
                self.state = 1023
                self.castOperator()
                pass
            elif token in [BraketPragmasParser.SIZEOF]:
                self.state = 1024
                self.match(BraketPragmasParser.SIZEOF)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1027
            self.match(BraketPragmasParser.LPAREN)
            self.state = 1028
            self.expressionList()
            self.state = 1029
            self.match(BraketPragmasParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BuiltInMathContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_builtInMath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltInMath" ):
                listener.enterBuiltInMath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltInMath" ):
                listener.exitBuiltInMath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBuiltInMath" ):
                return visitor.visitBuiltInMath(self)
            else:
                return visitor.visitChildren(self)




    def builtInMath(self):

        localctx = BraketPragmasParser.BuiltInMathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_builtInMath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalTypeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_castOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastOperator" ):
                listener.enterCastOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastOperator" ):
                listener.exitCastOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastOperator" ):
                return visitor.visitCastOperator(self)
            else:
                return visitor.visitChildren(self)




    def castOperator(self):

        localctx = BraketPragmasParser.CastOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_castOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.classicalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = BraketPragmasParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.expression(0)
            self.state = 1040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 1036
                self.match(BraketPragmasParser.COMMA)
                self.state = 1037
                self.expression(0)
                self.state = 1042
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualsExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_equalsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualsExpression" ):
                listener.enterEqualsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualsExpression" ):
                listener.exitEqualsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualsExpression" ):
                return visitor.visitEqualsExpression(self)
            else:
                return visitor.visitChildren(self)




    def equalsExpression(self):

        localctx = BraketPragmasParser.EqualsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_equalsExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.match(BraketPragmasParser.EQUALS)
            self.state = 1044
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = BraketPragmasParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            _la = self._input.LA(1)
            if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & ((1 << (BraketPragmasParser.T__56 - 57)) | (1 << (BraketPragmasParser.T__57 - 57)) | (1 << (BraketPragmasParser.T__58 - 57)) | (1 << (BraketPragmasParser.T__59 - 57)) | (1 << (BraketPragmasParser.T__60 - 57)) | (1 << (BraketPragmasParser.T__61 - 57)) | (1 << (BraketPragmasParser.T__62 - 57)) | (1 << (BraketPragmasParser.T__63 - 57)) | (1 << (BraketPragmasParser.T__64 - 57)) | (1 << (BraketPragmasParser.T__65 - 57)) | (1 << (BraketPragmasParser.T__66 - 57)) | (1 << (BraketPragmasParser.T__67 - 57)) | (1 << (BraketPragmasParser.EQUALS - 57)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscreteSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)


        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_discreteSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscreteSet" ):
                listener.enterDiscreteSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscreteSet" ):
                listener.exitDiscreteSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiscreteSet" ):
                return visitor.visitDiscreteSet(self)
            else:
                return visitor.visitChildren(self)




    def discreteSet(self):

        localctx = BraketPragmasParser.DiscreteSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_discreteSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(BraketPragmasParser.LBRACE)
            self.state = 1049
            self.expression(0)
            self.state = 1054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 1050
                self.match(BraketPragmasParser.COMMA)
                self.state = 1051
                self.expression(0)
                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1057
            self.match(BraketPragmasParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def discreteSet(self):
            return self.getTypedRuleContext(BraketPragmasParser.DiscreteSetContext,0)


        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def rangeDefinition(self):
            return self.getTypedRuleContext(BraketPragmasParser.RangeDefinitionContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_setDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetDeclaration" ):
                listener.enterSetDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetDeclaration" ):
                listener.exitSetDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetDeclaration" ):
                return visitor.visitSetDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def setDeclaration(self):

        localctx = BraketPragmasParser.SetDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_setDeclaration)
        try:
            self.state = 1065
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1059
                self.discreteSet()
                pass
            elif token in [BraketPragmasParser.LBRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1060
                self.match(BraketPragmasParser.LBRACKET)
                self.state = 1061
                self.rangeDefinition()
                self.state = 1062
                self.match(BraketPragmasParser.RBRACKET)
                pass
            elif token in [BraketPragmasParser.Identifier]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1064
                self.match(BraketPragmasParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.StatementContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.StatementContext,i)


        def controlDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ControlDirectiveContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ControlDirectiveContext,i)


        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_programBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgramBlock" ):
                listener.enterProgramBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgramBlock" ):
                listener.exitProgramBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgramBlock" ):
                return visitor.visitProgramBlock(self)
            else:
                return visitor.visitChildren(self)




    def programBlock(self):

        localctx = BraketPragmasParser.ProgramBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_programBlock)
        self._la = 0 # Token type
        try:
            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1067
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1068
                self.controlDirective()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1069
                self.match(BraketPragmasParser.LBRACE)
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__13) | (1 << BraketPragmasParser.T__16) | (1 << BraketPragmasParser.T__17) | (1 << BraketPragmasParser.T__18) | (1 << BraketPragmasParser.T__19) | (1 << BraketPragmasParser.T__20) | (1 << BraketPragmasParser.T__21) | (1 << BraketPragmasParser.T__22) | (1 << BraketPragmasParser.T__23) | (1 << BraketPragmasParser.T__24) | (1 << BraketPragmasParser.T__25) | (1 << BraketPragmasParser.T__26) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__42) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (BraketPragmasParser.T__68 - 69)) | (1 << (BraketPragmasParser.T__70 - 69)) | (1 << (BraketPragmasParser.T__72 - 69)) | (1 << (BraketPragmasParser.T__73 - 69)) | (1 << (BraketPragmasParser.T__74 - 69)) | (1 << (BraketPragmasParser.T__75 - 69)) | (1 << (BraketPragmasParser.T__76 - 69)) | (1 << (BraketPragmasParser.T__80 - 69)) | (1 << (BraketPragmasParser.T__81 - 69)) | (1 << (BraketPragmasParser.T__82 - 69)) | (1 << (BraketPragmasParser.T__83 - 69)) | (1 << (BraketPragmasParser.T__84 - 69)) | (1 << (BraketPragmasParser.T__85 - 69)) | (1 << (BraketPragmasParser.LPAREN - 69)) | (1 << (BraketPragmasParser.MINUS - 69)) | (1 << (BraketPragmasParser.ImagNumber - 69)) | (1 << (BraketPragmasParser.COMPLEX - 69)) | (1 << (BraketPragmasParser.CONST - 69)) | (1 << (BraketPragmasParser.ARRAY - 69)) | (1 << (BraketPragmasParser.SIZEOF - 69)) | (1 << (BraketPragmasParser.Constant - 69)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (BraketPragmasParser.Integer - 135)) | (1 << (BraketPragmasParser.Identifier - 135)) | (1 << (BraketPragmasParser.RealNumber - 135)) | (1 << (BraketPragmasParser.TimingLiteral - 135)) | (1 << (BraketPragmasParser.StringLiteral - 135)))) != 0):
                    self.state = 1072
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                    if la_ == 1:
                        self.state = 1070
                        self.statement()
                        pass

                    elif la_ == 2:
                        self.state = 1071
                        self.controlDirective()
                        pass


                    self.state = 1076
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1077
                self.match(BraketPragmasParser.RBRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BranchingStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def programBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ProgramBlockContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ProgramBlockContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_branchingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBranchingStatement" ):
                listener.enterBranchingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBranchingStatement" ):
                listener.exitBranchingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBranchingStatement" ):
                return visitor.visitBranchingStatement(self)
            else:
                return visitor.visitChildren(self)




    def branchingStatement(self):

        localctx = BraketPragmasParser.BranchingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_branchingStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.match(BraketPragmasParser.T__68)
            self.state = 1081
            self.match(BraketPragmasParser.LPAREN)
            self.state = 1082
            self.expression(0)
            self.state = 1083
            self.match(BraketPragmasParser.RPAREN)
            self.state = 1084
            self.programBlock()
            self.state = 1087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 1085
                self.match(BraketPragmasParser.T__69)
                self.state = 1086
                self.programBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopSignatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def setDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.SetDeclarationContext,0)


        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_loopSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopSignature" ):
                listener.enterLoopSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopSignature" ):
                listener.exitLoopSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopSignature" ):
                return visitor.visitLoopSignature(self)
            else:
                return visitor.visitChildren(self)




    def loopSignature(self):

        localctx = BraketPragmasParser.LoopSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_loopSignature)
        try:
            self.state = 1098
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1089
                self.match(BraketPragmasParser.T__70)
                self.state = 1090
                self.match(BraketPragmasParser.Identifier)
                self.state = 1091
                self.match(BraketPragmasParser.T__71)
                self.state = 1092
                self.setDeclaration()
                pass
            elif token in [BraketPragmasParser.T__72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1093
                self.match(BraketPragmasParser.T__72)
                self.state = 1094
                self.match(BraketPragmasParser.LPAREN)
                self.state = 1095
                self.expression(0)
                self.state = 1096
                self.match(BraketPragmasParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loopSignature(self):
            return self.getTypedRuleContext(BraketPragmasParser.LoopSignatureContext,0)


        def programBlock(self):
            return self.getTypedRuleContext(BraketPragmasParser.ProgramBlockContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_loopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStatement" ):
                listener.enterLoopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStatement" ):
                listener.exitLoopStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStatement" ):
                return visitor.visitLoopStatement(self)
            else:
                return visitor.visitChildren(self)




    def loopStatement(self):

        localctx = BraketPragmasParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_loopStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.loopSignature()
            self.state = 1101
            self.programBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_endStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndStatement" ):
                listener.enterEndStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndStatement" ):
                listener.exitEndStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndStatement" ):
                return visitor.visitEndStatement(self)
            else:
                return visitor.visitChildren(self)




    def endStatement(self):

        localctx = BraketPragmasParser.EndStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_endStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.match(BraketPragmasParser.T__73)
            self.state = 1104
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def quantumMeasurement(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumMeasurementContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = BraketPragmasParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(BraketPragmasParser.T__74)
            self.state = 1109
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__26, BraketPragmasParser.T__27, BraketPragmasParser.T__42, BraketPragmasParser.T__43, BraketPragmasParser.T__44, BraketPragmasParser.T__45, BraketPragmasParser.T__46, BraketPragmasParser.T__47, BraketPragmasParser.T__48, BraketPragmasParser.T__49, BraketPragmasParser.T__50, BraketPragmasParser.T__51, BraketPragmasParser.T__52, BraketPragmasParser.T__53, BraketPragmasParser.T__54, BraketPragmasParser.T__55, BraketPragmasParser.T__80, BraketPragmasParser.T__81, BraketPragmasParser.T__83, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.ImagNumber, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.SIZEOF, BraketPragmasParser.Constant, BraketPragmasParser.Integer, BraketPragmasParser.Identifier, BraketPragmasParser.RealNumber, BraketPragmasParser.TimingLiteral, BraketPragmasParser.StringLiteral]:
                self.state = 1107
                self.expression(0)
                pass
            elif token in [BraketPragmasParser.T__20]:
                self.state = 1108
                self.quantumMeasurement()
                pass
            elif token in [BraketPragmasParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 1111
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def endStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.EndStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.ReturnStatementContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_controlDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlDirective" ):
                listener.enterControlDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlDirective" ):
                listener.exitControlDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlDirective" ):
                return visitor.visitControlDirective(self)
            else:
                return visitor.visitChildren(self)




    def controlDirective(self):

        localctx = BraketPragmasParser.ControlDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_controlDirective)
        self._la = 0 # Token type
        try:
            self.state = 1117
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__75, BraketPragmasParser.T__76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1113
                _la = self._input.LA(1)
                if not(_la==BraketPragmasParser.T__75 or _la==BraketPragmasParser.T__76):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1114
                self.match(BraketPragmasParser.SEMICOLON)
                pass
            elif token in [BraketPragmasParser.T__73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1115
                self.endStatement()
                pass
            elif token in [BraketPragmasParser.T__74]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1116
                self.returnStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def classicalTypeList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalTypeListContext,0)


        def returnSignature(self):
            return self.getTypedRuleContext(BraketPragmasParser.ReturnSignatureContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_externDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternDeclaration" ):
                listener.enterExternDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternDeclaration" ):
                listener.exitExternDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternDeclaration" ):
                return visitor.visitExternDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def externDeclaration(self):

        localctx = BraketPragmasParser.ExternDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_externDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.match(BraketPragmasParser.T__77)
            self.state = 1120
            self.match(BraketPragmasParser.Identifier)
            self.state = 1121
            self.match(BraketPragmasParser.LPAREN)
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (BraketPragmasParser.T__80 - 81)) | (1 << (BraketPragmasParser.T__81 - 81)) | (1 << (BraketPragmasParser.COMPLEX - 81)) | (1 << (BraketPragmasParser.ARRAY - 81)))) != 0):
                self.state = 1122
                self.classicalTypeList()


            self.state = 1125
            self.match(BraketPragmasParser.RPAREN)
            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.ARROW:
                self.state = 1126
                self.returnSignature()


            self.state = 1129
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternOrSubroutineCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_externOrSubroutineCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternOrSubroutineCall" ):
                listener.enterExternOrSubroutineCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternOrSubroutineCall" ):
                listener.exitExternOrSubroutineCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternOrSubroutineCall" ):
                return visitor.visitExternOrSubroutineCall(self)
            else:
                return visitor.visitChildren(self)




    def externOrSubroutineCall(self):

        localctx = BraketPragmasParser.ExternOrSubroutineCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_externOrSubroutineCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(BraketPragmasParser.Identifier)
            self.state = 1132
            self.match(BraketPragmasParser.LPAREN)
            self.state = 1134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__26) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__42) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (BraketPragmasParser.T__80 - 81)) | (1 << (BraketPragmasParser.T__81 - 81)) | (1 << (BraketPragmasParser.T__83 - 81)) | (1 << (BraketPragmasParser.LPAREN - 81)) | (1 << (BraketPragmasParser.MINUS - 81)) | (1 << (BraketPragmasParser.ImagNumber - 81)) | (1 << (BraketPragmasParser.COMPLEX - 81)) | (1 << (BraketPragmasParser.ARRAY - 81)) | (1 << (BraketPragmasParser.SIZEOF - 81)) | (1 << (BraketPragmasParser.Constant - 81)) | (1 << (BraketPragmasParser.Integer - 81)) | (1 << (BraketPragmasParser.Identifier - 81)) | (1 << (BraketPragmasParser.RealNumber - 81)) | (1 << (BraketPragmasParser.TimingLiteral - 81)) | (1 << (BraketPragmasParser.StringLiteral - 81)))) != 0):
                self.state = 1133
                self.expressionList()


            self.state = 1136
            self.match(BraketPragmasParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubroutineDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def subroutineBlock(self):
            return self.getTypedRuleContext(BraketPragmasParser.SubroutineBlockContext,0)


        def anyTypeArgumentList(self):
            return self.getTypedRuleContext(BraketPragmasParser.AnyTypeArgumentListContext,0)


        def returnSignature(self):
            return self.getTypedRuleContext(BraketPragmasParser.ReturnSignatureContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_subroutineDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubroutineDefinition" ):
                listener.enterSubroutineDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubroutineDefinition" ):
                listener.exitSubroutineDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubroutineDefinition" ):
                return visitor.visitSubroutineDefinition(self)
            else:
                return visitor.visitChildren(self)




    def subroutineDefinition(self):

        localctx = BraketPragmasParser.SubroutineDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_subroutineDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.match(BraketPragmasParser.T__78)
            self.state = 1139
            self.match(BraketPragmasParser.Identifier)
            self.state = 1140
            self.match(BraketPragmasParser.LPAREN)
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__4) | (1 << BraketPragmasParser.T__5) | (1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (BraketPragmasParser.T__80 - 81)) | (1 << (BraketPragmasParser.T__81 - 81)) | (1 << (BraketPragmasParser.COMPLEX - 81)) | (1 << (BraketPragmasParser.CONST - 81)) | (1 << (BraketPragmasParser.MUTABLE - 81)))) != 0):
                self.state = 1141
                self.anyTypeArgumentList()


            self.state = 1144
            self.match(BraketPragmasParser.RPAREN)
            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.ARROW:
                self.state = 1145
                self.returnSignature()


            self.state = 1148
            self.subroutineBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubroutineBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.StatementContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.StatementContext,i)


        def returnStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.ReturnStatementContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_subroutineBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubroutineBlock" ):
                listener.enterSubroutineBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubroutineBlock" ):
                listener.exitSubroutineBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubroutineBlock" ):
                return visitor.visitSubroutineBlock(self)
            else:
                return visitor.visitChildren(self)




    def subroutineBlock(self):

        localctx = BraketPragmasParser.SubroutineBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_subroutineBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.match(BraketPragmasParser.LBRACE)
            self.state = 1154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__13) | (1 << BraketPragmasParser.T__16) | (1 << BraketPragmasParser.T__17) | (1 << BraketPragmasParser.T__18) | (1 << BraketPragmasParser.T__19) | (1 << BraketPragmasParser.T__20) | (1 << BraketPragmasParser.T__21) | (1 << BraketPragmasParser.T__22) | (1 << BraketPragmasParser.T__23) | (1 << BraketPragmasParser.T__24) | (1 << BraketPragmasParser.T__25) | (1 << BraketPragmasParser.T__26) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__42) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (BraketPragmasParser.T__68 - 69)) | (1 << (BraketPragmasParser.T__70 - 69)) | (1 << (BraketPragmasParser.T__72 - 69)) | (1 << (BraketPragmasParser.T__73 - 69)) | (1 << (BraketPragmasParser.T__80 - 69)) | (1 << (BraketPragmasParser.T__81 - 69)) | (1 << (BraketPragmasParser.T__82 - 69)) | (1 << (BraketPragmasParser.T__83 - 69)) | (1 << (BraketPragmasParser.T__84 - 69)) | (1 << (BraketPragmasParser.T__85 - 69)) | (1 << (BraketPragmasParser.LPAREN - 69)) | (1 << (BraketPragmasParser.MINUS - 69)) | (1 << (BraketPragmasParser.ImagNumber - 69)) | (1 << (BraketPragmasParser.COMPLEX - 69)) | (1 << (BraketPragmasParser.CONST - 69)) | (1 << (BraketPragmasParser.ARRAY - 69)) | (1 << (BraketPragmasParser.SIZEOF - 69)) | (1 << (BraketPragmasParser.Constant - 69)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (BraketPragmasParser.Integer - 135)) | (1 << (BraketPragmasParser.Identifier - 135)) | (1 << (BraketPragmasParser.RealNumber - 135)) | (1 << (BraketPragmasParser.TimingLiteral - 135)) | (1 << (BraketPragmasParser.StringLiteral - 135)))) != 0):
                self.state = 1151
                self.statement()
                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.T__74:
                self.state = 1157
                self.returnStatement()


            self.state = 1160
            self.match(BraketPragmasParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.StatementContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.StatementContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma" ):
                return visitor.visitPragma(self)
            else:
                return visitor.visitChildren(self)




    def pragma(self):

        localctx = BraketPragmasParser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_pragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.match(BraketPragmasParser.T__79)
            self.state = 1163
            self.match(BraketPragmasParser.LBRACE)
            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__13) | (1 << BraketPragmasParser.T__16) | (1 << BraketPragmasParser.T__17) | (1 << BraketPragmasParser.T__18) | (1 << BraketPragmasParser.T__19) | (1 << BraketPragmasParser.T__20) | (1 << BraketPragmasParser.T__21) | (1 << BraketPragmasParser.T__22) | (1 << BraketPragmasParser.T__23) | (1 << BraketPragmasParser.T__24) | (1 << BraketPragmasParser.T__25) | (1 << BraketPragmasParser.T__26) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__42) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (BraketPragmasParser.T__68 - 69)) | (1 << (BraketPragmasParser.T__70 - 69)) | (1 << (BraketPragmasParser.T__72 - 69)) | (1 << (BraketPragmasParser.T__73 - 69)) | (1 << (BraketPragmasParser.T__80 - 69)) | (1 << (BraketPragmasParser.T__81 - 69)) | (1 << (BraketPragmasParser.T__82 - 69)) | (1 << (BraketPragmasParser.T__83 - 69)) | (1 << (BraketPragmasParser.T__84 - 69)) | (1 << (BraketPragmasParser.T__85 - 69)) | (1 << (BraketPragmasParser.LPAREN - 69)) | (1 << (BraketPragmasParser.MINUS - 69)) | (1 << (BraketPragmasParser.ImagNumber - 69)) | (1 << (BraketPragmasParser.COMPLEX - 69)) | (1 << (BraketPragmasParser.CONST - 69)) | (1 << (BraketPragmasParser.ARRAY - 69)) | (1 << (BraketPragmasParser.SIZEOF - 69)) | (1 << (BraketPragmasParser.Constant - 69)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (BraketPragmasParser.Integer - 135)) | (1 << (BraketPragmasParser.Identifier - 135)) | (1 << (BraketPragmasParser.RealNumber - 135)) | (1 << (BraketPragmasParser.TimingLiteral - 135)) | (1 << (BraketPragmasParser.StringLiteral - 135)))) != 0):
                self.state = 1164
                self.statement()
                self.state = 1169
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1170
            self.match(BraketPragmasParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimingTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_timingType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingType" ):
                listener.enterTimingType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingType" ):
                listener.exitTimingType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingType" ):
                return visitor.visitTimingType(self)
            else:
                return visitor.visitChildren(self)




    def timingType(self):

        localctx = BraketPragmasParser.TimingTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_timingType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__80 or _la==BraketPragmasParser.T__81):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimingBoxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumBlock(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumBlockContext,0)


        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_timingBox

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingBox" ):
                listener.enterTimingBox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingBox" ):
                listener.exitTimingBox(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingBox" ):
                return visitor.visitTimingBox(self)
            else:
                return visitor.visitChildren(self)




    def timingBox(self):

        localctx = BraketPragmasParser.TimingBoxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_timingBox)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            self.match(BraketPragmasParser.T__82)
            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LBRACKET:
                self.state = 1175
                self.designator()


            self.state = 1178
            self.quantumBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimingIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TimingLiteral(self):
            return self.getToken(BraketPragmasParser.TimingLiteral, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def quantumBlock(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumBlockContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_timingIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingIdentifier" ):
                listener.enterTimingIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingIdentifier" ):
                listener.exitTimingIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingIdentifier" ):
                return visitor.visitTimingIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def timingIdentifier(self):

        localctx = BraketPragmasParser.TimingIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_timingIdentifier)
        try:
            self.state = 1188
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.TimingLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1180
                self.match(BraketPragmasParser.TimingLiteral)
                pass
            elif token in [BraketPragmasParser.T__83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1181
                self.match(BraketPragmasParser.T__83)
                self.state = 1182
                self.match(BraketPragmasParser.LPAREN)
                self.state = 1185
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [BraketPragmasParser.Identifier]:
                    self.state = 1183
                    self.match(BraketPragmasParser.Identifier)
                    pass
                elif token in [BraketPragmasParser.LBRACE]:
                    self.state = 1184
                    self.quantumBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1187
                self.match(BraketPragmasParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimingInstructionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_timingInstructionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingInstructionName" ):
                listener.enterTimingInstructionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingInstructionName" ):
                listener.exitTimingInstructionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingInstructionName" ):
                return visitor.visitTimingInstructionName(self)
            else:
                return visitor.visitChildren(self)




    def timingInstructionName(self):

        localctx = BraketPragmasParser.TimingInstructionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_timingInstructionName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__84 or _la==BraketPragmasParser.T__85):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimingInstructionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timingInstructionName(self):
            return self.getTypedRuleContext(BraketPragmasParser.TimingInstructionNameContext,0)


        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def indexedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IndexedIdentifierContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,i)


        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_timingInstruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingInstruction" ):
                listener.enterTimingInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingInstruction" ):
                listener.exitTimingInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingInstruction" ):
                return visitor.visitTimingInstruction(self)
            else:
                return visitor.visitChildren(self)




    def timingInstruction(self):

        localctx = BraketPragmasParser.TimingInstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_timingInstruction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.timingInstructionName()
            self.state = 1198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LPAREN:
                self.state = 1193
                self.match(BraketPragmasParser.LPAREN)
                self.state = 1195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__26) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__42) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (BraketPragmasParser.T__80 - 81)) | (1 << (BraketPragmasParser.T__81 - 81)) | (1 << (BraketPragmasParser.T__83 - 81)) | (1 << (BraketPragmasParser.LPAREN - 81)) | (1 << (BraketPragmasParser.MINUS - 81)) | (1 << (BraketPragmasParser.ImagNumber - 81)) | (1 << (BraketPragmasParser.COMPLEX - 81)) | (1 << (BraketPragmasParser.ARRAY - 81)) | (1 << (BraketPragmasParser.SIZEOF - 81)) | (1 << (BraketPragmasParser.Constant - 81)) | (1 << (BraketPragmasParser.Integer - 81)) | (1 << (BraketPragmasParser.Identifier - 81)) | (1 << (BraketPragmasParser.RealNumber - 81)) | (1 << (BraketPragmasParser.TimingLiteral - 81)) | (1 << (BraketPragmasParser.StringLiteral - 81)))) != 0):
                    self.state = 1194
                    self.expressionList()


                self.state = 1197
                self.match(BraketPragmasParser.RPAREN)


            self.state = 1200
            self.designator()
            self.state = 1201
            self.indexedIdentifier()
            self.state = 1206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 1202
                self.match(BraketPragmasParser.COMMA)
                self.state = 1203
                self.indexedIdentifier()
                self.state = 1208
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimingStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timingInstruction(self):
            return self.getTypedRuleContext(BraketPragmasParser.TimingInstructionContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def timingBox(self):
            return self.getTypedRuleContext(BraketPragmasParser.TimingBoxContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_timingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingStatement" ):
                listener.enterTimingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingStatement" ):
                listener.exitTimingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingStatement" ):
                return visitor.visitTimingStatement(self)
            else:
                return visitor.visitChildren(self)




    def timingStatement(self):

        localctx = BraketPragmasParser.TimingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_timingStatement)
        try:
            self.state = 1213
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__84, BraketPragmasParser.T__85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1209
                self.timingInstruction()
                self.state = 1210
                self.match(BraketPragmasParser.SEMICOLON)
                pass
            elif token in [BraketPragmasParser.T__82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1212
                self.timingBox()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def calibrationGrammarDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.CalibrationGrammarDeclarationContext,0)


        def calibrationDefinition(self):
            return self.getTypedRuleContext(BraketPragmasParser.CalibrationDefinitionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_calibration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibration" ):
                listener.enterCalibration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibration" ):
                listener.exitCalibration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibration" ):
                return visitor.visitCalibration(self)
            else:
                return visitor.visitChildren(self)




    def calibration(self):

        localctx = BraketPragmasParser.CalibrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_calibration)
        try:
            self.state = 1217
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1215
                self.calibrationGrammarDeclaration()
                pass
            elif token in [BraketPragmasParser.T__87]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1216
                self.calibrationDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationGrammarDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def calibrationGrammar(self):
            return self.getTypedRuleContext(BraketPragmasParser.CalibrationGrammarContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_calibrationGrammarDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationGrammarDeclaration" ):
                listener.enterCalibrationGrammarDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationGrammarDeclaration" ):
                listener.exitCalibrationGrammarDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationGrammarDeclaration" ):
                return visitor.visitCalibrationGrammarDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def calibrationGrammarDeclaration(self):

        localctx = BraketPragmasParser.CalibrationGrammarDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_calibrationGrammarDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.match(BraketPragmasParser.T__86)
            self.state = 1220
            self.calibrationGrammar()
            self.state = 1221
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def identifierList(self):
            return self.getTypedRuleContext(BraketPragmasParser.IdentifierListContext,0)


        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def returnSignature(self):
            return self.getTypedRuleContext(BraketPragmasParser.ReturnSignatureContext,0)


        def calibrationArgumentList(self):
            return self.getTypedRuleContext(BraketPragmasParser.CalibrationArgumentListContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_calibrationDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationDefinition" ):
                listener.enterCalibrationDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationDefinition" ):
                listener.exitCalibrationDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationDefinition" ):
                return visitor.visitCalibrationDefinition(self)
            else:
                return visitor.visitChildren(self)




    def calibrationDefinition(self):

        localctx = BraketPragmasParser.CalibrationDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_calibrationDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(BraketPragmasParser.T__87)
            self.state = 1224
            self.match(BraketPragmasParser.Identifier)
            self.state = 1230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LPAREN:
                self.state = 1225
                self.match(BraketPragmasParser.LPAREN)
                self.state = 1227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__26) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__42) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (BraketPragmasParser.T__80 - 81)) | (1 << (BraketPragmasParser.T__81 - 81)) | (1 << (BraketPragmasParser.T__83 - 81)) | (1 << (BraketPragmasParser.LPAREN - 81)) | (1 << (BraketPragmasParser.MINUS - 81)) | (1 << (BraketPragmasParser.ImagNumber - 81)) | (1 << (BraketPragmasParser.COMPLEX - 81)) | (1 << (BraketPragmasParser.CONST - 81)) | (1 << (BraketPragmasParser.MUTABLE - 81)) | (1 << (BraketPragmasParser.ARRAY - 81)) | (1 << (BraketPragmasParser.SIZEOF - 81)) | (1 << (BraketPragmasParser.Constant - 81)) | (1 << (BraketPragmasParser.Integer - 81)) | (1 << (BraketPragmasParser.Identifier - 81)) | (1 << (BraketPragmasParser.RealNumber - 81)) | (1 << (BraketPragmasParser.TimingLiteral - 81)) | (1 << (BraketPragmasParser.StringLiteral - 81)))) != 0):
                    self.state = 1226
                    self.calibrationArgumentList()


                self.state = 1229
                self.match(BraketPragmasParser.RPAREN)


            self.state = 1232
            self.identifierList()
            self.state = 1234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.ARROW:
                self.state = 1233
                self.returnSignature()


            self.state = 1236
            self.match(BraketPragmasParser.LBRACE)
            self.state = 1240
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1237
                    self.matchWildcard() 
                self.state = 1242
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

            self.state = 1243
            self.match(BraketPragmasParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationGrammarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(BraketPragmasParser.StringLiteral, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_calibrationGrammar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationGrammar" ):
                listener.enterCalibrationGrammar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationGrammar" ):
                listener.exitCalibrationGrammar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationGrammar" ):
                return visitor.visitCalibrationGrammar(self)
            else:
                return visitor.visitChildren(self)




    def calibrationGrammar(self):

        localctx = BraketPragmasParser.CalibrationGrammarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_calibrationGrammar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__88 or _la==BraketPragmasParser.StringLiteral):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalArgumentList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalArgumentListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_calibrationArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationArgumentList" ):
                listener.enterCalibrationArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationArgumentList" ):
                listener.exitCalibrationArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationArgumentList" ):
                return visitor.visitCalibrationArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def calibrationArgumentList(self):

        localctx = BraketPragmasParser.CalibrationArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_calibrationArgumentList)
        try:
            self.state = 1249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1247
                self.classicalArgumentList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1248
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[59] = self.aliasInitializer_sempred
        self._predicates[83] = self.expression_sempred
        self._predicates[84] = self.logicalAndExpression_sempred
        self._predicates[85] = self.bitOrExpression_sempred
        self._predicates[86] = self.xOrExpression_sempred
        self._predicates[87] = self.bitAndExpression_sempred
        self._predicates[88] = self.equalityExpression_sempred
        self._predicates[89] = self.comparisonExpression_sempred
        self._predicates[90] = self.bitShiftExpression_sempred
        self._predicates[91] = self.additiveExpression_sempred
        self._predicates[92] = self.multiplicativeExpression_sempred
        self._predicates[94] = self.powerExpression_sempred
        self._predicates[96] = self.indexExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def aliasInitializer_sempred(self, localctx:AliasInitializerContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def logicalAndExpression_sempred(self, localctx:LogicalAndExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def bitOrExpression_sempred(self, localctx:BitOrExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def xOrExpression_sempred(self, localctx:XOrExpressionContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def bitAndExpression_sempred(self, localctx:BitAndExpressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def equalityExpression_sempred(self, localctx:EqualityExpressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def comparisonExpression_sempred(self, localctx:ComparisonExpressionContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def bitShiftExpression_sempred(self, localctx:BitShiftExpressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         

    def additiveExpression_sempred(self, localctx:AdditiveExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def multiplicativeExpression_sempred(self, localctx:MultiplicativeExpressionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

    def powerExpression_sempred(self, localctx:PowerExpressionContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         

    def indexExpression_sempred(self, localctx:IndexExpressionContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         




