# Generated from BraketPragmas.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0086")
        buf.write("\u04a3\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\3\2\3\2\3\3\3\3\3\3\3\3\3\3\5\3\u0100")
        buf.write("\n\3\3\4\3\4\3\5\3\5\3\6\3\6\5\6\u0108\n\6\3\7\3\7\3\b")
        buf.write("\3\b\3\b\7\b\u010f\n\b\f\b\16\b\u0112\13\b\3\t\3\t\3\t")
        buf.write("\3\n\3\n\3\13\3\13\3\13\3\13\3\f\3\f\3\f\7\f\u0120\n\f")
        buf.write("\f\f\16\f\u0123\13\f\3\r\5\r\u0126\n\r\3\r\7\r\u0129\n")
        buf.write("\r\f\r\16\r\u012c\13\r\3\r\7\r\u012f\n\r\f\r\16\r\u0132")
        buf.write("\13\r\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\20\3\20")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\5\22\u0149\n\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\5\23\u0153\n\23\3\24\3\24\3\24\3\25\3\25\5\25\u015a")
        buf.write("\n\25\3\25\3\25\3\26\3\26\3\26\3\26\3\27\3\27\5\27\u0164")
        buf.write("\n\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\32")
        buf.write("\3\32\7\32\u0171\n\32\f\32\16\32\u0174\13\32\3\32\3\32")
        buf.write("\3\33\3\33\3\33\5\33\u017b\n\33\3\33\3\33\5\33\u017f\n")
        buf.write("\33\3\33\5\33\u0182\n\33\3\34\3\34\3\34\5\34\u0187\n\34")
        buf.write("\3\34\3\34\5\34\u018b\n\34\3\34\5\34\u018e\n\34\3\35\3")
        buf.write("\35\3\35\7\35\u0193\n\35\f\35\16\35\u0196\13\35\3\36\3")
        buf.write("\36\3\37\3\37\3 \3 \5 \u019e\n \3!\3!\3!\3!\3!\3!\5!\u01a6")
        buf.write("\n!\3!\3!\3!\3!\3!\5!\u01ad\n!\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3#\3#\3#\3#\5#\u01ba\n#\3$\3$\3$\3$\3$\3$\3$\3%\3")
        buf.write("%\5%\u01c5\n%\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3")
        buf.write("(\5(\u01d3\n(\3)\3)\3)\5)\u01d8\n)\3*\3*\3*\5*\u01dd\n")
        buf.write("*\3*\3*\5*\u01e1\n*\3*\5*\u01e4\n*\3*\5*\u01e7\n*\3+\3")
        buf.write("+\3+\3+\3+\3+\5+\u01ef\n+\3,\3,\3,\5,\u01f4\n,\3,\3,\3")
        buf.write(",\5,\u01f9\n,\7,\u01fb\n,\f,\16,\u01fe\13,\3,\3,\3-\3")
        buf.write("-\3-\3-\3-\5-\u0207\n-\5-\u0209\n-\3.\3.\3.\3.\3.\5.\u0210")
        buf.write("\n.\3/\3/\3/\7/\u0215\n/\f/\16/\u0218\13/\3/\3/\3\60\3")
        buf.write("\60\3\60\3\60\5\60\u0220\n\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\5\60\u0227\n\60\3\60\3\60\5\60\u022b\n\60\3\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u0238")
        buf.write("\n\60\3\61\3\61\3\61\7\61\u023d\n\61\f\61\16\61\u0240")
        buf.write("\13\61\3\62\3\62\5\62\u0244\n\62\3\63\3\63\3\63\7\63\u0249")
        buf.write("\n\63\f\63\16\63\u024c\13\63\3\63\3\63\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\65\7\65\u025c")
        buf.write("\n\65\f\65\16\65\u025f\13\65\3\66\5\66\u0262\n\66\3\66")
        buf.write("\3\66\5\66\u0266\n\66\3\66\3\66\5\66\u026a\n\66\3\67\3")
        buf.write("\67\3\67\3\67\38\38\38\58\u0273\n8\38\58\u0276\n8\38\3")
        buf.write("8\39\39\3:\3:\3:\7:\u027f\n:\f:\16:\u0282\13:\3:\3:\3")
        buf.write(";\3;\3;\3<\3<\3<\7<\u028c\n<\f<\16<\u028f\13<\3<\5<\u0292")
        buf.write("\n<\3=\3=\3=\3=\5=\u0298\n=\3>\3>\3>\3>\3>\5>\u029f\n")
        buf.write(">\3?\7?\u02a2\n?\f?\16?\u02a5\13?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\7?\u02ae\n?\f?\16?\u02b1\13?\5?\u02b3\n?\3@\3@\3@\3")
        buf.write("A\3A\3A\3B\3B\3B\5B\u02be\nB\3B\3B\3B\3B\5B\u02c4\nB\3")
        buf.write("C\3C\3C\3C\7C\u02ca\nC\fC\16C\u02cd\13C\5C\u02cf\nC\3")
        buf.write("D\3D\3D\5D\u02d4\nD\3D\3D\3E\3E\3E\3E\3E\3F\3F\3F\3F\3")
        buf.write("F\5F\u02e2\nF\3G\7G\u02e5\nG\fG\16G\u02e8\13G\3G\3G\3")
        buf.write("G\3G\3G\5G\u02ef\nG\3G\3G\3G\7G\u02f4\nG\fG\16G\u02f7")
        buf.write("\13G\3H\3H\3I\3I\3J\3J\3K\3K\3L\3L\3L\3M\3M\3M\3M\5M\u0308")
        buf.write("\nM\3M\3M\3M\7M\u030d\nM\fM\16M\u0310\13M\3N\3N\3N\3N")
        buf.write("\3N\3N\7N\u0318\nN\fN\16N\u031b\13N\3O\3O\3O\3O\3O\3O")
        buf.write("\7O\u0323\nO\fO\16O\u0326\13O\3P\3P\3P\3P\3P\3P\7P\u032e")
        buf.write("\nP\fP\16P\u0331\13P\3Q\3Q\3Q\3Q\3Q\3Q\7Q\u0339\nQ\fQ")
        buf.write("\16Q\u033c\13Q\3R\3R\3R\3R\3R\3R\3R\7R\u0345\nR\fR\16")
        buf.write("R\u0348\13R\3S\3S\3S\3S\3S\3S\3S\7S\u0351\nS\fS\16S\u0354")
        buf.write("\13S\3T\3T\3T\3T\3T\3T\7T\u035c\nT\fT\16T\u035f\13T\3")
        buf.write("U\3U\3U\3U\3U\3U\7U\u0367\nU\fU\16U\u036a\13U\3V\3V\3")
        buf.write("V\3V\3V\3V\7V\u0372\nV\fV\16V\u0375\13V\3W\5W\u0378\n")
        buf.write("W\3W\3W\3X\3X\3X\3X\3X\3X\7X\u0382\nX\fX\16X\u0385\13")
        buf.write("X\3Y\3Y\3Y\3Y\5Y\u038b\nY\3Y\3Y\3Y\5Y\u0390\nY\7Y\u0392")
        buf.write("\nY\fY\16Y\u0395\13Y\5Y\u0397\nY\3Y\3Y\3Z\3Z\3Z\3Z\3Z")
        buf.write("\7Z\u03a0\nZ\fZ\16Z\u03a3\13Z\3[\3[\7[\u03a7\n[\f[\16")
        buf.write("[\u03aa\13[\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3")
        buf.write("\\\3\\\3\\\3\\\5\\\u03ba\n\\\3]\3]\3^\3^\3^\5^\u03c1\n")
        buf.write("^\3^\3^\3^\3^\3_\3_\3`\3`\3a\3a\3a\7a\u03ce\na\fa\16a")
        buf.write("\u03d1\13a\3b\3b\3b\3c\3c\3d\3d\3d\3d\7d\u03dc\nd\fd\16")
        buf.write("d\u03df\13d\3d\3d\3e\3e\3e\3e\3e\3e\5e\u03e9\ne\3f\3f")
        buf.write("\3f\3f\3f\7f\u03f0\nf\ff\16f\u03f3\13f\3f\5f\u03f6\nf")
        buf.write("\3g\3g\3g\3g\3g\3g\3g\5g\u03ff\ng\3h\3h\3h\3h\3h\3h\3")
        buf.write("h\3h\3h\5h\u040a\nh\3i\3i\3i\3j\3j\3j\3k\3k\3k\5k\u0415")
        buf.write("\nk\3k\3k\3l\3l\3l\3l\5l\u041d\nl\3m\3m\3m\3m\5m\u0423")
        buf.write("\nm\3m\3m\5m\u0427\nm\3m\3m\3n\3n\3n\5n\u042e\nn\3n\3")
        buf.write("n\3o\3o\3o\3o\5o\u0436\no\3o\3o\5o\u043a\no\3o\3o\3p\3")
        buf.write("p\7p\u0440\np\fp\16p\u0443\13p\3p\5p\u0446\np\3p\3p\3")
        buf.write("q\3q\3q\7q\u044d\nq\fq\16q\u0450\13q\3q\3q\3r\3r\3s\3")
        buf.write("s\5s\u0458\ns\3s\3s\3t\3t\3t\3t\3t\5t\u0461\nt\3t\5t\u0464")
        buf.write("\nt\3u\3u\3v\3v\3v\5v\u046b\nv\3v\5v\u046e\nv\3v\3v\3")
        buf.write("v\3v\7v\u0474\nv\fv\16v\u0477\13v\3w\3w\3w\3w\5w\u047d")
        buf.write("\nw\3x\3x\5x\u0481\nx\3y\3y\3y\3y\3z\3z\3z\3z\5z\u048b")
        buf.write("\nz\3z\5z\u048e\nz\3z\3z\5z\u0492\nz\3z\3z\7z\u0496\n")
        buf.write("z\fz\16z\u0499\13z\3z\3z\3{\3{\3|\3|\5|\u04a1\n|\3|\3")
        buf.write("\u0497\17h\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ae\u00b2}\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2")
        buf.write("\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4")
        buf.write("\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6")
        buf.write("\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\2\30")
        buf.write("\3\2`a\4\2\u0080\u0080\u0082\u0082\3\2\5\6\3\2\t\n\3\2")
        buf.write("\13\16\3\2xy\4\2\23\24\u0081\u0081\3\2\34\35\4\2\36\37")
        buf.write("pp\3\2 #\3\2$%\3\2&\'\3\2+,\3\2op\3\2qs\3\2./\3\2\60;")
        buf.write("\4\2<Gmm\3\2OP\3\2TU\3\2XY\4\2\\\\\u0084\u0084\2\u04c7")
        buf.write("\2\u00f8\3\2\2\2\4\u00fa\3\2\2\2\6\u0101\3\2\2\2\b\u0103")
        buf.write("\3\2\2\2\n\u0105\3\2\2\2\f\u0109\3\2\2\2\16\u010b\3\2")
        buf.write("\2\2\20\u0113\3\2\2\2\22\u0116\3\2\2\2\24\u0118\3\2\2")
        buf.write("\2\26\u011c\3\2\2\2\30\u0125\3\2\2\2\32\u0133\3\2\2\2")
        buf.write("\34\u0137\3\2\2\2\36\u013b\3\2\2\2 \u013d\3\2\2\2\"\u0148")
        buf.write("\3\2\2\2$\u0152\3\2\2\2&\u0154\3\2\2\2(\u0159\3\2\2\2")
        buf.write("*\u015d\3\2\2\2,\u0163\3\2\2\2.\u0167\3\2\2\2\60\u016a")
        buf.write("\3\2\2\2\62\u0172\3\2\2\2\64\u0181\3\2\2\2\66\u018d\3")
        buf.write("\2\2\28\u018f\3\2\2\2:\u0197\3\2\2\2<\u0199\3\2\2\2>\u019d")
        buf.write("\3\2\2\2@\u01ac\3\2\2\2B\u01ae\3\2\2\2D\u01b9\3\2\2\2")
        buf.write("F\u01bb\3\2\2\2H\u01c4\3\2\2\2J\u01c6\3\2\2\2L\u01c9\3")
        buf.write("\2\2\2N\u01ce\3\2\2\2P\u01d4\3\2\2\2R\u01e3\3\2\2\2T\u01e8")
        buf.write("\3\2\2\2V\u01f0\3\2\2\2X\u0201\3\2\2\2Z\u020f\3\2\2\2")
        buf.write("\\\u0216\3\2\2\2^\u0237\3\2\2\2`\u0239\3\2\2\2b\u0243")
        buf.write("\3\2\2\2d\u024a\3\2\2\2f\u024f\3\2\2\2h\u0255\3\2\2\2")
        buf.write("j\u0261\3\2\2\2l\u026b\3\2\2\2n\u026f\3\2\2\2p\u0279\3")
        buf.write("\2\2\2r\u027b\3\2\2\2t\u0285\3\2\2\2v\u0291\3\2\2\2x\u0297")
        buf.write("\3\2\2\2z\u029e\3\2\2\2|\u02a3\3\2\2\2~\u02b4\3\2\2\2")
        buf.write("\u0080\u02b7\3\2\2\2\u0082\u02c3\3\2\2\2\u0084\u02c5\3")
        buf.write("\2\2\2\u0086\u02d3\3\2\2\2\u0088\u02d7\3\2\2\2\u008a\u02dc")
        buf.write("\3\2\2\2\u008c\u02e6\3\2\2\2\u008e\u02f8\3\2\2\2\u0090")
        buf.write("\u02fa\3\2\2\2\u0092\u02fc\3\2\2\2\u0094\u02fe\3\2\2\2")
        buf.write("\u0096\u0300\3\2\2\2\u0098\u0307\3\2\2\2\u009a\u0311\3")
        buf.write("\2\2\2\u009c\u031c\3\2\2\2\u009e\u0327\3\2\2\2\u00a0\u0332")
        buf.write("\3\2\2\2\u00a2\u033d\3\2\2\2\u00a4\u0349\3\2\2\2\u00a6")
        buf.write("\u0355\3\2\2\2\u00a8\u0360\3\2\2\2\u00aa\u036b\3\2\2\2")
        buf.write("\u00ac\u0377\3\2\2\2\u00ae\u037b\3\2\2\2\u00b0\u0386\3")
        buf.write("\2\2\2\u00b2\u039a\3\2\2\2\u00b4\u03a4\3\2\2\2\u00b6\u03b9")
        buf.write("\3\2\2\2\u00b8\u03bb\3\2\2\2\u00ba\u03c0\3\2\2\2\u00bc")
        buf.write("\u03c6\3\2\2\2\u00be\u03c8\3\2\2\2\u00c0\u03ca\3\2\2\2")
        buf.write("\u00c2\u03d2\3\2\2\2\u00c4\u03d5\3\2\2\2\u00c6\u03d7\3")
        buf.write("\2\2\2\u00c8\u03e8\3\2\2\2\u00ca\u03f5\3\2\2\2\u00cc\u03f7")
        buf.write("\3\2\2\2\u00ce\u0409\3\2\2\2\u00d0\u040b\3\2\2\2\u00d2")
        buf.write("\u040e\3\2\2\2\u00d4\u0411\3\2\2\2\u00d6\u041c\3\2\2\2")
        buf.write("\u00d8\u041e\3\2\2\2\u00da\u042a\3\2\2\2\u00dc\u0431\3")
        buf.write("\2\2\2\u00de\u043d\3\2\2\2\u00e0\u0449\3\2\2\2\u00e2\u0453")
        buf.write("\3\2\2\2\u00e4\u0455\3\2\2\2\u00e6\u0463\3\2\2\2\u00e8")
        buf.write("\u0465\3\2\2\2\u00ea\u0467\3\2\2\2\u00ec\u047c\3\2\2\2")
        buf.write("\u00ee\u0480\3\2\2\2\u00f0\u0482\3\2\2\2\u00f2\u0486\3")
        buf.write("\2\2\2\u00f4\u049c\3\2\2\2\u00f6\u04a0\3\2\2\2\u00f8\u00f9")
        buf.write("\5\4\3\2\u00f9\3\3\2\2\2\u00fa\u00fb\7]\2\2\u00fb\u00ff")
        buf.write("\7^\2\2\u00fc\u0100\5\6\4\2\u00fd\u0100\5\n\6\2\u00fe")
        buf.write("\u0100\5\20\t\2\u00ff\u00fc\3\2\2\2\u00ff\u00fd\3\2\2")
        buf.write("\2\u00ff\u00fe\3\2\2\2\u0100\5\3\2\2\2\u0101\u0102\5\b")
        buf.write("\5\2\u0102\7\3\2\2\2\u0103\u0104\7_\2\2\u0104\t\3\2\2")
        buf.write("\2\u0105\u0107\5\f\7\2\u0106\u0108\5\16\b\2\u0107\u0106")
        buf.write("\3\2\2\2\u0107\u0108\3\2\2\2\u0108\13\3\2\2\2\u0109\u010a")
        buf.write("\t\2\2\2\u010a\r\3\2\2\2\u010b\u0110\5\u00b4[\2\u010c")
        buf.write("\u010d\7l\2\2\u010d\u010f\5\u00b4[\2\u010e\u010c\3\2\2")
        buf.write("\2\u010f\u0112\3\2\2\2\u0110\u010e\3\2\2\2\u0110\u0111")
        buf.write("\3\2\2\2\u0111\17\3\2\2\2\u0112\u0110\3\2\2\2\u0113\u0114")
        buf.write("\5\22\n\2\u0114\u0115\5\24\13\2\u0115\21\3\2\2\2\u0116")
        buf.write("\u0117\7b\2\2\u0117\23\3\2\2\2\u0118\u0119\7\u0084\2\2")
        buf.write("\u0119\u011a\7l\2\2\u011a\u011b\7\u0084\2\2\u011b\25\3")
        buf.write("\2\2\2\u011c\u0121\5\30\r\2\u011d\u0120\5\"\22\2\u011e")
        buf.write("\u0120\5$\23\2\u011f\u011d\3\2\2\2\u011f\u011e\3\2\2\2")
        buf.write("\u0120\u0123\3\2\2\2\u0121\u011f\3\2\2\2\u0121\u0122\3")
        buf.write("\2\2\2\u0122\27\3\2\2\2\u0123\u0121\3\2\2\2\u0124\u0126")
        buf.write("\5\32\16\2\u0125\u0124\3\2\2\2\u0125\u0126\3\2\2\2\u0126")
        buf.write("\u012a\3\2\2\2\u0127\u0129\5\34\17\2\u0128\u0127\3\2\2")
        buf.write("\2\u0129\u012c\3\2\2\2\u012a\u0128\3\2\2\2\u012a\u012b")
        buf.write("\3\2\2\2\u012b\u0130\3\2\2\2\u012c\u012a\3\2\2\2\u012d")
        buf.write("\u012f\5 \21\2\u012e\u012d\3\2\2\2\u012f\u0132\3\2\2\2")
        buf.write("\u0130\u012e\3\2\2\2\u0130\u0131\3\2\2\2\u0131\31\3\2")
        buf.write("\2\2\u0132\u0130\3\2\2\2\u0133\u0134\7\3\2\2\u0134\u0135")
        buf.write("\t\3\2\2\u0135\u0136\7j\2\2\u0136\33\3\2\2\2\u0137\u0138")
        buf.write("\7\4\2\2\u0138\u0139\7\u0084\2\2\u0139\u013a\7j\2\2\u013a")
        buf.write("\35\3\2\2\2\u013b\u013c\t\4\2\2\u013c\37\3\2\2\2\u013d")
        buf.write("\u013e\5\36\20\2\u013e\u013f\5H%\2\u013f\u0140\7\u0081")
        buf.write("\2\2\u0140\u0141\7j\2\2\u0141!\3\2\2\2\u0142\u0149\5\u00dc")
        buf.write("o\2\u0143\u0149\5\u00d8m\2\u0144\u0149\5l\67\2\u0145\u0149")
        buf.write("\5\u00eex\2\u0146\u0149\5&\24\2\u0147\u0149\5\u00e0q\2")
        buf.write("\u0148\u0142\3\2\2\2\u0148\u0143\3\2\2\2\u0148\u0144\3")
        buf.write("\2\2\2\u0148\u0145\3\2\2\2\u0148\u0146\3\2\2\2\u0148\u0147")
        buf.write("\3\2\2\2\u0149#\3\2\2\2\u014a\u0153\5\u0096L\2\u014b\u0153")
        buf.write("\5,\27\2\u014c\u0153\5(\25\2\u014d\u0153\5\u00ccg\2\u014e")
        buf.write("\u0153\5\u00d0i\2\u014f\u0153\5\u00d2j\2\u0150\u0153\5")
        buf.write("f\64\2\u0151\u0153\5x=\2\u0152\u014a\3\2\2\2\u0152\u014b")
        buf.write("\3\2\2\2\u0152\u014c\3\2\2\2\u0152\u014d\3\2\2\2\u0152")
        buf.write("\u014e\3\2\2\2\u0152\u014f\3\2\2\2\u0152\u0150\3\2\2\2")
        buf.write("\u0152\u0151\3\2\2\2\u0153%\3\2\2\2\u0154\u0155\5\64\33")
        buf.write("\2\u0155\u0156\7j\2\2\u0156\'\3\2\2\2\u0157\u015a\5Z.")
        buf.write("\2\u0158\u015a\5L\'\2\u0159\u0157\3\2\2\2\u0159\u0158")
        buf.write("\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u015c\7j\2\2\u015c")
        buf.write(")\3\2\2\2\u015d\u015e\5\u00b4[\2\u015e\u015f\5\u00c4c")
        buf.write("\2\u015f\u0160\5\u0098M\2\u0160+\3\2\2\2\u0161\u0164\5")
        buf.write("*\26\2\u0162\u0164\5\u0082B\2\u0163\u0161\3\2\2\2\u0163")
        buf.write("\u0162\3\2\2\2\u0164\u0165\3\2\2\2\u0165\u0166\7j\2\2")
        buf.write("\u0166-\3\2\2\2\u0167\u0168\7n\2\2\u0168\u0169\5H%\2\u0169")
        buf.write("/\3\2\2\2\u016a\u016b\7c\2\2\u016b\u016c\5\u0098M\2\u016c")
        buf.write("\u016d\7d\2\2\u016d\61\3\2\2\2\u016e\u016f\7\u0081\2\2")
        buf.write("\u016f\u0171\7l\2\2\u0170\u016e\3\2\2\2\u0171\u0174\3")
        buf.write("\2\2\2\u0172\u0170\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0175")
        buf.write("\3\2\2\2\u0174\u0172\3\2\2\2\u0175\u0176\7\u0081\2\2\u0176")
        buf.write("\63\3\2\2\2\u0177\u0178\7\7\2\2\u0178\u017a\7\u0081\2")
        buf.write("\2\u0179\u017b\5\60\31\2\u017a\u0179\3\2\2\2\u017a\u017b")
        buf.write("\3\2\2\2\u017b\u0182\3\2\2\2\u017c\u017e\7\b\2\2\u017d")
        buf.write("\u017f\5\60\31\2\u017e\u017d\3\2\2\2\u017e\u017f\3\2\2")
        buf.write("\2\u017f\u0180\3\2\2\2\u0180\u0182\7\u0081\2\2\u0181\u0177")
        buf.write("\3\2\2\2\u0181\u017c\3\2\2\2\u0182\65\3\2\2\2\u0183\u0184")
        buf.write("\7\7\2\2\u0184\u0186\7\u0081\2\2\u0185\u0187\5\60\31\2")
        buf.write("\u0186\u0185\3\2\2\2\u0186\u0187\3\2\2\2\u0187\u018e\3")
        buf.write("\2\2\2\u0188\u018a\7\b\2\2\u0189\u018b\5\60\31\2\u018a")
        buf.write("\u0189\3\2\2\2\u018a\u018b\3\2\2\2\u018b\u018c\3\2\2\2")
        buf.write("\u018c\u018e\7\u0081\2\2\u018d\u0183\3\2\2\2\u018d\u0188")
        buf.write("\3\2\2\2\u018e\67\3\2\2\2\u018f\u0194\5\66\34\2\u0190")
        buf.write("\u0191\7l\2\2\u0191\u0193\5\66\34\2\u0192\u0190\3\2\2")
        buf.write("\2\u0193\u0196\3\2\2\2\u0194\u0192\3\2\2\2\u0194\u0195")
        buf.write("\3\2\2\2\u01959\3\2\2\2\u0196\u0194\3\2\2\2\u0197\u0198")
        buf.write("\t\5\2\2\u0198;\3\2\2\2\u0199\u019a\t\6\2\2\u019a=\3\2")
        buf.write("\2\2\u019b\u019e\7\17\2\2\u019c\u019e\5\u00e2r\2\u019d")
        buf.write("\u019b\3\2\2\2\u019d\u019c\3\2\2\2\u019e?\3\2\2\2\u019f")
        buf.write("\u01a0\5<\37\2\u01a0\u01a1\5\60\31\2\u01a1\u01ad\3\2\2")
        buf.write("\2\u01a2\u01ad\5> \2\u01a3\u01a5\5:\36\2\u01a4\u01a6\5")
        buf.write("\60\31\2\u01a5\u01a4\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6")
        buf.write("\u01ad\3\2\2\2\u01a7\u01a8\7v\2\2\u01a8\u01a9\7c\2\2\u01a9")
        buf.write("\u01aa\5J&\2\u01aa\u01ab\7d\2\2\u01ab\u01ad\3\2\2\2\u01ac")
        buf.write("\u019f\3\2\2\2\u01ac\u01a2\3\2\2\2\u01ac\u01a3\3\2\2\2")
        buf.write("\u01ac\u01a7\3\2\2\2\u01adA\3\2\2\2\u01ae\u01af\7z\2\2")
        buf.write("\u01af\u01b0\7c\2\2\u01b0\u01b1\5@!\2\u01b1\u01b2\7l\2")
        buf.write("\2\u01b2\u01b3\5\u00c0a\2\u01b3\u01b4\7d\2\2\u01b4C\3")
        buf.write("\2\2\2\u01b5\u01ba\5\u00c0a\2\u01b6\u01b7\7|\2\2\u01b7")
        buf.write("\u01b8\7m\2\2\u01b8\u01ba\5\u0098M\2\u01b9\u01b5\3\2\2")
        buf.write("\2\u01b9\u01b6\3\2\2\2\u01baE\3\2\2\2\u01bb\u01bc\7z\2")
        buf.write("\2\u01bc\u01bd\7c\2\2\u01bd\u01be\5@!\2\u01be\u01bf\7")
        buf.write("l\2\2\u01bf\u01c0\5D#\2\u01c0\u01c1\7d\2\2\u01c1G\3\2")
        buf.write("\2\2\u01c2\u01c5\5@!\2\u01c3\u01c5\5B\"\2\u01c4\u01c2")
        buf.write("\3\2\2\2\u01c4\u01c3\3\2\2\2\u01c5I\3\2\2\2\u01c6\u01c7")
        buf.write("\5<\37\2\u01c7\u01c8\5\60\31\2\u01c8K\3\2\2\2\u01c9\u01ca")
        buf.write("\7x\2\2\u01ca\u01cb\5H%\2\u01cb\u01cc\7\u0081\2\2\u01cc")
        buf.write("\u01cd\5\u00c2b\2\u01cdM\3\2\2\2\u01ce\u01cf\5<\37\2\u01cf")
        buf.write("\u01d0\5\60\31\2\u01d0\u01d2\7\u0081\2\2\u01d1\u01d3\5")
        buf.write("\u00c2b\2\u01d2\u01d1\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3")
        buf.write("O\3\2\2\2\u01d4\u01d5\5> \2\u01d5\u01d7\7\u0081\2\2\u01d6")
        buf.write("\u01d8\5\u00c2b\2\u01d7\u01d6\3\2\2\2\u01d7\u01d8\3\2")
        buf.write("\2\2\u01d8Q\3\2\2\2\u01d9\u01da\7\n\2\2\u01da\u01dc\7")
        buf.write("\u0081\2\2\u01db\u01dd\5\60\31\2\u01dc\u01db\3\2\2\2\u01dc")
        buf.write("\u01dd\3\2\2\2\u01dd\u01e4\3\2\2\2\u01de\u01e0\7\t\2\2")
        buf.write("\u01df\u01e1\5\60\31\2\u01e0\u01df\3\2\2\2\u01e0\u01e1")
        buf.write("\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e4\7\u0081\2\2\u01e3")
        buf.write("\u01d9\3\2\2\2\u01e3\u01de\3\2\2\2\u01e4\u01e6\3\2\2\2")
        buf.write("\u01e5\u01e7\5\u00c2b\2\u01e6\u01e5\3\2\2\2\u01e6\u01e7")
        buf.write("\3\2\2\2\u01e7S\3\2\2\2\u01e8\u01e9\7v\2\2\u01e9\u01ea")
        buf.write("\7c\2\2\u01ea\u01eb\5J&\2\u01eb\u01ec\7d\2\2\u01ec\u01ee")
        buf.write("\7\u0081\2\2\u01ed\u01ef\5\u00c2b\2\u01ee\u01ed\3\2\2")
        buf.write("\2\u01ee\u01ef\3\2\2\2\u01efU\3\2\2\2\u01f0\u01f3\7e\2")
        buf.write("\2\u01f1\u01f4\5\u0098M\2\u01f2\u01f4\5V,\2\u01f3\u01f1")
        buf.write("\3\2\2\2\u01f3\u01f2\3\2\2\2\u01f4\u01fc\3\2\2\2\u01f5")
        buf.write("\u01f8\7l\2\2\u01f6\u01f9\5\u0098M\2\u01f7\u01f9\5V,\2")
        buf.write("\u01f8\u01f6\3\2\2\2\u01f8\u01f7\3\2\2\2\u01f9\u01fb\3")
        buf.write("\2\2\2\u01fa\u01f5\3\2\2\2\u01fb\u01fe\3\2\2\2\u01fc\u01fa")
        buf.write("\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u01ff\3\2\2\2\u01fe")
        buf.write("\u01fc\3\2\2\2\u01ff\u0200\7f\2\2\u0200W\3\2\2\2\u0201")
        buf.write("\u0202\5B\"\2\u0202\u0208\7\u0081\2\2\u0203\u0206\7m\2")
        buf.write("\2\u0204\u0207\5V,\2\u0205\u0207\5\u0098M\2\u0206\u0204")
        buf.write("\3\2\2\2\u0206\u0205\3\2\2\2\u0207\u0209\3\2\2\2\u0208")
        buf.write("\u0203\3\2\2\2\u0208\u0209\3\2\2\2\u0209Y\3\2\2\2\u020a")
        buf.write("\u0210\5N(\2\u020b\u0210\5P)\2\u020c\u0210\5R*\2\u020d")
        buf.write("\u0210\5T+\2\u020e\u0210\5X-\2\u020f\u020a\3\2\2\2\u020f")
        buf.write("\u020b\3\2\2\2\u020f\u020c\3\2\2\2\u020f\u020d\3\2\2\2")
        buf.write("\u020f\u020e\3\2\2\2\u0210[\3\2\2\2\u0211\u0212\5H%\2")
        buf.write("\u0212\u0213\7l\2\2\u0213\u0215\3\2\2\2\u0214\u0211\3")
        buf.write("\2\2\2\u0215\u0218\3\2\2\2\u0216\u0214\3\2\2\2\u0216\u0217")
        buf.write("\3\2\2\2\u0217\u0219\3\2\2\2\u0218\u0216\3\2\2\2\u0219")
        buf.write("\u021a\5H%\2\u021a]\3\2\2\2\u021b\u021c\5<\37\2\u021c")
        buf.write("\u021d\5\60\31\2\u021d\u0220\3\2\2\2\u021e\u0220\5> \2")
        buf.write("\u021f\u021b\3\2\2\2\u021f\u021e\3\2\2\2\u0220\u0221\3")
        buf.write("\2\2\2\u0221\u0222\7\u0081\2\2\u0222\u0238\3\2\2\2\u0223")
        buf.write("\u0224\7\n\2\2\u0224\u0226\7\u0081\2\2\u0225\u0227\5\60")
        buf.write("\31\2\u0226\u0225\3\2\2\2\u0226\u0227\3\2\2\2\u0227\u0238")
        buf.write("\3\2\2\2\u0228\u022a\7\t\2\2\u0229\u022b\5\60\31\2\u022a")
        buf.write("\u0229\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u022c\3\2\2\2")
        buf.write("\u022c\u0238\7\u0081\2\2\u022d\u022e\7v\2\2\u022e\u022f")
        buf.write("\7c\2\2\u022f\u0230\5J&\2\u0230\u0231\7d\2\2\u0231\u0232")
        buf.write("\7\u0081\2\2\u0232\u0238\3\2\2\2\u0233\u0234\t\7\2\2\u0234")
        buf.write("\u0235\5F$\2\u0235\u0236\7\u0081\2\2\u0236\u0238\3\2\2")
        buf.write("\2\u0237\u021f\3\2\2\2\u0237\u0223\3\2\2\2\u0237\u0228")
        buf.write("\3\2\2\2\u0237\u022d\3\2\2\2\u0237\u0233\3\2\2\2\u0238")
        buf.write("_\3\2\2\2\u0239\u023e\5^\60\2\u023a\u023b\7l\2\2\u023b")
        buf.write("\u023d\5^\60\2\u023c\u023a\3\2\2\2\u023d\u0240\3\2\2\2")
        buf.write("\u023e\u023c\3\2\2\2\u023e\u023f\3\2\2\2\u023fa\3\2\2")
        buf.write("\2\u0240\u023e\3\2\2\2\u0241\u0244\5^\60\2\u0242\u0244")
        buf.write("\5\66\34\2\u0243\u0241\3\2\2\2\u0243\u0242\3\2\2\2\u0244")
        buf.write("c\3\2\2\2\u0245\u0246\5b\62\2\u0246\u0247\7l\2\2\u0247")
        buf.write("\u0249\3\2\2\2\u0248\u0245\3\2\2\2\u0249\u024c\3\2\2\2")
        buf.write("\u024a\u0248\3\2\2\2\u024a\u024b\3\2\2\2\u024b\u024d\3")
        buf.write("\2\2\2\u024c\u024a\3\2\2\2\u024d\u024e\5b\62\2\u024ee")
        buf.write("\3\2\2\2\u024f\u0250\7\20\2\2\u0250\u0251\7\u0081\2\2")
        buf.write("\u0251\u0252\7m\2\2\u0252\u0253\5h\65\2\u0253\u0254\7")
        buf.write("j\2\2\u0254g\3\2\2\2\u0255\u0256\b\65\1\2\u0256\u0257")
        buf.write("\5\u0098M\2\u0257\u025d\3\2\2\2\u0258\u0259\f\3\2\2\u0259")
        buf.write("\u025a\7\21\2\2\u025a\u025c\5h\65\4\u025b\u0258\3\2\2")
        buf.write("\2\u025c\u025f\3\2\2\2\u025d\u025b\3\2\2\2\u025d\u025e")
        buf.write("\3\2\2\2\u025ei\3\2\2\2\u025f\u025d\3\2\2\2\u0260\u0262")
        buf.write("\5\u0098M\2\u0261\u0260\3\2\2\2\u0261\u0262\3\2\2\2\u0262")
        buf.write("\u0263\3\2\2\2\u0263\u0265\7i\2\2\u0264\u0266\5\u0098")
        buf.write("M\2\u0265\u0264\3\2\2\2\u0265\u0266\3\2\2\2\u0266\u0269")
        buf.write("\3\2\2\2\u0267\u0268\7i\2\2\u0268\u026a\5\u0098M\2\u0269")
        buf.write("\u0267\3\2\2\2\u0269\u026a\3\2\2\2\u026ak\3\2\2\2\u026b")
        buf.write("\u026c\7\22\2\2\u026c\u026d\5n8\2\u026d\u026e\5r:\2\u026e")
        buf.write("m\3\2\2\2\u026f\u0275\5p9\2\u0270\u0272\7g\2\2\u0271\u0273")
        buf.write("\5\62\32\2\u0272\u0271\3\2\2\2\u0272\u0273\3\2\2\2\u0273")
        buf.write("\u0274\3\2\2\2\u0274\u0276\7h\2\2\u0275\u0270\3\2\2\2")
        buf.write("\u0275\u0276\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u0278\5")
        buf.write("\62\32\2\u0278o\3\2\2\2\u0279\u027a\t\b\2\2\u027aq\3\2")
        buf.write("\2\2\u027b\u0280\7e\2\2\u027c\u027f\5x=\2\u027d\u027f")
        buf.write("\5t;\2\u027e\u027c\3\2\2\2\u027e\u027d\3\2\2\2\u027f\u0282")
        buf.write("\3\2\2\2\u0280\u027e\3\2\2\2\u0280\u0281\3\2\2\2\u0281")
        buf.write("\u0283\3\2\2\2\u0282\u0280\3\2\2\2\u0283\u0284\7f\2\2")
        buf.write("\u0284s\3\2\2\2\u0285\u0286\5\u00ceh\2\u0286\u0287\5v")
        buf.write("<\2\u0287u\3\2\2\2\u0288\u0292\5x=\2\u0289\u028d\7e\2")
        buf.write("\2\u028a\u028c\5x=\2\u028b\u028a\3\2\2\2\u028c\u028f\3")
        buf.write("\2\2\2\u028d\u028b\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u0290")
        buf.write("\3\2\2\2\u028f\u028d\3\2\2\2\u0290\u0292\7f\2\2\u0291")
        buf.write("\u0288\3\2\2\2\u0291\u0289\3\2\2\2\u0292w\3\2\2\2\u0293")
        buf.write("\u0294\5z>\2\u0294\u0295\7j\2\2\u0295\u0298\3\2\2\2\u0296")
        buf.write("\u0298\5\u00ecw\2\u0297\u0293\3\2\2\2\u0297\u0296\3\2")
        buf.write("\2\2\u0298y\3\2\2\2\u0299\u029f\5\u008cG\2\u029a\u029f")
        buf.write("\5|?\2\u029b\u029f\5\u0080A\2\u029c\u029f\5~@\2\u029d")
        buf.write("\u029f\5\u0084C\2\u029e\u0299\3\2\2\2\u029e\u029a\3\2")
        buf.write("\2\2\u029e\u029b\3\2\2\2\u029e\u029c\3\2\2\2\u029e\u029d")
        buf.write("\3\2\2\2\u029f{\3\2\2\2\u02a0\u02a2\5\u0086D\2\u02a1\u02a0")
        buf.write("\3\2\2\2\u02a2\u02a5\3\2\2\2\u02a3\u02a1\3\2\2\2\u02a3")
        buf.write("\u02a4\3\2\2\2\u02a4\u02a6\3\2\2\2\u02a5\u02a3\3\2\2\2")
        buf.write("\u02a6\u02a7\7\25\2\2\u02a7\u02a8\7g\2\2\u02a8\u02a9\5")
        buf.write("\u0098M\2\u02a9\u02b2\7h\2\2\u02aa\u02af\5\u00b4[\2\u02ab")
        buf.write("\u02ac\7l\2\2\u02ac\u02ae\5\u00b4[\2\u02ad\u02ab\3\2\2")
        buf.write("\2\u02ae\u02b1\3\2\2\2\u02af\u02ad\3\2\2\2\u02af\u02b0")
        buf.write("\3\2\2\2\u02b0\u02b3\3\2\2\2\u02b1\u02af\3\2\2\2\u02b2")
        buf.write("\u02aa\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3}\3\2\2\2\u02b4")
        buf.write("\u02b5\7\26\2\2\u02b5\u02b6\5\u00b4[\2\u02b6\177\3\2\2")
        buf.write("\2\u02b7\u02b8\7\27\2\2\u02b8\u02b9\5\u00b4[\2\u02b9\u0081")
        buf.write("\3\2\2\2\u02ba\u02bd\5\u0080A\2\u02bb\u02bc\7n\2\2\u02bc")
        buf.write("\u02be\5\u00b4[\2\u02bd\u02bb\3\2\2\2\u02bd\u02be\3\2")
        buf.write("\2\2\u02be\u02c4\3\2\2\2\u02bf\u02c0\5\u00b4[\2\u02c0")
        buf.write("\u02c1\7m\2\2\u02c1\u02c2\5\u0080A\2\u02c2\u02c4\3\2\2")
        buf.write("\2\u02c3\u02ba\3\2\2\2\u02c3\u02bf\3\2\2\2\u02c4\u0083")
        buf.write("\3\2\2\2\u02c5\u02ce\7\30\2\2\u02c6\u02cb\5\u00b4[\2\u02c7")
        buf.write("\u02c8\7l\2\2\u02c8\u02ca\5\u00b4[\2\u02c9\u02c7\3\2\2")
        buf.write("\2\u02ca\u02cd\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cb\u02cc")
        buf.write("\3\2\2\2\u02cc\u02cf\3\2\2\2\u02cd\u02cb\3\2\2\2\u02ce")
        buf.write("\u02c6\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u0085\3\2\2\2")
        buf.write("\u02d0\u02d4\7\31\2\2\u02d1\u02d4\5\u0088E\2\u02d2\u02d4")
        buf.write("\5\u008aF\2\u02d3\u02d0\3\2\2\2\u02d3\u02d1\3\2\2\2\u02d3")
        buf.write("\u02d2\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d6\7\32\2")
        buf.write("\2\u02d6\u0087\3\2\2\2\u02d7\u02d8\7\33\2\2\u02d8\u02d9")
        buf.write("\7g\2\2\u02d9\u02da\5\u0098M\2\u02da\u02db\7h\2\2\u02db")
        buf.write("\u0089\3\2\2\2\u02dc\u02e1\t\t\2\2\u02dd\u02de\7g\2\2")
        buf.write("\u02de\u02df\5\u0098M\2\u02df\u02e0\7h\2\2\u02e0\u02e2")
        buf.write("\3\2\2\2\u02e1\u02dd\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2")
        buf.write("\u008b\3\2\2\2\u02e3\u02e5\5\u0086D\2\u02e4\u02e3\3\2")
        buf.write("\2\2\u02e5\u02e8\3\2\2\2\u02e6\u02e4\3\2\2\2\u02e6\u02e7")
        buf.write("\3\2\2\2\u02e7\u02e9\3\2\2\2\u02e8\u02e6\3\2\2\2\u02e9")
        buf.write("\u02ee\5p9\2\u02ea\u02eb\7g\2\2\u02eb\u02ec\5\u00c0a\2")
        buf.write("\u02ec\u02ed\7h\2\2\u02ed\u02ef\3\2\2\2\u02ee\u02ea\3")
        buf.write("\2\2\2\u02ee\u02ef\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02f5")
        buf.write("\5\u00b4[\2\u02f1\u02f2\7l\2\2\u02f2\u02f4\5\u00b4[\2")
        buf.write("\u02f3\u02f1\3\2\2\2\u02f4\u02f7\3\2\2\2\u02f5\u02f3\3")
        buf.write("\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u008d\3\2\2\2\u02f7\u02f5")
        buf.write("\3\2\2\2\u02f8\u02f9\t\n\2\2\u02f9\u008f\3\2\2\2\u02fa")
        buf.write("\u02fb\t\13\2\2\u02fb\u0091\3\2\2\2\u02fc\u02fd\t\f\2")
        buf.write("\2\u02fd\u0093\3\2\2\2\u02fe\u02ff\t\r\2\2\u02ff\u0095")
        buf.write("\3\2\2\2\u0300\u0301\5\u0098M\2\u0301\u0302\7j\2\2\u0302")
        buf.write("\u0097\3\2\2\2\u0303\u0304\bM\1\2\u0304\u0308\5\u00b6")
        buf.write("\\\2\u0305\u0308\5\u00acW\2\u0306\u0308\5\u009aN\2\u0307")
        buf.write("\u0303\3\2\2\2\u0307\u0305\3\2\2\2\u0307\u0306\3\2\2\2")
        buf.write("\u0308\u030e\3\2\2\2\u0309\u030a\f\3\2\2\u030a\u030b\7")
        buf.write("\'\2\2\u030b\u030d\5\u009aN\2\u030c\u0309\3\2\2\2\u030d")
        buf.write("\u0310\3\2\2\2\u030e\u030c\3\2\2\2\u030e\u030f\3\2\2\2")
        buf.write("\u030f\u0099\3\2\2\2\u0310\u030e\3\2\2\2\u0311\u0312\b")
        buf.write("N\1\2\u0312\u0313\5\u009cO\2\u0313\u0319\3\2\2\2\u0314")
        buf.write("\u0315\f\3\2\2\u0315\u0316\7&\2\2\u0316\u0318\5\u009c")
        buf.write("O\2\u0317\u0314\3\2\2\2\u0318\u031b\3\2\2\2\u0319\u0317")
        buf.write("\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u009b\3\2\2\2\u031b")
        buf.write("\u0319\3\2\2\2\u031c\u031d\bO\1\2\u031d\u031e\5\u009e")
        buf.write("P\2\u031e\u0324\3\2\2\2\u031f\u0320\f\3\2\2\u0320\u0321")
        buf.write("\7(\2\2\u0321\u0323\5\u009eP\2\u0322\u031f\3\2\2\2\u0323")
        buf.write("\u0326\3\2\2\2\u0324\u0322\3\2\2\2\u0324\u0325\3\2\2\2")
        buf.write("\u0325\u009d\3\2\2\2\u0326\u0324\3\2\2\2\u0327\u0328\b")
        buf.write("P\1\2\u0328\u0329\5\u00a0Q\2\u0329\u032f\3\2\2\2\u032a")
        buf.write("\u032b\f\3\2\2\u032b\u032c\7)\2\2\u032c\u032e\5\u00a0")
        buf.write("Q\2\u032d\u032a\3\2\2\2\u032e\u0331\3\2\2\2\u032f\u032d")
        buf.write("\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u009f\3\2\2\2\u0331")
        buf.write("\u032f\3\2\2\2\u0332\u0333\bQ\1\2\u0333\u0334\5\u00a2")
        buf.write("R\2\u0334\u033a\3\2\2\2\u0335\u0336\f\3\2\2\u0336\u0337")
        buf.write("\7*\2\2\u0337\u0339\5\u00a2R\2\u0338\u0335\3\2\2\2\u0339")
        buf.write("\u033c\3\2\2\2\u033a\u0338\3\2\2\2\u033a\u033b\3\2\2\2")
        buf.write("\u033b\u00a1\3\2\2\2\u033c\u033a\3\2\2\2\u033d\u033e\b")
        buf.write("R\1\2\u033e\u033f\5\u00a4S\2\u033f\u0346\3\2\2\2\u0340")
        buf.write("\u0341\f\3\2\2\u0341\u0342\5\u0092J\2\u0342\u0343\5\u00a4")
        buf.write("S\2\u0343\u0345\3\2\2\2\u0344\u0340\3\2\2\2\u0345\u0348")
        buf.write("\3\2\2\2\u0346\u0344\3\2\2\2\u0346\u0347\3\2\2\2\u0347")
        buf.write("\u00a3\3\2\2\2\u0348\u0346\3\2\2\2\u0349\u034a\bS\1\2")
        buf.write("\u034a\u034b\5\u00a6T\2\u034b\u0352\3\2\2\2\u034c\u034d")
        buf.write("\f\3\2\2\u034d\u034e\5\u0090I\2\u034e\u034f\5\u00a6T\2")
        buf.write("\u034f\u0351\3\2\2\2\u0350\u034c\3\2\2\2\u0351\u0354\3")
        buf.write("\2\2\2\u0352\u0350\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u00a5")
        buf.write("\3\2\2\2\u0354\u0352\3\2\2\2\u0355\u0356\bT\1\2\u0356")
        buf.write("\u0357\5\u00a8U\2\u0357\u035d\3\2\2\2\u0358\u0359\f\3")
        buf.write("\2\2\u0359\u035a\t\16\2\2\u035a\u035c\5\u00a8U\2\u035b")
        buf.write("\u0358\3\2\2\2\u035c\u035f\3\2\2\2\u035d\u035b\3\2\2\2")
        buf.write("\u035d\u035e\3\2\2\2\u035e\u00a7\3\2\2\2\u035f\u035d\3")
        buf.write("\2\2\2\u0360\u0361\bU\1\2\u0361\u0362\5\u00aaV\2\u0362")
        buf.write("\u0368\3\2\2\2\u0363\u0364\f\3\2\2\u0364\u0365\t\17\2")
        buf.write("\2\u0365\u0367\5\u00aaV\2\u0366\u0363\3\2\2\2\u0367\u036a")
        buf.write("\3\2\2\2\u0368\u0366\3\2\2\2\u0368\u0369\3\2\2\2\u0369")
        buf.write("\u00a9\3\2\2\2\u036a\u0368\3\2\2\2\u036b\u036c\bV\1\2")
        buf.write("\u036c\u036d\5\u00acW\2\u036d\u0373\3\2\2\2\u036e\u036f")
        buf.write("\f\3\2\2\u036f\u0370\t\20\2\2\u0370\u0372\5\u00acW\2\u0371")
        buf.write("\u036e\3\2\2\2\u0372\u0375\3\2\2\2\u0373\u0371\3\2\2\2")
        buf.write("\u0373\u0374\3\2\2\2\u0374\u00ab\3\2\2\2\u0375\u0373\3")
        buf.write("\2\2\2\u0376\u0378\5\u008eH\2\u0377\u0376\3\2\2\2\u0377")
        buf.write("\u0378\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037a\5\u00ae")
        buf.write("X\2\u037a\u00ad\3\2\2\2\u037b\u037c\bX\1\2\u037c\u037d")
        buf.write("\5\u00b2Z\2\u037d\u0383\3\2\2\2\u037e\u037f\f\3\2\2\u037f")
        buf.write("\u0380\7-\2\2\u0380\u0382\5\u00b2Z\2\u0381\u037e\3\2\2")
        buf.write("\2\u0382\u0385\3\2\2\2\u0383\u0381\3\2\2\2\u0383\u0384")
        buf.write("\3\2\2\2\u0384\u00af\3\2\2\2\u0385\u0383\3\2\2\2\u0386")
        buf.write("\u0396\7c\2\2\u0387\u0397\5\u00c6d\2\u0388\u038b\5\u0098")
        buf.write("M\2\u0389\u038b\5j\66\2\u038a\u0388\3\2\2\2\u038a\u0389")
        buf.write("\3\2\2\2\u038b\u0393\3\2\2\2\u038c\u038f\7l\2\2\u038d")
        buf.write("\u0390\5\u0098M\2\u038e\u0390\5j\66\2\u038f\u038d\3\2")
        buf.write("\2\2\u038f\u038e\3\2\2\2\u0390\u0392\3\2\2\2\u0391\u038c")
        buf.write("\3\2\2\2\u0392\u0395\3\2\2\2\u0393\u0391\3\2\2\2\u0393")
        buf.write("\u0394\3\2\2\2\u0394\u0397\3\2\2\2\u0395\u0393\3\2\2\2")
        buf.write("\u0396\u0387\3\2\2\2\u0396\u038a\3\2\2\2\u0397\u0398\3")
        buf.write("\2\2\2\u0398\u0399\7d\2\2\u0399\u00b1\3\2\2\2\u039a\u039b")
        buf.write("\bZ\1\2\u039b\u039c\5\u00b6\\\2\u039c\u03a1\3\2\2\2\u039d")
        buf.write("\u039e\f\3\2\2\u039e\u03a0\5\u00b0Y\2\u039f\u039d\3\2")
        buf.write("\2\2\u03a0\u03a3\3\2\2\2\u03a1\u039f\3\2\2\2\u03a1\u03a2")
        buf.write("\3\2\2\2\u03a2\u00b3\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a4")
        buf.write("\u03a8\7\u0081\2\2\u03a5\u03a7\5\u00b0Y\2\u03a6\u03a5")
        buf.write("\3\2\2\2\u03a7\u03aa\3\2\2\2\u03a8\u03a6\3\2\2\2\u03a8")
        buf.write("\u03a9\3\2\2\2\u03a9\u00b5\3\2\2\2\u03aa\u03a8\3\2\2\2")
        buf.write("\u03ab\u03ba\7}\2\2\u03ac\u03ba\7\u0080\2\2\u03ad\u03ba")
        buf.write("\7\u0082\2\2\u03ae\u03ba\7u\2\2\u03af\u03ba\5\u00b8]\2")
        buf.write("\u03b0\u03ba\7\u0081\2\2\u03b1\u03ba\7\u0084\2\2\u03b2")
        buf.write("\u03ba\5\u00ba^\2\u03b3\u03ba\5\u00dan\2\u03b4\u03ba\5")
        buf.write("\u00e6t\2\u03b5\u03b6\7g\2\2\u03b6\u03b7\5\u0098M\2\u03b7")
        buf.write("\u03b8\7h\2\2\u03b8\u03ba\3\2\2\2\u03b9\u03ab\3\2\2\2")
        buf.write("\u03b9\u03ac\3\2\2\2\u03b9\u03ad\3\2\2\2\u03b9\u03ae\3")
        buf.write("\2\2\2\u03b9\u03af\3\2\2\2\u03b9\u03b0\3\2\2\2\u03b9\u03b1")
        buf.write("\3\2\2\2\u03b9\u03b2\3\2\2\2\u03b9\u03b3\3\2\2\2\u03b9")
        buf.write("\u03b4\3\2\2\2\u03b9\u03b5\3\2\2\2\u03ba\u00b7\3\2\2\2")
        buf.write("\u03bb\u03bc\t\21\2\2\u03bc\u00b9\3\2\2\2\u03bd\u03c1")
        buf.write("\5\u00bc_\2\u03be\u03c1\5\u00be`\2\u03bf\u03c1\7{\2\2")
        buf.write("\u03c0\u03bd\3\2\2\2\u03c0\u03be\3\2\2\2\u03c0\u03bf\3")
        buf.write("\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c3\7g\2\2\u03c3\u03c4")
        buf.write("\5\u00c0a\2\u03c4\u03c5\7h\2\2\u03c5\u00bb\3\2\2\2\u03c6")
        buf.write("\u03c7\t\22\2\2\u03c7\u00bd\3\2\2\2\u03c8\u03c9\5H%\2")
        buf.write("\u03c9\u00bf\3\2\2\2\u03ca\u03cf\5\u0098M\2\u03cb\u03cc")
        buf.write("\7l\2\2\u03cc\u03ce\5\u0098M\2\u03cd\u03cb\3\2\2\2\u03ce")
        buf.write("\u03d1\3\2\2\2\u03cf\u03cd\3\2\2\2\u03cf\u03d0\3\2\2\2")
        buf.write("\u03d0\u00c1\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d2\u03d3\7")
        buf.write("m\2\2\u03d3\u03d4\5\u0098M\2\u03d4\u00c3\3\2\2\2\u03d5")
        buf.write("\u03d6\t\23\2\2\u03d6\u00c5\3\2\2\2\u03d7\u03d8\7e\2\2")
        buf.write("\u03d8\u03dd\5\u0098M\2\u03d9\u03da\7l\2\2\u03da\u03dc")
        buf.write("\5\u0098M\2\u03db\u03d9\3\2\2\2\u03dc\u03df\3\2\2\2\u03dd")
        buf.write("\u03db\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03e0\3\2\2\2")
        buf.write("\u03df\u03dd\3\2\2\2\u03e0\u03e1\7f\2\2\u03e1\u00c7\3")
        buf.write("\2\2\2\u03e2\u03e9\5\u00c6d\2\u03e3\u03e4\7c\2\2\u03e4")
        buf.write("\u03e5\5j\66\2\u03e5\u03e6\7d\2\2\u03e6\u03e9\3\2\2\2")
        buf.write("\u03e7\u03e9\7\u0081\2\2\u03e8\u03e2\3\2\2\2\u03e8\u03e3")
        buf.write("\3\2\2\2\u03e8\u03e7\3\2\2\2\u03e9\u00c9\3\2\2\2\u03ea")
        buf.write("\u03f6\5$\23\2\u03eb\u03f6\5\u00d6l\2\u03ec\u03f1\7e\2")
        buf.write("\2\u03ed\u03f0\5$\23\2\u03ee\u03f0\5\u00d6l\2\u03ef\u03ed")
        buf.write("\3\2\2\2\u03ef\u03ee\3\2\2\2\u03f0\u03f3\3\2\2\2\u03f1")
        buf.write("\u03ef\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f4\3\2\2\2")
        buf.write("\u03f3\u03f1\3\2\2\2\u03f4\u03f6\7f\2\2\u03f5\u03ea\3")
        buf.write("\2\2\2\u03f5\u03eb\3\2\2\2\u03f5\u03ec\3\2\2\2\u03f6\u00cb")
        buf.write("\3\2\2\2\u03f7\u03f8\7H\2\2\u03f8\u03f9\7g\2\2\u03f9\u03fa")
        buf.write("\5\u0098M\2\u03fa\u03fb\7h\2\2\u03fb\u03fe\5\u00caf\2")
        buf.write("\u03fc\u03fd\7I\2\2\u03fd\u03ff\5\u00caf\2\u03fe\u03fc")
        buf.write("\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u00cd\3\2\2\2\u0400")
        buf.write("\u0401\7J\2\2\u0401\u0402\7\u0081\2\2\u0402\u0403\7K\2")
        buf.write("\2\u0403\u040a\5\u00c8e\2\u0404\u0405\7L\2\2\u0405\u0406")
        buf.write("\7g\2\2\u0406\u0407\5\u0098M\2\u0407\u0408\7h\2\2\u0408")
        buf.write("\u040a\3\2\2\2\u0409\u0400\3\2\2\2\u0409\u0404\3\2\2\2")
        buf.write("\u040a\u00cf\3\2\2\2\u040b\u040c\5\u00ceh\2\u040c\u040d")
        buf.write("\5\u00caf\2\u040d\u00d1\3\2\2\2\u040e\u040f\7M\2\2\u040f")
        buf.write("\u0410\7j\2\2\u0410\u00d3\3\2\2\2\u0411\u0414\7N\2\2\u0412")
        buf.write("\u0415\5\u0098M\2\u0413\u0415\5\u0080A\2\u0414\u0412\3")
        buf.write("\2\2\2\u0414\u0413\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0416")
        buf.write("\3\2\2\2\u0416\u0417\7j\2\2\u0417\u00d5\3\2\2\2\u0418")
        buf.write("\u0419\t\24\2\2\u0419\u041d\7j\2\2\u041a\u041d\5\u00d2")
        buf.write("j\2\u041b\u041d\5\u00d4k\2\u041c\u0418\3\2\2\2\u041c\u041a")
        buf.write("\3\2\2\2\u041c\u041b\3\2\2\2\u041d\u00d7\3\2\2\2\u041e")
        buf.write("\u041f\7Q\2\2\u041f\u0420\7\u0081\2\2\u0420\u0422\7g\2")
        buf.write("\2\u0421\u0423\5\\/\2\u0422\u0421\3\2\2\2\u0422\u0423")
        buf.write("\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0426\7h\2\2\u0425")
        buf.write("\u0427\5.\30\2\u0426\u0425\3\2\2\2\u0426\u0427\3\2\2\2")
        buf.write("\u0427\u0428\3\2\2\2\u0428\u0429\7j\2\2\u0429\u00d9\3")
        buf.write("\2\2\2\u042a\u042b\7\u0081\2\2\u042b\u042d\7g\2\2\u042c")
        buf.write("\u042e\5\u00c0a\2\u042d\u042c\3\2\2\2\u042d\u042e\3\2")
        buf.write("\2\2\u042e\u042f\3\2\2\2\u042f\u0430\7h\2\2\u0430\u00db")
        buf.write("\3\2\2\2\u0431\u0432\7R\2\2\u0432\u0433\7\u0081\2\2\u0433")
        buf.write("\u0435\7g\2\2\u0434\u0436\5d\63\2\u0435\u0434\3\2\2\2")
        buf.write("\u0435\u0436\3\2\2\2\u0436\u0437\3\2\2\2\u0437\u0439\7")
        buf.write("h\2\2\u0438\u043a\5.\30\2\u0439\u0438\3\2\2\2\u0439\u043a")
        buf.write("\3\2\2\2\u043a\u043b\3\2\2\2\u043b\u043c\5\u00dep\2\u043c")
        buf.write("\u00dd\3\2\2\2\u043d\u0441\7e\2\2\u043e\u0440\5$\23\2")
        buf.write("\u043f\u043e\3\2\2\2\u0440\u0443\3\2\2\2\u0441\u043f\3")
        buf.write("\2\2\2\u0441\u0442\3\2\2\2\u0442\u0445\3\2\2\2\u0443\u0441")
        buf.write("\3\2\2\2\u0444\u0446\5\u00d4k\2\u0445\u0444\3\2\2\2\u0445")
        buf.write("\u0446\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u0448\7f\2\2")
        buf.write("\u0448\u00df\3\2\2\2\u0449\u044a\7S\2\2\u044a\u044e\7")
        buf.write("e\2\2\u044b\u044d\5$\23\2\u044c\u044b\3\2\2\2\u044d\u0450")
        buf.write("\3\2\2\2\u044e\u044c\3\2\2\2\u044e\u044f\3\2\2\2\u044f")
        buf.write("\u0451\3\2\2\2\u0450\u044e\3\2\2\2\u0451\u0452\7f\2\2")
        buf.write("\u0452\u00e1\3\2\2\2\u0453\u0454\t\25\2\2\u0454\u00e3")
        buf.write("\3\2\2\2\u0455\u0457\7V\2\2\u0456\u0458\5\60\31\2\u0457")
        buf.write("\u0456\3\2\2\2\u0457\u0458\3\2\2\2\u0458\u0459\3\2\2\2")
        buf.write("\u0459\u045a\5r:\2\u045a\u00e5\3\2\2\2\u045b\u0464\7\u0083")
        buf.write("\2\2\u045c\u045d\7W\2\2\u045d\u0460\7g\2\2\u045e\u0461")
        buf.write("\7\u0081\2\2\u045f\u0461\5r:\2\u0460\u045e\3\2\2\2\u0460")
        buf.write("\u045f\3\2\2\2\u0461\u0462\3\2\2\2\u0462\u0464\7h\2\2")
        buf.write("\u0463\u045b\3\2\2\2\u0463\u045c\3\2\2\2\u0464\u00e7\3")
        buf.write("\2\2\2\u0465\u0466\t\26\2\2\u0466\u00e9\3\2\2\2\u0467")
        buf.write("\u046d\5\u00e8u\2\u0468\u046a\7g\2\2\u0469\u046b\5\u00c0")
        buf.write("a\2\u046a\u0469\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u046c")
        buf.write("\3\2\2\2\u046c\u046e\7h\2\2\u046d\u0468\3\2\2\2\u046d")
        buf.write("\u046e\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0470\5\60\31")
        buf.write("\2\u0470\u0475\5\u00b4[\2\u0471\u0472\7l\2\2\u0472\u0474")
        buf.write("\5\u00b4[\2\u0473\u0471\3\2\2\2\u0474\u0477\3\2\2\2\u0475")
        buf.write("\u0473\3\2\2\2\u0475\u0476\3\2\2\2\u0476\u00eb\3\2\2\2")
        buf.write("\u0477\u0475\3\2\2\2\u0478\u0479\5\u00eav\2\u0479\u047a")
        buf.write("\7j\2\2\u047a\u047d\3\2\2\2\u047b\u047d\5\u00e4s\2\u047c")
        buf.write("\u0478\3\2\2\2\u047c\u047b\3\2\2\2\u047d\u00ed\3\2\2\2")
        buf.write("\u047e\u0481\5\u00f0y\2\u047f\u0481\5\u00f2z\2\u0480\u047e")
        buf.write("\3\2\2\2\u0480\u047f\3\2\2\2\u0481\u00ef\3\2\2\2\u0482")
        buf.write("\u0483\7Z\2\2\u0483\u0484\5\u00f4{\2\u0484\u0485\7j\2")
        buf.write("\2\u0485\u00f1\3\2\2\2\u0486\u0487\7[\2\2\u0487\u048d")
        buf.write("\7\u0081\2\2\u0488\u048a\7g\2\2\u0489\u048b\5\u00f6|\2")
        buf.write("\u048a\u0489\3\2\2\2\u048a\u048b\3\2\2\2\u048b\u048c\3")
        buf.write("\2\2\2\u048c\u048e\7h\2\2\u048d\u0488\3\2\2\2\u048d\u048e")
        buf.write("\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0491\5\62\32\2\u0490")
        buf.write("\u0492\5.\30\2\u0491\u0490\3\2\2\2\u0491\u0492\3\2\2\2")
        buf.write("\u0492\u0493\3\2\2\2\u0493\u0497\7e\2\2\u0494\u0496\13")
        buf.write("\2\2\2\u0495\u0494\3\2\2\2\u0496\u0499\3\2\2\2\u0497\u0498")
        buf.write("\3\2\2\2\u0497\u0495\3\2\2\2\u0498\u049a\3\2\2\2\u0499")
        buf.write("\u0497\3\2\2\2\u049a\u049b\7f\2\2\u049b\u00f3\3\2\2\2")
        buf.write("\u049c\u049d\t\27\2\2\u049d\u00f5\3\2\2\2\u049e\u04a1")
        buf.write("\5`\61\2\u049f\u04a1\5\u00c0a\2\u04a0\u049e\3\2\2\2\u04a0")
        buf.write("\u049f\3\2\2\2\u04a1\u00f7\3\2\2\2|\u00ff\u0107\u0110")
        buf.write("\u011f\u0121\u0125\u012a\u0130\u0148\u0152\u0159\u0163")
        buf.write("\u0172\u017a\u017e\u0181\u0186\u018a\u018d\u0194\u019d")
        buf.write("\u01a5\u01ac\u01b9\u01c4\u01d2\u01d7\u01dc\u01e0\u01e3")
        buf.write("\u01e6\u01ee\u01f3\u01f8\u01fc\u0206\u0208\u020f\u0216")
        buf.write("\u021f\u0226\u022a\u0237\u023e\u0243\u024a\u025d\u0261")
        buf.write("\u0265\u0269\u0272\u0275\u027e\u0280\u028d\u0291\u0297")
        buf.write("\u029e\u02a3\u02af\u02b2\u02bd\u02c3\u02cb\u02ce\u02d3")
        buf.write("\u02e1\u02e6\u02ee\u02f5\u0307\u030e\u0319\u0324\u032f")
        buf.write("\u033a\u0346\u0352\u035d\u0368\u0373\u0377\u0383\u038a")
        buf.write("\u038f\u0393\u0396\u03a1\u03a8\u03b9\u03c0\u03cf\u03dd")
        buf.write("\u03e8\u03ef\u03f1\u03f5\u03fe\u0409\u0414\u041c\u0422")
        buf.write("\u0426\u042d\u0435\u0439\u0441\u0445\u044e\u0457\u0460")
        buf.write("\u0463\u046a\u046d\u0475\u047c\u0480\u048a\u048d\u0491")
        buf.write("\u0497\u04a0")
        return buf.getvalue()


class BraketPragmasParser ( Parser ):

    grammarFileName = "BraketPragmas.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'OPENQASM'", "'include'", "'input'", 
                     "'output'", "'qreg'", "'qubit'", "'bit'", "'creg'", 
                     "'int'", "'uint'", "'float'", "'angle'", "'bool'", 
                     "'let'", "'++'", "'gate'", "'U'", "'CX'", "'gphase'", 
                     "'reset'", "'measure'", "'barrier'", "'inv'", "'@'", 
                     "'pow'", "'ctrl'", "'negctrl'", "'~'", "'!'", "'>'", 
                     "'<'", "'>='", "'<='", "'=='", "'!='", "'&&'", "'||'", 
                     "'|'", "'^'", "'&'", "'<<'", "'>>'", "'**'", "'true'", 
                     "'false'", "'arcsin'", "'sin'", "'arccos'", "'cos'", 
                     "'arctan'", "'tan'", "'exp'", "'ln'", "'sqrt'", "'rotl'", 
                     "'rotr'", "'popcount'", "'+='", "'-='", "'*='", "'/='", 
                     "'&='", "'|='", "'~='", "'^='", "'<<='", "'>>='", "'%='", 
                     "'**='", "'if'", "'else'", "'for'", "'in'", "'while'", 
                     "'end'", "'return'", "'break'", "'continue'", "'extern'", 
                     "'def'", "'#pragma'", "'duration'", "'stretch'", "'box'", 
                     "'durationof'", "'delay'", "'rotary'", "'defcalgrammar'", 
                     "'defcal'", "'\"openpulse\"'", "'braket'", "'result'", 
                     "'state_vector'", "'probability'", "'density_matrix'", 
                     "'amplitude'", "'['", "']'", "'{'", "'}'", "'('", "')'", 
                     "':'", "';'", "'.'", "','", "'='", "'->'", "'+'", "'-'", 
                     "'*'", "'/'", "'%'", "'im'", "<INVALID>", "'complex'", 
                     "'#'", "'const'", "'mutable'", "'array'", "'sizeof'", 
                     "'#dim'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "BRAKET", "RESULT", 
                      "STATE_VECTOR", "PROBABILITY", "DENSITY_MATRIX", "AMPLITUDE", 
                      "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "LPAREN", 
                      "RPAREN", "COLON", "SEMICOLON", "DOT", "COMMA", "EQUALS", 
                      "ARROW", "PLUS", "MINUS", "MUL", "DIV", "MOD", "IMAG", 
                      "ImagNumber", "COMPLEX", "HASH", "CONST", "MUTABLE", 
                      "ARRAY", "SIZEOF", "DIM", "Constant", "Whitespace", 
                      "Newline", "Integer", "Identifier", "RealNumber", 
                      "TimingLiteral", "StringLiteral", "LineComment", "BlockComment" ]

    RULE_braketPragma = 0
    RULE_braketResultPragma = 1
    RULE_noArgResultType = 2
    RULE_noArgResultTypeName = 3
    RULE_optionalMultiTargetResultType = 4
    RULE_optionalMultiTargetResultTypeName = 5
    RULE_multiTarget = 6
    RULE_multiStateResultType = 7
    RULE_multiStateResultTypeName = 8
    RULE_multiState = 9
    RULE_program = 10
    RULE_header = 11
    RULE_version = 12
    RULE_include = 13
    RULE_ioIdentifier = 14
    RULE_io = 15
    RULE_globalStatement = 16
    RULE_statement = 17
    RULE_quantumDeclarationStatement = 18
    RULE_classicalDeclarationStatement = 19
    RULE_classicalAssignment = 20
    RULE_assignmentStatement = 21
    RULE_returnSignature = 22
    RULE_designator = 23
    RULE_identifierList = 24
    RULE_quantumDeclaration = 25
    RULE_quantumArgument = 26
    RULE_quantumArgumentList = 27
    RULE_bitType = 28
    RULE_singleDesignatorType = 29
    RULE_noDesignatorType = 30
    RULE_nonArrayType = 31
    RULE_arrayType = 32
    RULE_arrayReferenceTypeDimensionSpecifier = 33
    RULE_arrayReferenceType = 34
    RULE_classicalType = 35
    RULE_numericType = 36
    RULE_constantDeclaration = 37
    RULE_singleDesignatorDeclaration = 38
    RULE_noDesignatorDeclaration = 39
    RULE_bitDeclaration = 40
    RULE_complexDeclaration = 41
    RULE_arrayInitializer = 42
    RULE_arrayDeclaration = 43
    RULE_classicalDeclaration = 44
    RULE_classicalTypeList = 45
    RULE_classicalArgument = 46
    RULE_classicalArgumentList = 47
    RULE_anyTypeArgument = 48
    RULE_anyTypeArgumentList = 49
    RULE_aliasStatement = 50
    RULE_aliasInitializer = 51
    RULE_rangeDefinition = 52
    RULE_quantumGateDefinition = 53
    RULE_quantumGateSignature = 54
    RULE_quantumGateName = 55
    RULE_quantumBlock = 56
    RULE_quantumLoop = 57
    RULE_quantumLoopBlock = 58
    RULE_quantumStatement = 59
    RULE_quantumInstruction = 60
    RULE_quantumPhase = 61
    RULE_quantumReset = 62
    RULE_quantumMeasurement = 63
    RULE_quantumMeasurementAssignment = 64
    RULE_quantumBarrier = 65
    RULE_quantumGateModifier = 66
    RULE_powModifier = 67
    RULE_ctrlModifier = 68
    RULE_quantumGateCall = 69
    RULE_unaryOperator = 70
    RULE_comparisonOperator = 71
    RULE_equalityOperator = 72
    RULE_logicalOperator = 73
    RULE_expressionStatement = 74
    RULE_expression = 75
    RULE_logicalAndExpression = 76
    RULE_bitOrExpression = 77
    RULE_xOrExpression = 78
    RULE_bitAndExpression = 79
    RULE_equalityExpression = 80
    RULE_comparisonExpression = 81
    RULE_bitShiftExpression = 82
    RULE_additiveExpression = 83
    RULE_multiplicativeExpression = 84
    RULE_unaryExpression = 85
    RULE_powerExpression = 86
    RULE_indexOperator = 87
    RULE_indexExpression = 88
    RULE_indexedIdentifier = 89
    RULE_expressionTerminator = 90
    RULE_booleanLiteral = 91
    RULE_builtInCall = 92
    RULE_builtInMath = 93
    RULE_castOperator = 94
    RULE_expressionList = 95
    RULE_equalsExpression = 96
    RULE_assignmentOperator = 97
    RULE_discreteSet = 98
    RULE_setDeclaration = 99
    RULE_programBlock = 100
    RULE_branchingStatement = 101
    RULE_loopSignature = 102
    RULE_loopStatement = 103
    RULE_endStatement = 104
    RULE_returnStatement = 105
    RULE_controlDirective = 106
    RULE_externDeclaration = 107
    RULE_externOrSubroutineCall = 108
    RULE_subroutineDefinition = 109
    RULE_subroutineBlock = 110
    RULE_pragma = 111
    RULE_timingType = 112
    RULE_timingBox = 113
    RULE_timingIdentifier = 114
    RULE_timingInstructionName = 115
    RULE_timingInstruction = 116
    RULE_timingStatement = 117
    RULE_calibration = 118
    RULE_calibrationGrammarDeclaration = 119
    RULE_calibrationDefinition = 120
    RULE_calibrationGrammar = 121
    RULE_calibrationArgumentList = 122

    ruleNames =  [ "braketPragma", "braketResultPragma", "noArgResultType", 
                   "noArgResultTypeName", "optionalMultiTargetResultType", 
                   "optionalMultiTargetResultTypeName", "multiTarget", "multiStateResultType", 
                   "multiStateResultTypeName", "multiState", "program", 
                   "header", "version", "include", "ioIdentifier", "io", 
                   "globalStatement", "statement", "quantumDeclarationStatement", 
                   "classicalDeclarationStatement", "classicalAssignment", 
                   "assignmentStatement", "returnSignature", "designator", 
                   "identifierList", "quantumDeclaration", "quantumArgument", 
                   "quantumArgumentList", "bitType", "singleDesignatorType", 
                   "noDesignatorType", "nonArrayType", "arrayType", "arrayReferenceTypeDimensionSpecifier", 
                   "arrayReferenceType", "classicalType", "numericType", 
                   "constantDeclaration", "singleDesignatorDeclaration", 
                   "noDesignatorDeclaration", "bitDeclaration", "complexDeclaration", 
                   "arrayInitializer", "arrayDeclaration", "classicalDeclaration", 
                   "classicalTypeList", "classicalArgument", "classicalArgumentList", 
                   "anyTypeArgument", "anyTypeArgumentList", "aliasStatement", 
                   "aliasInitializer", "rangeDefinition", "quantumGateDefinition", 
                   "quantumGateSignature", "quantumGateName", "quantumBlock", 
                   "quantumLoop", "quantumLoopBlock", "quantumStatement", 
                   "quantumInstruction", "quantumPhase", "quantumReset", 
                   "quantumMeasurement", "quantumMeasurementAssignment", 
                   "quantumBarrier", "quantumGateModifier", "powModifier", 
                   "ctrlModifier", "quantumGateCall", "unaryOperator", "comparisonOperator", 
                   "equalityOperator", "logicalOperator", "expressionStatement", 
                   "expression", "logicalAndExpression", "bitOrExpression", 
                   "xOrExpression", "bitAndExpression", "equalityExpression", 
                   "comparisonExpression", "bitShiftExpression", "additiveExpression", 
                   "multiplicativeExpression", "unaryExpression", "powerExpression", 
                   "indexOperator", "indexExpression", "indexedIdentifier", 
                   "expressionTerminator", "booleanLiteral", "builtInCall", 
                   "builtInMath", "castOperator", "expressionList", "equalsExpression", 
                   "assignmentOperator", "discreteSet", "setDeclaration", 
                   "programBlock", "branchingStatement", "loopSignature", 
                   "loopStatement", "endStatement", "returnStatement", "controlDirective", 
                   "externDeclaration", "externOrSubroutineCall", "subroutineDefinition", 
                   "subroutineBlock", "pragma", "timingType", "timingBox", 
                   "timingIdentifier", "timingInstructionName", "timingInstruction", 
                   "timingStatement", "calibration", "calibrationGrammarDeclaration", 
                   "calibrationDefinition", "calibrationGrammar", "calibrationArgumentList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    BRAKET=91
    RESULT=92
    STATE_VECTOR=93
    PROBABILITY=94
    DENSITY_MATRIX=95
    AMPLITUDE=96
    LBRACKET=97
    RBRACKET=98
    LBRACE=99
    RBRACE=100
    LPAREN=101
    RPAREN=102
    COLON=103
    SEMICOLON=104
    DOT=105
    COMMA=106
    EQUALS=107
    ARROW=108
    PLUS=109
    MINUS=110
    MUL=111
    DIV=112
    MOD=113
    IMAG=114
    ImagNumber=115
    COMPLEX=116
    HASH=117
    CONST=118
    MUTABLE=119
    ARRAY=120
    SIZEOF=121
    DIM=122
    Constant=123
    Whitespace=124
    Newline=125
    Integer=126
    Identifier=127
    RealNumber=128
    TimingLiteral=129
    StringLiteral=130
    LineComment=131
    BlockComment=132

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class BraketPragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def braketResultPragma(self):
            return self.getTypedRuleContext(BraketPragmasParser.BraketResultPragmaContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_braketPragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraketPragma" ):
                listener.enterBraketPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraketPragma" ):
                listener.exitBraketPragma(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBraketPragma" ):
                return visitor.visitBraketPragma(self)
            else:
                return visitor.visitChildren(self)




    def braketPragma(self):

        localctx = BraketPragmasParser.BraketPragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_braketPragma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.braketResultPragma()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BraketResultPragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRAKET(self):
            return self.getToken(BraketPragmasParser.BRAKET, 0)

        def RESULT(self):
            return self.getToken(BraketPragmasParser.RESULT, 0)

        def noArgResultType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NoArgResultTypeContext,0)


        def optionalMultiTargetResultType(self):
            return self.getTypedRuleContext(BraketPragmasParser.OptionalMultiTargetResultTypeContext,0)


        def multiStateResultType(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiStateResultTypeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_braketResultPragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraketResultPragma" ):
                listener.enterBraketResultPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraketResultPragma" ):
                listener.exitBraketResultPragma(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBraketResultPragma" ):
                return visitor.visitBraketResultPragma(self)
            else:
                return visitor.visitChildren(self)




    def braketResultPragma(self):

        localctx = BraketPragmasParser.BraketResultPragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_braketResultPragma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(BraketPragmasParser.BRAKET)
            self.state = 249
            self.match(BraketPragmasParser.RESULT)
            self.state = 253
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.STATE_VECTOR]:
                self.state = 250
                self.noArgResultType()
                pass
            elif token in [BraketPragmasParser.PROBABILITY, BraketPragmasParser.DENSITY_MATRIX]:
                self.state = 251
                self.optionalMultiTargetResultType()
                pass
            elif token in [BraketPragmasParser.AMPLITUDE]:
                self.state = 252
                self.multiStateResultType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoArgResultTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noArgResultTypeName(self):
            return self.getTypedRuleContext(BraketPragmasParser.NoArgResultTypeNameContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_noArgResultType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoArgResultType" ):
                listener.enterNoArgResultType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoArgResultType" ):
                listener.exitNoArgResultType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoArgResultType" ):
                return visitor.visitNoArgResultType(self)
            else:
                return visitor.visitChildren(self)




    def noArgResultType(self):

        localctx = BraketPragmasParser.NoArgResultTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_noArgResultType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.noArgResultTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoArgResultTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATE_VECTOR(self):
            return self.getToken(BraketPragmasParser.STATE_VECTOR, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_noArgResultTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoArgResultTypeName" ):
                listener.enterNoArgResultTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoArgResultTypeName" ):
                listener.exitNoArgResultTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoArgResultTypeName" ):
                return visitor.visitNoArgResultTypeName(self)
            else:
                return visitor.visitChildren(self)




    def noArgResultTypeName(self):

        localctx = BraketPragmasParser.NoArgResultTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_noArgResultTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.match(BraketPragmasParser.STATE_VECTOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalMultiTargetResultTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionalMultiTargetResultTypeName(self):
            return self.getTypedRuleContext(BraketPragmasParser.OptionalMultiTargetResultTypeNameContext,0)


        def multiTarget(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiTargetContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_optionalMultiTargetResultType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalMultiTargetResultType" ):
                listener.enterOptionalMultiTargetResultType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalMultiTargetResultType" ):
                listener.exitOptionalMultiTargetResultType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalMultiTargetResultType" ):
                return visitor.visitOptionalMultiTargetResultType(self)
            else:
                return visitor.visitChildren(self)




    def optionalMultiTargetResultType(self):

        localctx = BraketPragmasParser.OptionalMultiTargetResultTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_optionalMultiTargetResultType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.optionalMultiTargetResultTypeName()
            self.state = 261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.Identifier:
                self.state = 260
                self.multiTarget()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalMultiTargetResultTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROBABILITY(self):
            return self.getToken(BraketPragmasParser.PROBABILITY, 0)

        def DENSITY_MATRIX(self):
            return self.getToken(BraketPragmasParser.DENSITY_MATRIX, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_optionalMultiTargetResultTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalMultiTargetResultTypeName" ):
                listener.enterOptionalMultiTargetResultTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalMultiTargetResultTypeName" ):
                listener.exitOptionalMultiTargetResultTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalMultiTargetResultTypeName" ):
                return visitor.visitOptionalMultiTargetResultTypeName(self)
            else:
                return visitor.visitChildren(self)




    def optionalMultiTargetResultTypeName(self):

        localctx = BraketPragmasParser.OptionalMultiTargetResultTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_optionalMultiTargetResultTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.PROBABILITY or _la==BraketPragmasParser.DENSITY_MATRIX):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiTargetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IndexedIdentifierContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_multiTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiTarget" ):
                listener.enterMultiTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiTarget" ):
                listener.exitMultiTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiTarget" ):
                return visitor.visitMultiTarget(self)
            else:
                return visitor.visitChildren(self)




    def multiTarget(self):

        localctx = BraketPragmasParser.MultiTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_multiTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.indexedIdentifier()
            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 266
                self.match(BraketPragmasParser.COMMA)
                self.state = 267
                self.indexedIdentifier()
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiStateResultTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiStateResultTypeName(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiStateResultTypeNameContext,0)


        def multiState(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiStateContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_multiStateResultType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiStateResultType" ):
                listener.enterMultiStateResultType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiStateResultType" ):
                listener.exitMultiStateResultType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiStateResultType" ):
                return visitor.visitMultiStateResultType(self)
            else:
                return visitor.visitChildren(self)




    def multiStateResultType(self):

        localctx = BraketPragmasParser.MultiStateResultTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_multiStateResultType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.multiStateResultTypeName()
            self.state = 274
            self.multiState()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiStateResultTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPLITUDE(self):
            return self.getToken(BraketPragmasParser.AMPLITUDE, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_multiStateResultTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiStateResultTypeName" ):
                listener.enterMultiStateResultTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiStateResultTypeName" ):
                listener.exitMultiStateResultTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiStateResultTypeName" ):
                return visitor.visitMultiStateResultTypeName(self)
            else:
                return visitor.visitChildren(self)




    def multiStateResultTypeName(self):

        localctx = BraketPragmasParser.MultiStateResultTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_multiStateResultTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.match(BraketPragmasParser.AMPLITUDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiStateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.StringLiteral)
            else:
                return self.getToken(BraketPragmasParser.StringLiteral, i)

        def COMMA(self):
            return self.getToken(BraketPragmasParser.COMMA, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_multiState

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiState" ):
                listener.enterMultiState(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiState" ):
                listener.exitMultiState(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiState" ):
                return visitor.visitMultiState(self)
            else:
                return visitor.visitChildren(self)




    def multiState(self):

        localctx = BraketPragmasParser.MultiStateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_multiState)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(BraketPragmasParser.StringLiteral)

            self.state = 279
            self.match(BraketPragmasParser.COMMA)
            self.state = 280
            self.match(BraketPragmasParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def header(self):
            return self.getTypedRuleContext(BraketPragmasParser.HeaderContext,0)


        def globalStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.GlobalStatementContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.GlobalStatementContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.StatementContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.StatementContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = BraketPragmasParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.header()
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__4) | (1 << BraketPragmasParser.T__5) | (1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__13) | (1 << BraketPragmasParser.T__15) | (1 << BraketPragmasParser.T__16) | (1 << BraketPragmasParser.T__17) | (1 << BraketPragmasParser.T__18) | (1 << BraketPragmasParser.T__19) | (1 << BraketPragmasParser.T__20) | (1 << BraketPragmasParser.T__21) | (1 << BraketPragmasParser.T__22) | (1 << BraketPragmasParser.T__24) | (1 << BraketPragmasParser.T__25) | (1 << BraketPragmasParser.T__26) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__28) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55) | (1 << BraketPragmasParser.T__56))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (BraketPragmasParser.T__69 - 70)) | (1 << (BraketPragmasParser.T__71 - 70)) | (1 << (BraketPragmasParser.T__73 - 70)) | (1 << (BraketPragmasParser.T__74 - 70)) | (1 << (BraketPragmasParser.T__78 - 70)) | (1 << (BraketPragmasParser.T__79 - 70)) | (1 << (BraketPragmasParser.T__80 - 70)) | (1 << (BraketPragmasParser.T__81 - 70)) | (1 << (BraketPragmasParser.T__82 - 70)) | (1 << (BraketPragmasParser.T__83 - 70)) | (1 << (BraketPragmasParser.T__84 - 70)) | (1 << (BraketPragmasParser.T__85 - 70)) | (1 << (BraketPragmasParser.T__86 - 70)) | (1 << (BraketPragmasParser.T__87 - 70)) | (1 << (BraketPragmasParser.T__88 - 70)) | (1 << (BraketPragmasParser.LPAREN - 70)) | (1 << (BraketPragmasParser.MINUS - 70)) | (1 << (BraketPragmasParser.ImagNumber - 70)) | (1 << (BraketPragmasParser.COMPLEX - 70)) | (1 << (BraketPragmasParser.CONST - 70)) | (1 << (BraketPragmasParser.ARRAY - 70)) | (1 << (BraketPragmasParser.SIZEOF - 70)) | (1 << (BraketPragmasParser.Constant - 70)) | (1 << (BraketPragmasParser.Integer - 70)) | (1 << (BraketPragmasParser.Identifier - 70)) | (1 << (BraketPragmasParser.RealNumber - 70)) | (1 << (BraketPragmasParser.TimingLiteral - 70)) | (1 << (BraketPragmasParser.StringLiteral - 70)))) != 0):
                self.state = 285
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [BraketPragmasParser.T__4, BraketPragmasParser.T__5, BraketPragmasParser.T__15, BraketPragmasParser.T__78, BraketPragmasParser.T__79, BraketPragmasParser.T__80, BraketPragmasParser.T__87, BraketPragmasParser.T__88]:
                    self.state = 283
                    self.globalStatement()
                    pass
                elif token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__13, BraketPragmasParser.T__16, BraketPragmasParser.T__17, BraketPragmasParser.T__18, BraketPragmasParser.T__19, BraketPragmasParser.T__20, BraketPragmasParser.T__21, BraketPragmasParser.T__22, BraketPragmasParser.T__24, BraketPragmasParser.T__25, BraketPragmasParser.T__26, BraketPragmasParser.T__27, BraketPragmasParser.T__28, BraketPragmasParser.T__43, BraketPragmasParser.T__44, BraketPragmasParser.T__45, BraketPragmasParser.T__46, BraketPragmasParser.T__47, BraketPragmasParser.T__48, BraketPragmasParser.T__49, BraketPragmasParser.T__50, BraketPragmasParser.T__51, BraketPragmasParser.T__52, BraketPragmasParser.T__53, BraketPragmasParser.T__54, BraketPragmasParser.T__55, BraketPragmasParser.T__56, BraketPragmasParser.T__69, BraketPragmasParser.T__71, BraketPragmasParser.T__73, BraketPragmasParser.T__74, BraketPragmasParser.T__81, BraketPragmasParser.T__82, BraketPragmasParser.T__83, BraketPragmasParser.T__84, BraketPragmasParser.T__85, BraketPragmasParser.T__86, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.ImagNumber, BraketPragmasParser.COMPLEX, BraketPragmasParser.CONST, BraketPragmasParser.ARRAY, BraketPragmasParser.SIZEOF, BraketPragmasParser.Constant, BraketPragmasParser.Integer, BraketPragmasParser.Identifier, BraketPragmasParser.RealNumber, BraketPragmasParser.TimingLiteral, BraketPragmasParser.StringLiteral]:
                    self.state = 284
                    self.statement()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 289
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(BraketPragmasParser.VersionContext,0)


        def include(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IncludeContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IncludeContext,i)


        def io(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IoContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IoContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader" ):
                listener.enterHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader" ):
                listener.exitHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader" ):
                return visitor.visitHeader(self)
            else:
                return visitor.visitChildren(self)




    def header(self):

        localctx = BraketPragmasParser.HeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.T__0:
                self.state = 290
                self.version()


            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.T__1:
                self.state = 293
                self.include()
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.T__2 or _la==BraketPragmasParser.T__3:
                self.state = 299
                self.io()
                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def Integer(self):
            return self.getToken(BraketPragmasParser.Integer, 0)

        def RealNumber(self):
            return self.getToken(BraketPragmasParser.RealNumber, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = BraketPragmasParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.match(BraketPragmasParser.T__0)
            self.state = 306
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.Integer or _la==BraketPragmasParser.RealNumber):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 307
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(BraketPragmasParser.StringLiteral, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_include

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude" ):
                listener.enterInclude(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude" ):
                listener.exitInclude(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclude" ):
                return visitor.visitInclude(self)
            else:
                return visitor.visitChildren(self)




    def include(self):

        localctx = BraketPragmasParser.IncludeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_include)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.match(BraketPragmasParser.T__1)
            self.state = 310
            self.match(BraketPragmasParser.StringLiteral)
            self.state = 311
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_ioIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoIdentifier" ):
                listener.enterIoIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoIdentifier" ):
                listener.exitIoIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoIdentifier" ):
                return visitor.visitIoIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def ioIdentifier(self):

        localctx = BraketPragmasParser.IoIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_ioIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__2 or _la==BraketPragmasParser.T__3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ioIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IoIdentifierContext,0)


        def classicalType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalTypeContext,0)


        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_io

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIo" ):
                listener.enterIo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIo" ):
                listener.exitIo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIo" ):
                return visitor.visitIo(self)
            else:
                return visitor.visitChildren(self)




    def io(self):

        localctx = BraketPragmasParser.IoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_io)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.ioIdentifier()
            self.state = 316
            self.classicalType()
            self.state = 317
            self.match(BraketPragmasParser.Identifier)
            self.state = 318
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subroutineDefinition(self):
            return self.getTypedRuleContext(BraketPragmasParser.SubroutineDefinitionContext,0)


        def externDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExternDeclarationContext,0)


        def quantumGateDefinition(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumGateDefinitionContext,0)


        def calibration(self):
            return self.getTypedRuleContext(BraketPragmasParser.CalibrationContext,0)


        def quantumDeclarationStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumDeclarationStatementContext,0)


        def pragma(self):
            return self.getTypedRuleContext(BraketPragmasParser.PragmaContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_globalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalStatement" ):
                listener.enterGlobalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalStatement" ):
                listener.exitGlobalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalStatement" ):
                return visitor.visitGlobalStatement(self)
            else:
                return visitor.visitChildren(self)




    def globalStatement(self):

        localctx = BraketPragmasParser.GlobalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_globalStatement)
        try:
            self.state = 326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 320
                self.subroutineDefinition()
                pass
            elif token in [BraketPragmasParser.T__78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 321
                self.externDeclaration()
                pass
            elif token in [BraketPragmasParser.T__15]:
                self.enterOuterAlt(localctx, 3)
                self.state = 322
                self.quantumGateDefinition()
                pass
            elif token in [BraketPragmasParser.T__87, BraketPragmasParser.T__88]:
                self.enterOuterAlt(localctx, 4)
                self.state = 323
                self.calibration()
                pass
            elif token in [BraketPragmasParser.T__4, BraketPragmasParser.T__5]:
                self.enterOuterAlt(localctx, 5)
                self.state = 324
                self.quantumDeclarationStatement()
                pass
            elif token in [BraketPragmasParser.T__80]:
                self.enterOuterAlt(localctx, 6)
                self.state = 325
                self.pragma()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionStatementContext,0)


        def assignmentStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.AssignmentStatementContext,0)


        def classicalDeclarationStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalDeclarationStatementContext,0)


        def branchingStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.BranchingStatementContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.LoopStatementContext,0)


        def endStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.EndStatementContext,0)


        def aliasStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.AliasStatementContext,0)


        def quantumStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumStatementContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = BraketPragmasParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_statement)
        try:
            self.state = 336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 328
                self.expressionStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 329
                self.assignmentStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 330
                self.classicalDeclarationStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 331
                self.branchingStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 332
                self.loopStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 333
                self.endStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 334
                self.aliasStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 335
                self.quantumStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumDeclarationContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumDeclarationStatement" ):
                listener.enterQuantumDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumDeclarationStatement" ):
                listener.exitQuantumDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumDeclarationStatement" ):
                return visitor.visitQuantumDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def quantumDeclarationStatement(self):

        localctx = BraketPragmasParser.QuantumDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_quantumDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.quantumDeclaration()
            self.state = 339
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def classicalDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalDeclarationContext,0)


        def constantDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.ConstantDeclarationContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_classicalDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalDeclarationStatement" ):
                listener.enterClassicalDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalDeclarationStatement" ):
                listener.exitClassicalDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalDeclarationStatement" ):
                return visitor.visitClassicalDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def classicalDeclarationStatement(self):

        localctx = BraketPragmasParser.ClassicalDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_classicalDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__81, BraketPragmasParser.T__82, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY]:
                self.state = 341
                self.classicalDeclaration()
                pass
            elif token in [BraketPragmasParser.CONST]:
                self.state = 342
                self.constantDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 345
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexedIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(BraketPragmasParser.AssignmentOperatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_classicalAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalAssignment" ):
                listener.enterClassicalAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalAssignment" ):
                listener.exitClassicalAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalAssignment" ):
                return visitor.visitClassicalAssignment(self)
            else:
                return visitor.visitChildren(self)




    def classicalAssignment(self):

        localctx = BraketPragmasParser.ClassicalAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_classicalAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.indexedIdentifier()
            self.state = 348
            self.assignmentOperator()
            self.state = 349
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def classicalAssignment(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalAssignmentContext,0)


        def quantumMeasurementAssignment(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumMeasurementAssignmentContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_assignmentStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentStatement" ):
                listener.enterAssignmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentStatement" ):
                listener.exitAssignmentStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentStatement" ):
                return visitor.visitAssignmentStatement(self)
            else:
                return visitor.visitChildren(self)




    def assignmentStatement(self):

        localctx = BraketPragmasParser.AssignmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_assignmentStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 351
                self.classicalAssignment()
                pass

            elif la_ == 2:
                self.state = 352
                self.quantumMeasurementAssignment()
                pass


            self.state = 355
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnSignatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(BraketPragmasParser.ARROW, 0)

        def classicalType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalTypeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_returnSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnSignature" ):
                listener.enterReturnSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnSignature" ):
                listener.exitReturnSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnSignature" ):
                return visitor.visitReturnSignature(self)
            else:
                return visitor.visitChildren(self)




    def returnSignature(self):

        localctx = BraketPragmasParser.ReturnSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_returnSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(BraketPragmasParser.ARROW)
            self.state = 358
            self.classicalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignator" ):
                return visitor.visitDesignator(self)
            else:
                return visitor.visitChildren(self)




    def designator(self):

        localctx = BraketPragmasParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_designator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 361
            self.expression(0)
            self.state = 362
            self.match(BraketPragmasParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.Identifier)
            else:
                return self.getToken(BraketPragmasParser.Identifier, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = BraketPragmasParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 364
                    self.match(BraketPragmasParser.Identifier)
                    self.state = 365
                    self.match(BraketPragmasParser.COMMA) 
                self.state = 370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

            self.state = 371
            self.match(BraketPragmasParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumDeclaration" ):
                listener.enterQuantumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumDeclaration" ):
                listener.exitQuantumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumDeclaration" ):
                return visitor.visitQuantumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def quantumDeclaration(self):

        localctx = BraketPragmasParser.QuantumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_quantumDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 383
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 373
                self.match(BraketPragmasParser.T__4)
                self.state = 374
                self.match(BraketPragmasParser.Identifier)
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 375
                    self.designator()


                pass
            elif token in [BraketPragmasParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 378
                self.match(BraketPragmasParser.T__5)
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 379
                    self.designator()


                self.state = 382
                self.match(BraketPragmasParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumArgument" ):
                listener.enterQuantumArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumArgument" ):
                listener.exitQuantumArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumArgument" ):
                return visitor.visitQuantumArgument(self)
            else:
                return visitor.visitChildren(self)




    def quantumArgument(self):

        localctx = BraketPragmasParser.QuantumArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_quantumArgument)
        self._la = 0 # Token type
        try:
            self.state = 395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 385
                self.match(BraketPragmasParser.T__4)
                self.state = 386
                self.match(BraketPragmasParser.Identifier)
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 387
                    self.designator()


                pass
            elif token in [BraketPragmasParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 390
                self.match(BraketPragmasParser.T__5)
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 391
                    self.designator()


                self.state = 394
                self.match(BraketPragmasParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.QuantumArgumentContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.QuantumArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumArgumentList" ):
                listener.enterQuantumArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumArgumentList" ):
                listener.exitQuantumArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumArgumentList" ):
                return visitor.visitQuantumArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def quantumArgumentList(self):

        localctx = BraketPragmasParser.QuantumArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_quantumArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.quantumArgument()
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 398
                self.match(BraketPragmasParser.COMMA)
                self.state = 399
                self.quantumArgument()
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_bitType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitType" ):
                listener.enterBitType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitType" ):
                listener.exitBitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitType" ):
                return visitor.visitBitType(self)
            else:
                return visitor.visitChildren(self)




    def bitType(self):

        localctx = BraketPragmasParser.BitTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_bitType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__6 or _la==BraketPragmasParser.T__7):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDesignatorTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_singleDesignatorType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDesignatorType" ):
                listener.enterSingleDesignatorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDesignatorType" ):
                listener.exitSingleDesignatorType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDesignatorType" ):
                return visitor.visitSingleDesignatorType(self)
            else:
                return visitor.visitChildren(self)




    def singleDesignatorType(self):

        localctx = BraketPragmasParser.SingleDesignatorTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_singleDesignatorType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoDesignatorTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timingType(self):
            return self.getTypedRuleContext(BraketPragmasParser.TimingTypeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_noDesignatorType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoDesignatorType" ):
                listener.enterNoDesignatorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoDesignatorType" ):
                listener.exitNoDesignatorType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoDesignatorType" ):
                return visitor.visitNoDesignatorType(self)
            else:
                return visitor.visitChildren(self)




    def noDesignatorType(self):

        localctx = BraketPragmasParser.NoDesignatorTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_noDesignatorType)
        try:
            self.state = 411
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 409
                self.match(BraketPragmasParser.T__12)
                pass
            elif token in [BraketPragmasParser.T__81, BraketPragmasParser.T__82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 410
                self.timingType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonArrayTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorType(self):
            return self.getTypedRuleContext(BraketPragmasParser.SingleDesignatorTypeContext,0)


        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def noDesignatorType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NoDesignatorTypeContext,0)


        def bitType(self):
            return self.getTypedRuleContext(BraketPragmasParser.BitTypeContext,0)


        def COMPLEX(self):
            return self.getToken(BraketPragmasParser.COMPLEX, 0)

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def numericType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NumericTypeContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_nonArrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonArrayType" ):
                listener.enterNonArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonArrayType" ):
                listener.exitNonArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonArrayType" ):
                return visitor.visitNonArrayType(self)
            else:
                return visitor.visitChildren(self)




    def nonArrayType(self):

        localctx = BraketPragmasParser.NonArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_nonArrayType)
        self._la = 0 # Token type
        try:
            self.state = 426
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 413
                self.singleDesignatorType()
                self.state = 414
                self.designator()
                pass
            elif token in [BraketPragmasParser.T__12, BraketPragmasParser.T__81, BraketPragmasParser.T__82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 416
                self.noDesignatorType()
                pass
            elif token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7]:
                self.enterOuterAlt(localctx, 3)
                self.state = 417
                self.bitType()
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 418
                    self.designator()


                pass
            elif token in [BraketPragmasParser.COMPLEX]:
                self.enterOuterAlt(localctx, 4)
                self.state = 421
                self.match(BraketPragmasParser.COMPLEX)
                self.state = 422
                self.match(BraketPragmasParser.LBRACKET)
                self.state = 423
                self.numericType()
                self.state = 424
                self.match(BraketPragmasParser.RBRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(BraketPragmasParser.ARRAY, 0)

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def nonArrayType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NonArrayTypeContext,0)


        def COMMA(self):
            return self.getToken(BraketPragmasParser.COMMA, 0)

        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = BraketPragmasParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(BraketPragmasParser.ARRAY)
            self.state = 429
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 430
            self.nonArrayType()
            self.state = 431
            self.match(BraketPragmasParser.COMMA)
            self.state = 432
            self.expressionList()
            self.state = 433
            self.match(BraketPragmasParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayReferenceTypeDimensionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def DIM(self):
            return self.getToken(BraketPragmasParser.DIM, 0)

        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_arrayReferenceTypeDimensionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayReferenceTypeDimensionSpecifier" ):
                listener.enterArrayReferenceTypeDimensionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayReferenceTypeDimensionSpecifier" ):
                listener.exitArrayReferenceTypeDimensionSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayReferenceTypeDimensionSpecifier" ):
                return visitor.visitArrayReferenceTypeDimensionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def arrayReferenceTypeDimensionSpecifier(self):

        localctx = BraketPragmasParser.ArrayReferenceTypeDimensionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_arrayReferenceTypeDimensionSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__27, BraketPragmasParser.T__28, BraketPragmasParser.T__43, BraketPragmasParser.T__44, BraketPragmasParser.T__45, BraketPragmasParser.T__46, BraketPragmasParser.T__47, BraketPragmasParser.T__48, BraketPragmasParser.T__49, BraketPragmasParser.T__50, BraketPragmasParser.T__51, BraketPragmasParser.T__52, BraketPragmasParser.T__53, BraketPragmasParser.T__54, BraketPragmasParser.T__55, BraketPragmasParser.T__56, BraketPragmasParser.T__81, BraketPragmasParser.T__82, BraketPragmasParser.T__84, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.ImagNumber, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.SIZEOF, BraketPragmasParser.Constant, BraketPragmasParser.Integer, BraketPragmasParser.Identifier, BraketPragmasParser.RealNumber, BraketPragmasParser.TimingLiteral, BraketPragmasParser.StringLiteral]:
                self.state = 435
                self.expressionList()
                pass
            elif token in [BraketPragmasParser.DIM]:
                self.state = 436
                self.match(BraketPragmasParser.DIM)
                self.state = 437
                self.match(BraketPragmasParser.EQUALS)
                self.state = 438
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayReferenceTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(BraketPragmasParser.ARRAY, 0)

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def nonArrayType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NonArrayTypeContext,0)


        def COMMA(self):
            return self.getToken(BraketPragmasParser.COMMA, 0)

        def arrayReferenceTypeDimensionSpecifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayReferenceTypeDimensionSpecifierContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_arrayReferenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayReferenceType" ):
                listener.enterArrayReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayReferenceType" ):
                listener.exitArrayReferenceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayReferenceType" ):
                return visitor.visitArrayReferenceType(self)
            else:
                return visitor.visitChildren(self)




    def arrayReferenceType(self):

        localctx = BraketPragmasParser.ArrayReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_arrayReferenceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(BraketPragmasParser.ARRAY)
            self.state = 442
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 443
            self.nonArrayType()
            self.state = 444
            self.match(BraketPragmasParser.COMMA)
            self.state = 445
            self.arrayReferenceTypeDimensionSpecifier()
            self.state = 446
            self.match(BraketPragmasParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonArrayType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NonArrayTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_classicalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalType" ):
                listener.enterClassicalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalType" ):
                listener.exitClassicalType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalType" ):
                return visitor.visitClassicalType(self)
            else:
                return visitor.visitChildren(self)




    def classicalType(self):

        localctx = BraketPragmasParser.ClassicalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_classicalType)
        try:
            self.state = 450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__81, BraketPragmasParser.T__82, BraketPragmasParser.COMPLEX]:
                self.enterOuterAlt(localctx, 1)
                self.state = 448
                self.nonArrayType()
                pass
            elif token in [BraketPragmasParser.ARRAY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 449
                self.arrayType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorType(self):
            return self.getTypedRuleContext(BraketPragmasParser.SingleDesignatorTypeContext,0)


        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_numericType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericType" ):
                listener.enterNumericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericType" ):
                listener.exitNumericType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericType" ):
                return visitor.visitNumericType(self)
            else:
                return visitor.visitChildren(self)




    def numericType(self):

        localctx = BraketPragmasParser.NumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_numericType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.singleDesignatorType()
            self.state = 453
            self.designator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(BraketPragmasParser.CONST, 0)

        def classicalType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalTypeContext,0)


        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_constantDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclaration" ):
                listener.enterConstantDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclaration" ):
                listener.exitConstantDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDeclaration" ):
                return visitor.visitConstantDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constantDeclaration(self):

        localctx = BraketPragmasParser.ConstantDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_constantDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.match(BraketPragmasParser.CONST)
            self.state = 456
            self.classicalType()
            self.state = 457
            self.match(BraketPragmasParser.Identifier)
            self.state = 458
            self.equalsExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDesignatorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorType(self):
            return self.getTypedRuleContext(BraketPragmasParser.SingleDesignatorTypeContext,0)


        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_singleDesignatorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDesignatorDeclaration" ):
                listener.enterSingleDesignatorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDesignatorDeclaration" ):
                listener.exitSingleDesignatorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDesignatorDeclaration" ):
                return visitor.visitSingleDesignatorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def singleDesignatorDeclaration(self):

        localctx = BraketPragmasParser.SingleDesignatorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_singleDesignatorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.singleDesignatorType()
            self.state = 461
            self.designator()
            self.state = 462
            self.match(BraketPragmasParser.Identifier)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.EQUALS:
                self.state = 463
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoDesignatorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noDesignatorType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NoDesignatorTypeContext,0)


        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_noDesignatorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoDesignatorDeclaration" ):
                listener.enterNoDesignatorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoDesignatorDeclaration" ):
                listener.exitNoDesignatorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoDesignatorDeclaration" ):
                return visitor.visitNoDesignatorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def noDesignatorDeclaration(self):

        localctx = BraketPragmasParser.NoDesignatorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_noDesignatorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.noDesignatorType()
            self.state = 467
            self.match(BraketPragmasParser.Identifier)
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.EQUALS:
                self.state = 468
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.EqualsExpressionContext,0)


        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_bitDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitDeclaration" ):
                listener.enterBitDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitDeclaration" ):
                listener.exitBitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitDeclaration" ):
                return visitor.visitBitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def bitDeclaration(self):

        localctx = BraketPragmasParser.BitDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_bitDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__7]:
                self.state = 471
                self.match(BraketPragmasParser.T__7)
                self.state = 472
                self.match(BraketPragmasParser.Identifier)
                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 473
                    self.designator()


                pass
            elif token in [BraketPragmasParser.T__6]:
                self.state = 476
                self.match(BraketPragmasParser.T__6)
                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 477
                    self.designator()


                self.state = 480
                self.match(BraketPragmasParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.EQUALS:
                self.state = 483
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPLEX(self):
            return self.getToken(BraketPragmasParser.COMPLEX, 0)

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def numericType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NumericTypeContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_complexDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexDeclaration" ):
                listener.enterComplexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexDeclaration" ):
                listener.exitComplexDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexDeclaration" ):
                return visitor.visitComplexDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def complexDeclaration(self):

        localctx = BraketPragmasParser.ComplexDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_complexDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.match(BraketPragmasParser.COMPLEX)
            self.state = 487
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 488
            self.numericType()
            self.state = 489
            self.match(BraketPragmasParser.RBRACKET)
            self.state = 490
            self.match(BraketPragmasParser.Identifier)
            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.EQUALS:
                self.state = 491
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)


        def arrayInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ArrayInitializerContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ArrayInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayInitializer" ):
                return visitor.visitArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def arrayInitializer(self):

        localctx = BraketPragmasParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(BraketPragmasParser.LBRACE)

            self.state = 497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__27, BraketPragmasParser.T__28, BraketPragmasParser.T__43, BraketPragmasParser.T__44, BraketPragmasParser.T__45, BraketPragmasParser.T__46, BraketPragmasParser.T__47, BraketPragmasParser.T__48, BraketPragmasParser.T__49, BraketPragmasParser.T__50, BraketPragmasParser.T__51, BraketPragmasParser.T__52, BraketPragmasParser.T__53, BraketPragmasParser.T__54, BraketPragmasParser.T__55, BraketPragmasParser.T__56, BraketPragmasParser.T__81, BraketPragmasParser.T__82, BraketPragmasParser.T__84, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.ImagNumber, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.SIZEOF, BraketPragmasParser.Constant, BraketPragmasParser.Integer, BraketPragmasParser.Identifier, BraketPragmasParser.RealNumber, BraketPragmasParser.TimingLiteral, BraketPragmasParser.StringLiteral]:
                self.state = 495
                self.expression(0)
                pass
            elif token in [BraketPragmasParser.LBRACE]:
                self.state = 496
                self.arrayInitializer()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 499
                self.match(BraketPragmasParser.COMMA)
                self.state = 502
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__27, BraketPragmasParser.T__28, BraketPragmasParser.T__43, BraketPragmasParser.T__44, BraketPragmasParser.T__45, BraketPragmasParser.T__46, BraketPragmasParser.T__47, BraketPragmasParser.T__48, BraketPragmasParser.T__49, BraketPragmasParser.T__50, BraketPragmasParser.T__51, BraketPragmasParser.T__52, BraketPragmasParser.T__53, BraketPragmasParser.T__54, BraketPragmasParser.T__55, BraketPragmasParser.T__56, BraketPragmasParser.T__81, BraketPragmasParser.T__82, BraketPragmasParser.T__84, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.ImagNumber, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.SIZEOF, BraketPragmasParser.Constant, BraketPragmasParser.Integer, BraketPragmasParser.Identifier, BraketPragmasParser.RealNumber, BraketPragmasParser.TimingLiteral, BraketPragmasParser.StringLiteral]:
                    self.state = 500
                    self.expression(0)
                    pass
                elif token in [BraketPragmasParser.LBRACE]:
                    self.state = 501
                    self.arrayInitializer()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 509
            self.match(BraketPragmasParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayTypeContext,0)


        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def arrayInitializer(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_arrayDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDeclaration" ):
                listener.enterArrayDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDeclaration" ):
                listener.exitArrayDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDeclaration" ):
                return visitor.visitArrayDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def arrayDeclaration(self):

        localctx = BraketPragmasParser.ArrayDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_arrayDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.arrayType()
            self.state = 512
            self.match(BraketPragmasParser.Identifier)
            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.EQUALS:
                self.state = 513
                self.match(BraketPragmasParser.EQUALS)
                self.state = 516
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [BraketPragmasParser.LBRACE]:
                    self.state = 514
                    self.arrayInitializer()
                    pass
                elif token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__27, BraketPragmasParser.T__28, BraketPragmasParser.T__43, BraketPragmasParser.T__44, BraketPragmasParser.T__45, BraketPragmasParser.T__46, BraketPragmasParser.T__47, BraketPragmasParser.T__48, BraketPragmasParser.T__49, BraketPragmasParser.T__50, BraketPragmasParser.T__51, BraketPragmasParser.T__52, BraketPragmasParser.T__53, BraketPragmasParser.T__54, BraketPragmasParser.T__55, BraketPragmasParser.T__56, BraketPragmasParser.T__81, BraketPragmasParser.T__82, BraketPragmasParser.T__84, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.ImagNumber, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.SIZEOF, BraketPragmasParser.Constant, BraketPragmasParser.Integer, BraketPragmasParser.Identifier, BraketPragmasParser.RealNumber, BraketPragmasParser.TimingLiteral, BraketPragmasParser.StringLiteral]:
                    self.state = 515
                    self.expression(0)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.SingleDesignatorDeclarationContext,0)


        def noDesignatorDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.NoDesignatorDeclarationContext,0)


        def bitDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.BitDeclarationContext,0)


        def complexDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.ComplexDeclarationContext,0)


        def arrayDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayDeclarationContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_classicalDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalDeclaration" ):
                listener.enterClassicalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalDeclaration" ):
                listener.exitClassicalDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalDeclaration" ):
                return visitor.visitClassicalDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classicalDeclaration(self):

        localctx = BraketPragmasParser.ClassicalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_classicalDeclaration)
        try:
            self.state = 525
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 520
                self.singleDesignatorDeclaration()
                pass
            elif token in [BraketPragmasParser.T__12, BraketPragmasParser.T__81, BraketPragmasParser.T__82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 521
                self.noDesignatorDeclaration()
                pass
            elif token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7]:
                self.enterOuterAlt(localctx, 3)
                self.state = 522
                self.bitDeclaration()
                pass
            elif token in [BraketPragmasParser.COMPLEX]:
                self.enterOuterAlt(localctx, 4)
                self.state = 523
                self.complexDeclaration()
                pass
            elif token in [BraketPragmasParser.ARRAY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 524
                self.arrayDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ClassicalTypeContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ClassicalTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_classicalTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalTypeList" ):
                listener.enterClassicalTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalTypeList" ):
                listener.exitClassicalTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalTypeList" ):
                return visitor.visitClassicalTypeList(self)
            else:
                return visitor.visitChildren(self)




    def classicalTypeList(self):

        localctx = BraketPragmasParser.ClassicalTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_classicalTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 527
                    self.classicalType()
                    self.state = 528
                    self.match(BraketPragmasParser.COMMA) 
                self.state = 534
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

            self.state = 535
            self.classicalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def singleDesignatorType(self):
            return self.getTypedRuleContext(BraketPragmasParser.SingleDesignatorTypeContext,0)


        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def noDesignatorType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NoDesignatorTypeContext,0)


        def COMPLEX(self):
            return self.getToken(BraketPragmasParser.COMPLEX, 0)

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def numericType(self):
            return self.getTypedRuleContext(BraketPragmasParser.NumericTypeContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def arrayReferenceType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ArrayReferenceTypeContext,0)


        def CONST(self):
            return self.getToken(BraketPragmasParser.CONST, 0)

        def MUTABLE(self):
            return self.getToken(BraketPragmasParser.MUTABLE, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_classicalArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalArgument" ):
                listener.enterClassicalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalArgument" ):
                listener.exitClassicalArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalArgument" ):
                return visitor.visitClassicalArgument(self)
            else:
                return visitor.visitChildren(self)




    def classicalArgument(self):

        localctx = BraketPragmasParser.ClassicalArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_classicalArgument)
        self._la = 0 # Token type
        try:
            self.state = 565
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__81, BraketPragmasParser.T__82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 541
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11]:
                    self.state = 537
                    self.singleDesignatorType()
                    self.state = 538
                    self.designator()
                    pass
                elif token in [BraketPragmasParser.T__12, BraketPragmasParser.T__81, BraketPragmasParser.T__82]:
                    self.state = 540
                    self.noDesignatorType()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 543
                self.match(BraketPragmasParser.Identifier)
                pass
            elif token in [BraketPragmasParser.T__7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 545
                self.match(BraketPragmasParser.T__7)
                self.state = 546
                self.match(BraketPragmasParser.Identifier)
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 547
                    self.designator()


                pass
            elif token in [BraketPragmasParser.T__6]:
                self.enterOuterAlt(localctx, 3)
                self.state = 550
                self.match(BraketPragmasParser.T__6)
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.LBRACKET:
                    self.state = 551
                    self.designator()


                self.state = 554
                self.match(BraketPragmasParser.Identifier)
                pass
            elif token in [BraketPragmasParser.COMPLEX]:
                self.enterOuterAlt(localctx, 4)
                self.state = 555
                self.match(BraketPragmasParser.COMPLEX)
                self.state = 556
                self.match(BraketPragmasParser.LBRACKET)
                self.state = 557
                self.numericType()
                self.state = 558
                self.match(BraketPragmasParser.RBRACKET)
                self.state = 559
                self.match(BraketPragmasParser.Identifier)
                pass
            elif token in [BraketPragmasParser.CONST, BraketPragmasParser.MUTABLE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 561
                _la = self._input.LA(1)
                if not(_la==BraketPragmasParser.CONST or _la==BraketPragmasParser.MUTABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 562
                self.arrayReferenceType()
                self.state = 563
                self.match(BraketPragmasParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ClassicalArgumentContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ClassicalArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_classicalArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalArgumentList" ):
                listener.enterClassicalArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalArgumentList" ):
                listener.exitClassicalArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalArgumentList" ):
                return visitor.visitClassicalArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def classicalArgumentList(self):

        localctx = BraketPragmasParser.ClassicalArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_classicalArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.classicalArgument()
            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 568
                self.match(BraketPragmasParser.COMMA)
                self.state = 569
                self.classicalArgument()
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyTypeArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalArgument(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalArgumentContext,0)


        def quantumArgument(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumArgumentContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_anyTypeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyTypeArgument" ):
                listener.enterAnyTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyTypeArgument" ):
                listener.exitAnyTypeArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnyTypeArgument" ):
                return visitor.visitAnyTypeArgument(self)
            else:
                return visitor.visitChildren(self)




    def anyTypeArgument(self):

        localctx = BraketPragmasParser.AnyTypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_anyTypeArgument)
        try:
            self.state = 577
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__81, BraketPragmasParser.T__82, BraketPragmasParser.COMPLEX, BraketPragmasParser.CONST, BraketPragmasParser.MUTABLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 575
                self.classicalArgument()
                pass
            elif token in [BraketPragmasParser.T__4, BraketPragmasParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 576
                self.quantumArgument()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnyTypeArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyTypeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.AnyTypeArgumentContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.AnyTypeArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_anyTypeArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyTypeArgumentList" ):
                listener.enterAnyTypeArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyTypeArgumentList" ):
                listener.exitAnyTypeArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnyTypeArgumentList" ):
                return visitor.visitAnyTypeArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def anyTypeArgumentList(self):

        localctx = BraketPragmasParser.AnyTypeArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_anyTypeArgumentList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 579
                    self.anyTypeArgument()
                    self.state = 580
                    self.match(BraketPragmasParser.COMMA) 
                self.state = 586
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

            self.state = 587
            self.anyTypeArgument()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def aliasInitializer(self):
            return self.getTypedRuleContext(BraketPragmasParser.AliasInitializerContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_aliasStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasStatement" ):
                listener.enterAliasStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasStatement" ):
                listener.exitAliasStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasStatement" ):
                return visitor.visitAliasStatement(self)
            else:
                return visitor.visitChildren(self)




    def aliasStatement(self):

        localctx = BraketPragmasParser.AliasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_aliasStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(BraketPragmasParser.T__13)
            self.state = 590
            self.match(BraketPragmasParser.Identifier)
            self.state = 591
            self.match(BraketPragmasParser.EQUALS)
            self.state = 592
            self.aliasInitializer(0)
            self.state = 593
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def aliasInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.AliasInitializerContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.AliasInitializerContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_aliasInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasInitializer" ):
                listener.enterAliasInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasInitializer" ):
                listener.exitAliasInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasInitializer" ):
                return visitor.visitAliasInitializer(self)
            else:
                return visitor.visitChildren(self)



    def aliasInitializer(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.AliasInitializerContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_aliasInitializer, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 603
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.AliasInitializerContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_aliasInitializer)
                    self.state = 598
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 599
                    self.match(BraketPragmasParser.T__14)
                    self.state = 600
                    self.aliasInitializer(2) 
                self.state = 605
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RangeDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COLON)
            else:
                return self.getToken(BraketPragmasParser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_rangeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeDefinition" ):
                listener.enterRangeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeDefinition" ):
                listener.exitRangeDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeDefinition" ):
                return visitor.visitRangeDefinition(self)
            else:
                return visitor.visitChildren(self)




    def rangeDefinition(self):

        localctx = BraketPragmasParser.RangeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_rangeDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__28) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55) | (1 << BraketPragmasParser.T__56))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (BraketPragmasParser.T__81 - 82)) | (1 << (BraketPragmasParser.T__82 - 82)) | (1 << (BraketPragmasParser.T__84 - 82)) | (1 << (BraketPragmasParser.LPAREN - 82)) | (1 << (BraketPragmasParser.MINUS - 82)) | (1 << (BraketPragmasParser.ImagNumber - 82)) | (1 << (BraketPragmasParser.COMPLEX - 82)) | (1 << (BraketPragmasParser.ARRAY - 82)) | (1 << (BraketPragmasParser.SIZEOF - 82)) | (1 << (BraketPragmasParser.Constant - 82)) | (1 << (BraketPragmasParser.Integer - 82)) | (1 << (BraketPragmasParser.Identifier - 82)) | (1 << (BraketPragmasParser.RealNumber - 82)) | (1 << (BraketPragmasParser.TimingLiteral - 82)) | (1 << (BraketPragmasParser.StringLiteral - 82)))) != 0):
                self.state = 606
                self.expression(0)


            self.state = 609
            self.match(BraketPragmasParser.COLON)
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__28) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55) | (1 << BraketPragmasParser.T__56))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (BraketPragmasParser.T__81 - 82)) | (1 << (BraketPragmasParser.T__82 - 82)) | (1 << (BraketPragmasParser.T__84 - 82)) | (1 << (BraketPragmasParser.LPAREN - 82)) | (1 << (BraketPragmasParser.MINUS - 82)) | (1 << (BraketPragmasParser.ImagNumber - 82)) | (1 << (BraketPragmasParser.COMPLEX - 82)) | (1 << (BraketPragmasParser.ARRAY - 82)) | (1 << (BraketPragmasParser.SIZEOF - 82)) | (1 << (BraketPragmasParser.Constant - 82)) | (1 << (BraketPragmasParser.Integer - 82)) | (1 << (BraketPragmasParser.Identifier - 82)) | (1 << (BraketPragmasParser.RealNumber - 82)) | (1 << (BraketPragmasParser.TimingLiteral - 82)) | (1 << (BraketPragmasParser.StringLiteral - 82)))) != 0):
                self.state = 610
                self.expression(0)


            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.COLON:
                self.state = 613
                self.match(BraketPragmasParser.COLON)
                self.state = 614
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumGateDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateSignature(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumGateSignatureContext,0)


        def quantumBlock(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumBlockContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumGateDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateDefinition" ):
                listener.enterQuantumGateDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateDefinition" ):
                listener.exitQuantumGateDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumGateDefinition" ):
                return visitor.visitQuantumGateDefinition(self)
            else:
                return visitor.visitChildren(self)




    def quantumGateDefinition(self):

        localctx = BraketPragmasParser.QuantumGateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_quantumGateDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.match(BraketPragmasParser.T__15)
            self.state = 618
            self.quantumGateSignature()
            self.state = 619
            self.quantumBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumGateSignatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateName(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumGateNameContext,0)


        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IdentifierListContext,i)


        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumGateSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateSignature" ):
                listener.enterQuantumGateSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateSignature" ):
                listener.exitQuantumGateSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumGateSignature" ):
                return visitor.visitQuantumGateSignature(self)
            else:
                return visitor.visitChildren(self)




    def quantumGateSignature(self):

        localctx = BraketPragmasParser.QuantumGateSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_quantumGateSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.quantumGateName()
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LPAREN:
                self.state = 622
                self.match(BraketPragmasParser.LPAREN)
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.Identifier:
                    self.state = 623
                    self.identifierList()


                self.state = 626
                self.match(BraketPragmasParser.RPAREN)


            self.state = 629
            self.identifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumGateNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumGateName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateName" ):
                listener.enterQuantumGateName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateName" ):
                listener.exitQuantumGateName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumGateName" ):
                return visitor.visitQuantumGateName(self)
            else:
                return visitor.visitChildren(self)




    def quantumGateName(self):

        localctx = BraketPragmasParser.QuantumGateNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_quantumGateName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__16 or _la==BraketPragmasParser.T__17 or _la==BraketPragmasParser.Identifier):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def quantumStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.QuantumStatementContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.QuantumStatementContext,i)


        def quantumLoop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.QuantumLoopContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.QuantumLoopContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumBlock" ):
                listener.enterQuantumBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumBlock" ):
                listener.exitQuantumBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumBlock" ):
                return visitor.visitQuantumBlock(self)
            else:
                return visitor.visitChildren(self)




    def quantumBlock(self):

        localctx = BraketPragmasParser.QuantumBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_quantumBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.match(BraketPragmasParser.LBRACE)
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__16) | (1 << BraketPragmasParser.T__17) | (1 << BraketPragmasParser.T__18) | (1 << BraketPragmasParser.T__19) | (1 << BraketPragmasParser.T__20) | (1 << BraketPragmasParser.T__21) | (1 << BraketPragmasParser.T__22) | (1 << BraketPragmasParser.T__24) | (1 << BraketPragmasParser.T__25) | (1 << BraketPragmasParser.T__26))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (BraketPragmasParser.T__71 - 72)) | (1 << (BraketPragmasParser.T__73 - 72)) | (1 << (BraketPragmasParser.T__83 - 72)) | (1 << (BraketPragmasParser.T__85 - 72)) | (1 << (BraketPragmasParser.T__86 - 72)) | (1 << (BraketPragmasParser.Identifier - 72)))) != 0):
                self.state = 636
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [BraketPragmasParser.T__16, BraketPragmasParser.T__17, BraketPragmasParser.T__18, BraketPragmasParser.T__19, BraketPragmasParser.T__20, BraketPragmasParser.T__21, BraketPragmasParser.T__22, BraketPragmasParser.T__24, BraketPragmasParser.T__25, BraketPragmasParser.T__26, BraketPragmasParser.T__83, BraketPragmasParser.T__85, BraketPragmasParser.T__86, BraketPragmasParser.Identifier]:
                    self.state = 634
                    self.quantumStatement()
                    pass
                elif token in [BraketPragmasParser.T__71, BraketPragmasParser.T__73]:
                    self.state = 635
                    self.quantumLoop()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 641
            self.match(BraketPragmasParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loopSignature(self):
            return self.getTypedRuleContext(BraketPragmasParser.LoopSignatureContext,0)


        def quantumLoopBlock(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumLoopBlockContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumLoop" ):
                listener.enterQuantumLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumLoop" ):
                listener.exitQuantumLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumLoop" ):
                return visitor.visitQuantumLoop(self)
            else:
                return visitor.visitChildren(self)




    def quantumLoop(self):

        localctx = BraketPragmasParser.QuantumLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_quantumLoop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.loopSignature()
            self.state = 644
            self.quantumLoopBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumLoopBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.QuantumStatementContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.QuantumStatementContext,i)


        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumLoopBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumLoopBlock" ):
                listener.enterQuantumLoopBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumLoopBlock" ):
                listener.exitQuantumLoopBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumLoopBlock" ):
                return visitor.visitQuantumLoopBlock(self)
            else:
                return visitor.visitChildren(self)




    def quantumLoopBlock(self):

        localctx = BraketPragmasParser.QuantumLoopBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_quantumLoopBlock)
        self._la = 0 # Token type
        try:
            self.state = 655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__16, BraketPragmasParser.T__17, BraketPragmasParser.T__18, BraketPragmasParser.T__19, BraketPragmasParser.T__20, BraketPragmasParser.T__21, BraketPragmasParser.T__22, BraketPragmasParser.T__24, BraketPragmasParser.T__25, BraketPragmasParser.T__26, BraketPragmasParser.T__83, BraketPragmasParser.T__85, BraketPragmasParser.T__86, BraketPragmasParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 646
                self.quantumStatement()
                pass
            elif token in [BraketPragmasParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 647
                self.match(BraketPragmasParser.LBRACE)
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__16) | (1 << BraketPragmasParser.T__17) | (1 << BraketPragmasParser.T__18) | (1 << BraketPragmasParser.T__19) | (1 << BraketPragmasParser.T__20) | (1 << BraketPragmasParser.T__21) | (1 << BraketPragmasParser.T__22) | (1 << BraketPragmasParser.T__24) | (1 << BraketPragmasParser.T__25) | (1 << BraketPragmasParser.T__26))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (BraketPragmasParser.T__83 - 84)) | (1 << (BraketPragmasParser.T__85 - 84)) | (1 << (BraketPragmasParser.T__86 - 84)) | (1 << (BraketPragmasParser.Identifier - 84)))) != 0):
                    self.state = 648
                    self.quantumStatement()
                    self.state = 653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 654
                self.match(BraketPragmasParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumInstruction(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumInstructionContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def timingStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.TimingStatementContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumStatement" ):
                listener.enterQuantumStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumStatement" ):
                listener.exitQuantumStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumStatement" ):
                return visitor.visitQuantumStatement(self)
            else:
                return visitor.visitChildren(self)




    def quantumStatement(self):

        localctx = BraketPragmasParser.QuantumStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_quantumStatement)
        try:
            self.state = 661
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__16, BraketPragmasParser.T__17, BraketPragmasParser.T__18, BraketPragmasParser.T__19, BraketPragmasParser.T__20, BraketPragmasParser.T__21, BraketPragmasParser.T__22, BraketPragmasParser.T__24, BraketPragmasParser.T__25, BraketPragmasParser.T__26, BraketPragmasParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.quantumInstruction()
                self.state = 658
                self.match(BraketPragmasParser.SEMICOLON)
                pass
            elif token in [BraketPragmasParser.T__83, BraketPragmasParser.T__85, BraketPragmasParser.T__86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 660
                self.timingStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumInstructionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateCall(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumGateCallContext,0)


        def quantumPhase(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumPhaseContext,0)


        def quantumMeasurement(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumMeasurementContext,0)


        def quantumReset(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumResetContext,0)


        def quantumBarrier(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumBarrierContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumInstruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumInstruction" ):
                listener.enterQuantumInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumInstruction" ):
                listener.exitQuantumInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumInstruction" ):
                return visitor.visitQuantumInstruction(self)
            else:
                return visitor.visitChildren(self)




    def quantumInstruction(self):

        localctx = BraketPragmasParser.QuantumInstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_quantumInstruction)
        try:
            self.state = 668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 663
                self.quantumGateCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 664
                self.quantumPhase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 665
                self.quantumMeasurement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 666
                self.quantumReset()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 667
                self.quantumBarrier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumPhaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def quantumGateModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.QuantumGateModifierContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.QuantumGateModifierContext,i)


        def indexedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IndexedIdentifierContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumPhase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumPhase" ):
                listener.enterQuantumPhase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumPhase" ):
                listener.exitQuantumPhase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumPhase" ):
                return visitor.visitQuantumPhase(self)
            else:
                return visitor.visitChildren(self)




    def quantumPhase(self):

        localctx = BraketPragmasParser.QuantumPhaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_quantumPhase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__22) | (1 << BraketPragmasParser.T__24) | (1 << BraketPragmasParser.T__25) | (1 << BraketPragmasParser.T__26))) != 0):
                self.state = 670
                self.quantumGateModifier()
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 676
            self.match(BraketPragmasParser.T__18)
            self.state = 677
            self.match(BraketPragmasParser.LPAREN)
            self.state = 678
            self.expression(0)
            self.state = 679
            self.match(BraketPragmasParser.RPAREN)
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.Identifier:
                self.state = 680
                self.indexedIdentifier()
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==BraketPragmasParser.COMMA:
                    self.state = 681
                    self.match(BraketPragmasParser.COMMA)
                    self.state = 682
                    self.indexedIdentifier()
                    self.state = 687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumResetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexedIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumReset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumReset" ):
                listener.enterQuantumReset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumReset" ):
                listener.exitQuantumReset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumReset" ):
                return visitor.visitQuantumReset(self)
            else:
                return visitor.visitChildren(self)




    def quantumReset(self):

        localctx = BraketPragmasParser.QuantumResetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_quantumReset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(BraketPragmasParser.T__19)
            self.state = 691
            self.indexedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumMeasurementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexedIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumMeasurement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumMeasurement" ):
                listener.enterQuantumMeasurement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumMeasurement" ):
                listener.exitQuantumMeasurement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumMeasurement" ):
                return visitor.visitQuantumMeasurement(self)
            else:
                return visitor.visitChildren(self)




    def quantumMeasurement(self):

        localctx = BraketPragmasParser.QuantumMeasurementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_quantumMeasurement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(BraketPragmasParser.T__20)
            self.state = 694
            self.indexedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumMeasurementAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumMeasurement(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumMeasurementContext,0)


        def ARROW(self):
            return self.getToken(BraketPragmasParser.ARROW, 0)

        def indexedIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,0)


        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumMeasurementAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumMeasurementAssignment" ):
                listener.enterQuantumMeasurementAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumMeasurementAssignment" ):
                listener.exitQuantumMeasurementAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumMeasurementAssignment" ):
                return visitor.visitQuantumMeasurementAssignment(self)
            else:
                return visitor.visitChildren(self)




    def quantumMeasurementAssignment(self):

        localctx = BraketPragmasParser.QuantumMeasurementAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_quantumMeasurementAssignment)
        self._la = 0 # Token type
        try:
            self.state = 705
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 696
                self.quantumMeasurement()
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==BraketPragmasParser.ARROW:
                    self.state = 697
                    self.match(BraketPragmasParser.ARROW)
                    self.state = 698
                    self.indexedIdentifier()


                pass
            elif token in [BraketPragmasParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 701
                self.indexedIdentifier()
                self.state = 702
                self.match(BraketPragmasParser.EQUALS)
                self.state = 703
                self.quantumMeasurement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumBarrierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IndexedIdentifierContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumBarrier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumBarrier" ):
                listener.enterQuantumBarrier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumBarrier" ):
                listener.exitQuantumBarrier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumBarrier" ):
                return visitor.visitQuantumBarrier(self)
            else:
                return visitor.visitChildren(self)




    def quantumBarrier(self):

        localctx = BraketPragmasParser.QuantumBarrierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_quantumBarrier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(BraketPragmasParser.T__21)
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.Identifier:
                self.state = 708
                self.indexedIdentifier()
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==BraketPragmasParser.COMMA:
                    self.state = 709
                    self.match(BraketPragmasParser.COMMA)
                    self.state = 710
                    self.indexedIdentifier()
                    self.state = 715
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumGateModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def powModifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.PowModifierContext,0)


        def ctrlModifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.CtrlModifierContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumGateModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateModifier" ):
                listener.enterQuantumGateModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateModifier" ):
                listener.exitQuantumGateModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumGateModifier" ):
                return visitor.visitQuantumGateModifier(self)
            else:
                return visitor.visitChildren(self)




    def quantumGateModifier(self):

        localctx = BraketPragmasParser.QuantumGateModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_quantumGateModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__22]:
                self.state = 718
                self.match(BraketPragmasParser.T__22)
                pass
            elif token in [BraketPragmasParser.T__24]:
                self.state = 719
                self.powModifier()
                pass
            elif token in [BraketPragmasParser.T__25, BraketPragmasParser.T__26]:
                self.state = 720
                self.ctrlModifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 723
            self.match(BraketPragmasParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_powModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowModifier" ):
                listener.enterPowModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowModifier" ):
                listener.exitPowModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowModifier" ):
                return visitor.visitPowModifier(self)
            else:
                return visitor.visitChildren(self)




    def powModifier(self):

        localctx = BraketPragmasParser.PowModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_powModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(BraketPragmasParser.T__24)
            self.state = 726
            self.match(BraketPragmasParser.LPAREN)
            self.state = 727
            self.expression(0)
            self.state = 728
            self.match(BraketPragmasParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtrlModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_ctrlModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtrlModifier" ):
                listener.enterCtrlModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtrlModifier" ):
                listener.exitCtrlModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtrlModifier" ):
                return visitor.visitCtrlModifier(self)
            else:
                return visitor.visitChildren(self)




    def ctrlModifier(self):

        localctx = BraketPragmasParser.CtrlModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_ctrlModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__25 or _la==BraketPragmasParser.T__26):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LPAREN:
                self.state = 731
                self.match(BraketPragmasParser.LPAREN)
                self.state = 732
                self.expression(0)
                self.state = 733
                self.match(BraketPragmasParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumGateCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateName(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumGateNameContext,0)


        def indexedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IndexedIdentifierContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,i)


        def quantumGateModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.QuantumGateModifierContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.QuantumGateModifierContext,i)


        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_quantumGateCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateCall" ):
                listener.enterQuantumGateCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateCall" ):
                listener.exitQuantumGateCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumGateCall" ):
                return visitor.visitQuantumGateCall(self)
            else:
                return visitor.visitChildren(self)




    def quantumGateCall(self):

        localctx = BraketPragmasParser.QuantumGateCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_quantumGateCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__22) | (1 << BraketPragmasParser.T__24) | (1 << BraketPragmasParser.T__25) | (1 << BraketPragmasParser.T__26))) != 0):
                self.state = 737
                self.quantumGateModifier()
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 743
            self.quantumGateName()
            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LPAREN:
                self.state = 744
                self.match(BraketPragmasParser.LPAREN)
                self.state = 745
                self.expressionList()
                self.state = 746
                self.match(BraketPragmasParser.RPAREN)


            self.state = 750
            self.indexedIdentifier()
            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 751
                self.match(BraketPragmasParser.COMMA)
                self.state = 752
                self.indexedIdentifier()
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(BraketPragmasParser.MINUS, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperator" ):
                return visitor.visitUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryOperator(self):

        localctx = BraketPragmasParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__27 or _la==BraketPragmasParser.T__28 or _la==BraketPragmasParser.MINUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = BraketPragmasParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__29) | (1 << BraketPragmasParser.T__30) | (1 << BraketPragmasParser.T__31) | (1 << BraketPragmasParser.T__32))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_equalityOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityOperator" ):
                listener.enterEqualityOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityOperator" ):
                listener.exitEqualityOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityOperator" ):
                return visitor.visitEqualityOperator(self)
            else:
                return visitor.visitChildren(self)




    def equalityOperator(self):

        localctx = BraketPragmasParser.EqualityOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_equalityOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__33 or _la==BraketPragmasParser.T__34):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_logicalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOperator" ):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOperator" ):
                listener.exitLogicalOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOperator" ):
                return visitor.visitLogicalOperator(self)
            else:
                return visitor.visitChildren(self)




    def logicalOperator(self):

        localctx = BraketPragmasParser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_logicalOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__35 or _la==BraketPragmasParser.T__36):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = BraketPragmasParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.expression(0)
            self.state = 767
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionTerminator(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionTerminatorContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.UnaryExpressionContext,0)


        def logicalAndExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.LogicalAndExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 150
        self.enterRecursionRule(localctx, 150, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 770
                self.expressionTerminator()
                pass

            elif la_ == 2:
                self.state = 771
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.state = 772
                self.logicalAndExpression(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 780
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 775
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 776
                    self.match(BraketPragmasParser.T__36)
                    self.state = 777
                    self.logicalAndExpression(0) 
                self.state = 782
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitOrExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.BitOrExpressionContext,0)


        def logicalAndExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.LogicalAndExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)



    def logicalAndExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.LogicalAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 152
        self.enterRecursionRule(localctx, 152, self.RULE_logicalAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.bitOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 791
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.LogicalAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalAndExpression)
                    self.state = 786
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 787
                    self.match(BraketPragmasParser.T__35)
                    self.state = 788
                    self.bitOrExpression(0) 
                self.state = 793
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xOrExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.XOrExpressionContext,0)


        def bitOrExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.BitOrExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_bitOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOrExpression" ):
                listener.enterBitOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOrExpression" ):
                listener.exitBitOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitOrExpression" ):
                return visitor.visitBitOrExpression(self)
            else:
                return visitor.visitChildren(self)



    def bitOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.BitOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 154
        self.enterRecursionRule(localctx, 154, self.RULE_bitOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.xOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 802
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.BitOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitOrExpression)
                    self.state = 797
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 798
                    self.match(BraketPragmasParser.T__37)
                    self.state = 799
                    self.xOrExpression(0) 
                self.state = 804
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class XOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitAndExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.BitAndExpressionContext,0)


        def xOrExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.XOrExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_xOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXOrExpression" ):
                listener.enterXOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXOrExpression" ):
                listener.exitXOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXOrExpression" ):
                return visitor.visitXOrExpression(self)
            else:
                return visitor.visitChildren(self)



    def xOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.XOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 156
        self.enterRecursionRule(localctx, 156, self.RULE_xOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.bitAndExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 813
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.XOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_xOrExpression)
                    self.state = 808
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 809
                    self.match(BraketPragmasParser.T__38)
                    self.state = 810
                    self.bitAndExpression(0) 
                self.state = 815
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.EqualityExpressionContext,0)


        def bitAndExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.BitAndExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_bitAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitAndExpression" ):
                listener.enterBitAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitAndExpression" ):
                listener.exitBitAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitAndExpression" ):
                return visitor.visitBitAndExpression(self)
            else:
                return visitor.visitChildren(self)



    def bitAndExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.BitAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 158
        self.enterRecursionRule(localctx, 158, self.RULE_bitAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.equalityExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 824
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.BitAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitAndExpression)
                    self.state = 819
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 820
                    self.match(BraketPragmasParser.T__39)
                    self.state = 821
                    self.equalityExpression(0) 
                self.state = 826
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparisonExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ComparisonExpressionContext,0)


        def equalityExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.EqualityExpressionContext,0)


        def equalityOperator(self):
            return self.getTypedRuleContext(BraketPragmasParser.EqualityOperatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)



    def equalityExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.EqualityExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 160
        self.enterRecursionRule(localctx, 160, self.RULE_equalityExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.comparisonExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 836
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.EqualityExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                    self.state = 830
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 831
                    self.equalityOperator()
                    self.state = 832
                    self.comparisonExpression(0) 
                self.state = 838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ComparisonExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitShiftExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.BitShiftExpressionContext,0)


        def comparisonExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ComparisonExpressionContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(BraketPragmasParser.ComparisonOperatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_comparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonExpression" ):
                listener.enterComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonExpression" ):
                listener.exitComparisonExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonExpression" ):
                return visitor.visitComparisonExpression(self)
            else:
                return visitor.visitChildren(self)



    def comparisonExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.ComparisonExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 162
        self.enterRecursionRule(localctx, 162, self.RULE_comparisonExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.bitShiftExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 848
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.ComparisonExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_comparisonExpression)
                    self.state = 842
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 843
                    self.comparisonOperator()
                    self.state = 844
                    self.bitShiftExpression(0) 
                self.state = 850
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitShiftExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.AdditiveExpressionContext,0)


        def bitShiftExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.BitShiftExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_bitShiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitShiftExpression" ):
                listener.enterBitShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitShiftExpression" ):
                listener.exitBitShiftExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitShiftExpression" ):
                return visitor.visitBitShiftExpression(self)
            else:
                return visitor.visitChildren(self)



    def bitShiftExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.BitShiftExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 164
        self.enterRecursionRule(localctx, 164, self.RULE_bitShiftExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.additiveExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 859
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.BitShiftExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitShiftExpression)
                    self.state = 854
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 855
                    _la = self._input.LA(1)
                    if not(_la==BraketPragmasParser.T__40 or _la==BraketPragmasParser.T__41):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 856
                    self.additiveExpression(0) 
                self.state = 861
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiplicativeExpressionContext,0)


        def additiveExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.AdditiveExpressionContext,0)


        def PLUS(self):
            return self.getToken(BraketPragmasParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(BraketPragmasParser.MINUS, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)



    def additiveExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.AdditiveExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 166
        self.enterRecursionRule(localctx, 166, self.RULE_additiveExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.multiplicativeExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 870
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.AdditiveExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                    self.state = 865
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 866
                    _la = self._input.LA(1)
                    if not(_la==BraketPragmasParser.PLUS or _la==BraketPragmasParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 867
                    self.multiplicativeExpression(0) 
                self.state = 872
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.UnaryExpressionContext,0)


        def multiplicativeExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.MultiplicativeExpressionContext,0)


        def MUL(self):
            return self.getToken(BraketPragmasParser.MUL, 0)

        def DIV(self):
            return self.getToken(BraketPragmasParser.DIV, 0)

        def MOD(self):
            return self.getToken(BraketPragmasParser.MOD, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)



    def multiplicativeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.MultiplicativeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 168
        self.enterRecursionRule(localctx, 168, self.RULE_multiplicativeExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.unaryExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 881
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                    self.state = 876
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 877
                    _la = self._input.LA(1)
                    if not(((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (BraketPragmasParser.MUL - 111)) | (1 << (BraketPragmasParser.DIV - 111)) | (1 << (BraketPragmasParser.MOD - 111)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 878
                    self.unaryExpression() 
                self.state = 883
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def powerExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.PowerExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(BraketPragmasParser.UnaryOperatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpression" ):
                return visitor.visitUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryExpression(self):

        localctx = BraketPragmasParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.T__27 or _la==BraketPragmasParser.T__28 or _la==BraketPragmasParser.MINUS:
                self.state = 884
                self.unaryOperator()


            self.state = 887
            self.powerExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexExpressionContext,0)


        def powerExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.PowerExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_powerExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerExpression" ):
                listener.enterPowerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerExpression" ):
                listener.exitPowerExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowerExpression" ):
                return visitor.visitPowerExpression(self)
            else:
                return visitor.visitChildren(self)



    def powerExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.PowerExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 172
        self.enterRecursionRule(localctx, 172, self.RULE_powerExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.indexExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 897
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.PowerExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_powerExpression)
                    self.state = 892
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 893
                    self.match(BraketPragmasParser.T__42)
                    self.state = 894
                    self.indexExpression(0) 
                self.state = 899
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class IndexOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def discreteSet(self):
            return self.getTypedRuleContext(BraketPragmasParser.DiscreteSetContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)


        def rangeDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.RangeDefinitionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.RangeDefinitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_indexOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexOperator" ):
                listener.enterIndexOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexOperator" ):
                listener.exitIndexOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexOperator" ):
                return visitor.visitIndexOperator(self)
            else:
                return visitor.visitChildren(self)




    def indexOperator(self):

        localctx = BraketPragmasParser.IndexOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_indexOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(BraketPragmasParser.LBRACKET)
            self.state = 916
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.LBRACE]:
                self.state = 901
                self.discreteSet()
                pass
            elif token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__27, BraketPragmasParser.T__28, BraketPragmasParser.T__43, BraketPragmasParser.T__44, BraketPragmasParser.T__45, BraketPragmasParser.T__46, BraketPragmasParser.T__47, BraketPragmasParser.T__48, BraketPragmasParser.T__49, BraketPragmasParser.T__50, BraketPragmasParser.T__51, BraketPragmasParser.T__52, BraketPragmasParser.T__53, BraketPragmasParser.T__54, BraketPragmasParser.T__55, BraketPragmasParser.T__56, BraketPragmasParser.T__81, BraketPragmasParser.T__82, BraketPragmasParser.T__84, BraketPragmasParser.LPAREN, BraketPragmasParser.COLON, BraketPragmasParser.MINUS, BraketPragmasParser.ImagNumber, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.SIZEOF, BraketPragmasParser.Constant, BraketPragmasParser.Integer, BraketPragmasParser.Identifier, BraketPragmasParser.RealNumber, BraketPragmasParser.TimingLiteral, BraketPragmasParser.StringLiteral]:
                self.state = 904
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 902
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 903
                    self.rangeDefinition()
                    pass


                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==BraketPragmasParser.COMMA:
                    self.state = 906
                    self.match(BraketPragmasParser.COMMA)
                    self.state = 909
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                    if la_ == 1:
                        self.state = 907
                        self.expression(0)
                        pass

                    elif la_ == 2:
                        self.state = 908
                        self.rangeDefinition()
                        pass


                    self.state = 915
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 918
            self.match(BraketPragmasParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionTerminator(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionTerminatorContext,0)


        def indexExpression(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexExpressionContext,0)


        def indexOperator(self):
            return self.getTypedRuleContext(BraketPragmasParser.IndexOperatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_indexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExpression" ):
                listener.enterIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExpression" ):
                listener.exitIndexExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexExpression" ):
                return visitor.visitIndexExpression(self)
            else:
                return visitor.visitChildren(self)



    def indexExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = BraketPragmasParser.IndexExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 176
        self.enterRecursionRule(localctx, 176, self.RULE_indexExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.expressionTerminator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 927
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = BraketPragmasParser.IndexExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_indexExpression)
                    self.state = 923
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 924
                    self.indexOperator() 
                self.state = 929
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class IndexedIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def indexOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IndexOperatorContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IndexOperatorContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_indexedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexedIdentifier" ):
                listener.enterIndexedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexedIdentifier" ):
                listener.exitIndexedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexedIdentifier" ):
                return visitor.visitIndexedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def indexedIdentifier(self):

        localctx = BraketPragmasParser.IndexedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_indexedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.match(BraketPragmasParser.Identifier)
            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.LBRACKET:
                self.state = 931
                self.indexOperator()
                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionTerminatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Constant(self):
            return self.getToken(BraketPragmasParser.Constant, 0)

        def Integer(self):
            return self.getToken(BraketPragmasParser.Integer, 0)

        def RealNumber(self):
            return self.getToken(BraketPragmasParser.RealNumber, 0)

        def ImagNumber(self):
            return self.getToken(BraketPragmasParser.ImagNumber, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(BraketPragmasParser.BooleanLiteralContext,0)


        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def StringLiteral(self):
            return self.getToken(BraketPragmasParser.StringLiteral, 0)

        def builtInCall(self):
            return self.getTypedRuleContext(BraketPragmasParser.BuiltInCallContext,0)


        def externOrSubroutineCall(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExternOrSubroutineCallContext,0)


        def timingIdentifier(self):
            return self.getTypedRuleContext(BraketPragmasParser.TimingIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_expressionTerminator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionTerminator" ):
                listener.enterExpressionTerminator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionTerminator" ):
                listener.exitExpressionTerminator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionTerminator" ):
                return visitor.visitExpressionTerminator(self)
            else:
                return visitor.visitChildren(self)




    def expressionTerminator(self):

        localctx = BraketPragmasParser.ExpressionTerminatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_expressionTerminator)
        try:
            self.state = 951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 937
                self.match(BraketPragmasParser.Constant)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 938
                self.match(BraketPragmasParser.Integer)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 939
                self.match(BraketPragmasParser.RealNumber)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 940
                self.match(BraketPragmasParser.ImagNumber)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 941
                self.booleanLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 942
                self.match(BraketPragmasParser.Identifier)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 943
                self.match(BraketPragmasParser.StringLiteral)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 944
                self.builtInCall()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 945
                self.externOrSubroutineCall()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 946
                self.timingIdentifier()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 947
                self.match(BraketPragmasParser.LPAREN)
                self.state = 948
                self.expression(0)
                self.state = 949
                self.match(BraketPragmasParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = BraketPragmasParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__43 or _la==BraketPragmasParser.T__44):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BuiltInCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def builtInMath(self):
            return self.getTypedRuleContext(BraketPragmasParser.BuiltInMathContext,0)


        def castOperator(self):
            return self.getTypedRuleContext(BraketPragmasParser.CastOperatorContext,0)


        def SIZEOF(self):
            return self.getToken(BraketPragmasParser.SIZEOF, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_builtInCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltInCall" ):
                listener.enterBuiltInCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltInCall" ):
                listener.exitBuiltInCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBuiltInCall" ):
                return visitor.visitBuiltInCall(self)
            else:
                return visitor.visitChildren(self)




    def builtInCall(self):

        localctx = BraketPragmasParser.BuiltInCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_builtInCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__45, BraketPragmasParser.T__46, BraketPragmasParser.T__47, BraketPragmasParser.T__48, BraketPragmasParser.T__49, BraketPragmasParser.T__50, BraketPragmasParser.T__51, BraketPragmasParser.T__52, BraketPragmasParser.T__53, BraketPragmasParser.T__54, BraketPragmasParser.T__55, BraketPragmasParser.T__56]:
                self.state = 955
                self.builtInMath()
                pass
            elif token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__81, BraketPragmasParser.T__82, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY]:
                self.state = 956
                self.castOperator()
                pass
            elif token in [BraketPragmasParser.SIZEOF]:
                self.state = 957
                self.match(BraketPragmasParser.SIZEOF)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 960
            self.match(BraketPragmasParser.LPAREN)
            self.state = 961
            self.expressionList()
            self.state = 962
            self.match(BraketPragmasParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BuiltInMathContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_builtInMath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltInMath" ):
                listener.enterBuiltInMath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltInMath" ):
                listener.exitBuiltInMath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBuiltInMath" ):
                return visitor.visitBuiltInMath(self)
            else:
                return visitor.visitChildren(self)




    def builtInMath(self):

        localctx = BraketPragmasParser.BuiltInMathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_builtInMath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55) | (1 << BraketPragmasParser.T__56))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalType(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalTypeContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_castOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastOperator" ):
                listener.enterCastOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastOperator" ):
                listener.exitCastOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastOperator" ):
                return visitor.visitCastOperator(self)
            else:
                return visitor.visitChildren(self)




    def castOperator(self):

        localctx = BraketPragmasParser.CastOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_castOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.classicalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = BraketPragmasParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.expression(0)
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 969
                self.match(BraketPragmasParser.COMMA)
                self.state = 970
                self.expression(0)
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualsExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_equalsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualsExpression" ):
                listener.enterEqualsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualsExpression" ):
                listener.exitEqualsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualsExpression" ):
                return visitor.visitEqualsExpression(self)
            else:
                return visitor.visitChildren(self)




    def equalsExpression(self):

        localctx = BraketPragmasParser.EqualsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_equalsExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.match(BraketPragmasParser.EQUALS)
            self.state = 977
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(BraketPragmasParser.EQUALS, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = BraketPragmasParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            _la = self._input.LA(1)
            if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (BraketPragmasParser.T__57 - 58)) | (1 << (BraketPragmasParser.T__58 - 58)) | (1 << (BraketPragmasParser.T__59 - 58)) | (1 << (BraketPragmasParser.T__60 - 58)) | (1 << (BraketPragmasParser.T__61 - 58)) | (1 << (BraketPragmasParser.T__62 - 58)) | (1 << (BraketPragmasParser.T__63 - 58)) | (1 << (BraketPragmasParser.T__64 - 58)) | (1 << (BraketPragmasParser.T__65 - 58)) | (1 << (BraketPragmasParser.T__66 - 58)) | (1 << (BraketPragmasParser.T__67 - 58)) | (1 << (BraketPragmasParser.T__68 - 58)) | (1 << (BraketPragmasParser.EQUALS - 58)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscreteSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,i)


        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_discreteSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscreteSet" ):
                listener.enterDiscreteSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscreteSet" ):
                listener.exitDiscreteSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiscreteSet" ):
                return visitor.visitDiscreteSet(self)
            else:
                return visitor.visitChildren(self)




    def discreteSet(self):

        localctx = BraketPragmasParser.DiscreteSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_discreteSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.match(BraketPragmasParser.LBRACE)
            self.state = 982
            self.expression(0)
            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 983
                self.match(BraketPragmasParser.COMMA)
                self.state = 984
                self.expression(0)
                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 990
            self.match(BraketPragmasParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def discreteSet(self):
            return self.getTypedRuleContext(BraketPragmasParser.DiscreteSetContext,0)


        def LBRACKET(self):
            return self.getToken(BraketPragmasParser.LBRACKET, 0)

        def rangeDefinition(self):
            return self.getTypedRuleContext(BraketPragmasParser.RangeDefinitionContext,0)


        def RBRACKET(self):
            return self.getToken(BraketPragmasParser.RBRACKET, 0)

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_setDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetDeclaration" ):
                listener.enterSetDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetDeclaration" ):
                listener.exitSetDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetDeclaration" ):
                return visitor.visitSetDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def setDeclaration(self):

        localctx = BraketPragmasParser.SetDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_setDeclaration)
        try:
            self.state = 998
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 992
                self.discreteSet()
                pass
            elif token in [BraketPragmasParser.LBRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 993
                self.match(BraketPragmasParser.LBRACKET)
                self.state = 994
                self.rangeDefinition()
                self.state = 995
                self.match(BraketPragmasParser.RBRACKET)
                pass
            elif token in [BraketPragmasParser.Identifier]:
                self.enterOuterAlt(localctx, 3)
                self.state = 997
                self.match(BraketPragmasParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.StatementContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.StatementContext,i)


        def controlDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ControlDirectiveContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ControlDirectiveContext,i)


        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_programBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgramBlock" ):
                listener.enterProgramBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgramBlock" ):
                listener.exitProgramBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgramBlock" ):
                return visitor.visitProgramBlock(self)
            else:
                return visitor.visitChildren(self)




    def programBlock(self):

        localctx = BraketPragmasParser.ProgramBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_programBlock)
        self._la = 0 # Token type
        try:
            self.state = 1011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1000
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1001
                self.controlDirective()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1002
                self.match(BraketPragmasParser.LBRACE)
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__13) | (1 << BraketPragmasParser.T__16) | (1 << BraketPragmasParser.T__17) | (1 << BraketPragmasParser.T__18) | (1 << BraketPragmasParser.T__19) | (1 << BraketPragmasParser.T__20) | (1 << BraketPragmasParser.T__21) | (1 << BraketPragmasParser.T__22) | (1 << BraketPragmasParser.T__24) | (1 << BraketPragmasParser.T__25) | (1 << BraketPragmasParser.T__26) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__28) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55) | (1 << BraketPragmasParser.T__56))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (BraketPragmasParser.T__69 - 70)) | (1 << (BraketPragmasParser.T__71 - 70)) | (1 << (BraketPragmasParser.T__73 - 70)) | (1 << (BraketPragmasParser.T__74 - 70)) | (1 << (BraketPragmasParser.T__75 - 70)) | (1 << (BraketPragmasParser.T__76 - 70)) | (1 << (BraketPragmasParser.T__77 - 70)) | (1 << (BraketPragmasParser.T__81 - 70)) | (1 << (BraketPragmasParser.T__82 - 70)) | (1 << (BraketPragmasParser.T__83 - 70)) | (1 << (BraketPragmasParser.T__84 - 70)) | (1 << (BraketPragmasParser.T__85 - 70)) | (1 << (BraketPragmasParser.T__86 - 70)) | (1 << (BraketPragmasParser.LPAREN - 70)) | (1 << (BraketPragmasParser.MINUS - 70)) | (1 << (BraketPragmasParser.ImagNumber - 70)) | (1 << (BraketPragmasParser.COMPLEX - 70)) | (1 << (BraketPragmasParser.CONST - 70)) | (1 << (BraketPragmasParser.ARRAY - 70)) | (1 << (BraketPragmasParser.SIZEOF - 70)) | (1 << (BraketPragmasParser.Constant - 70)) | (1 << (BraketPragmasParser.Integer - 70)) | (1 << (BraketPragmasParser.Identifier - 70)) | (1 << (BraketPragmasParser.RealNumber - 70)) | (1 << (BraketPragmasParser.TimingLiteral - 70)) | (1 << (BraketPragmasParser.StringLiteral - 70)))) != 0):
                    self.state = 1005
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                    if la_ == 1:
                        self.state = 1003
                        self.statement()
                        pass

                    elif la_ == 2:
                        self.state = 1004
                        self.controlDirective()
                        pass


                    self.state = 1009
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1010
                self.match(BraketPragmasParser.RBRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BranchingStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def programBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.ProgramBlockContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.ProgramBlockContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_branchingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBranchingStatement" ):
                listener.enterBranchingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBranchingStatement" ):
                listener.exitBranchingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBranchingStatement" ):
                return visitor.visitBranchingStatement(self)
            else:
                return visitor.visitChildren(self)




    def branchingStatement(self):

        localctx = BraketPragmasParser.BranchingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_branchingStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.match(BraketPragmasParser.T__69)
            self.state = 1014
            self.match(BraketPragmasParser.LPAREN)
            self.state = 1015
            self.expression(0)
            self.state = 1016
            self.match(BraketPragmasParser.RPAREN)
            self.state = 1017
            self.programBlock()
            self.state = 1020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 1018
                self.match(BraketPragmasParser.T__70)
                self.state = 1019
                self.programBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopSignatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def setDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.SetDeclarationContext,0)


        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_loopSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopSignature" ):
                listener.enterLoopSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopSignature" ):
                listener.exitLoopSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopSignature" ):
                return visitor.visitLoopSignature(self)
            else:
                return visitor.visitChildren(self)




    def loopSignature(self):

        localctx = BraketPragmasParser.LoopSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_loopSignature)
        try:
            self.state = 1031
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1022
                self.match(BraketPragmasParser.T__71)
                self.state = 1023
                self.match(BraketPragmasParser.Identifier)
                self.state = 1024
                self.match(BraketPragmasParser.T__72)
                self.state = 1025
                self.setDeclaration()
                pass
            elif token in [BraketPragmasParser.T__73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1026
                self.match(BraketPragmasParser.T__73)
                self.state = 1027
                self.match(BraketPragmasParser.LPAREN)
                self.state = 1028
                self.expression(0)
                self.state = 1029
                self.match(BraketPragmasParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loopSignature(self):
            return self.getTypedRuleContext(BraketPragmasParser.LoopSignatureContext,0)


        def programBlock(self):
            return self.getTypedRuleContext(BraketPragmasParser.ProgramBlockContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_loopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStatement" ):
                listener.enterLoopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStatement" ):
                listener.exitLoopStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStatement" ):
                return visitor.visitLoopStatement(self)
            else:
                return visitor.visitChildren(self)




    def loopStatement(self):

        localctx = BraketPragmasParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_loopStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.loopSignature()
            self.state = 1034
            self.programBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_endStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndStatement" ):
                listener.enterEndStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndStatement" ):
                listener.exitEndStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndStatement" ):
                return visitor.visitEndStatement(self)
            else:
                return visitor.visitChildren(self)




    def endStatement(self):

        localctx = BraketPragmasParser.EndStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_endStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.match(BraketPragmasParser.T__74)
            self.state = 1037
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def expression(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionContext,0)


        def quantumMeasurement(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumMeasurementContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = BraketPragmasParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(BraketPragmasParser.T__75)
            self.state = 1042
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__6, BraketPragmasParser.T__7, BraketPragmasParser.T__8, BraketPragmasParser.T__9, BraketPragmasParser.T__10, BraketPragmasParser.T__11, BraketPragmasParser.T__12, BraketPragmasParser.T__27, BraketPragmasParser.T__28, BraketPragmasParser.T__43, BraketPragmasParser.T__44, BraketPragmasParser.T__45, BraketPragmasParser.T__46, BraketPragmasParser.T__47, BraketPragmasParser.T__48, BraketPragmasParser.T__49, BraketPragmasParser.T__50, BraketPragmasParser.T__51, BraketPragmasParser.T__52, BraketPragmasParser.T__53, BraketPragmasParser.T__54, BraketPragmasParser.T__55, BraketPragmasParser.T__56, BraketPragmasParser.T__81, BraketPragmasParser.T__82, BraketPragmasParser.T__84, BraketPragmasParser.LPAREN, BraketPragmasParser.MINUS, BraketPragmasParser.ImagNumber, BraketPragmasParser.COMPLEX, BraketPragmasParser.ARRAY, BraketPragmasParser.SIZEOF, BraketPragmasParser.Constant, BraketPragmasParser.Integer, BraketPragmasParser.Identifier, BraketPragmasParser.RealNumber, BraketPragmasParser.TimingLiteral, BraketPragmasParser.StringLiteral]:
                self.state = 1040
                self.expression(0)
                pass
            elif token in [BraketPragmasParser.T__20]:
                self.state = 1041
                self.quantumMeasurement()
                pass
            elif token in [BraketPragmasParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 1044
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def endStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.EndStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.ReturnStatementContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_controlDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlDirective" ):
                listener.enterControlDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlDirective" ):
                listener.exitControlDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlDirective" ):
                return visitor.visitControlDirective(self)
            else:
                return visitor.visitChildren(self)




    def controlDirective(self):

        localctx = BraketPragmasParser.ControlDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_controlDirective)
        self._la = 0 # Token type
        try:
            self.state = 1050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__76, BraketPragmasParser.T__77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1046
                _la = self._input.LA(1)
                if not(_la==BraketPragmasParser.T__76 or _la==BraketPragmasParser.T__77):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1047
                self.match(BraketPragmasParser.SEMICOLON)
                pass
            elif token in [BraketPragmasParser.T__74]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1048
                self.endStatement()
                pass
            elif token in [BraketPragmasParser.T__75]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1049
                self.returnStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def classicalTypeList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalTypeListContext,0)


        def returnSignature(self):
            return self.getTypedRuleContext(BraketPragmasParser.ReturnSignatureContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_externDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternDeclaration" ):
                listener.enterExternDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternDeclaration" ):
                listener.exitExternDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternDeclaration" ):
                return visitor.visitExternDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def externDeclaration(self):

        localctx = BraketPragmasParser.ExternDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_externDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(BraketPragmasParser.T__78)
            self.state = 1053
            self.match(BraketPragmasParser.Identifier)
            self.state = 1054
            self.match(BraketPragmasParser.LPAREN)
            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (BraketPragmasParser.T__81 - 82)) | (1 << (BraketPragmasParser.T__82 - 82)) | (1 << (BraketPragmasParser.COMPLEX - 82)) | (1 << (BraketPragmasParser.ARRAY - 82)))) != 0):
                self.state = 1055
                self.classicalTypeList()


            self.state = 1058
            self.match(BraketPragmasParser.RPAREN)
            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.ARROW:
                self.state = 1059
                self.returnSignature()


            self.state = 1062
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternOrSubroutineCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_externOrSubroutineCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternOrSubroutineCall" ):
                listener.enterExternOrSubroutineCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternOrSubroutineCall" ):
                listener.exitExternOrSubroutineCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternOrSubroutineCall" ):
                return visitor.visitExternOrSubroutineCall(self)
            else:
                return visitor.visitChildren(self)




    def externOrSubroutineCall(self):

        localctx = BraketPragmasParser.ExternOrSubroutineCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_externOrSubroutineCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.match(BraketPragmasParser.Identifier)
            self.state = 1065
            self.match(BraketPragmasParser.LPAREN)
            self.state = 1067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__28) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55) | (1 << BraketPragmasParser.T__56))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (BraketPragmasParser.T__81 - 82)) | (1 << (BraketPragmasParser.T__82 - 82)) | (1 << (BraketPragmasParser.T__84 - 82)) | (1 << (BraketPragmasParser.LPAREN - 82)) | (1 << (BraketPragmasParser.MINUS - 82)) | (1 << (BraketPragmasParser.ImagNumber - 82)) | (1 << (BraketPragmasParser.COMPLEX - 82)) | (1 << (BraketPragmasParser.ARRAY - 82)) | (1 << (BraketPragmasParser.SIZEOF - 82)) | (1 << (BraketPragmasParser.Constant - 82)) | (1 << (BraketPragmasParser.Integer - 82)) | (1 << (BraketPragmasParser.Identifier - 82)) | (1 << (BraketPragmasParser.RealNumber - 82)) | (1 << (BraketPragmasParser.TimingLiteral - 82)) | (1 << (BraketPragmasParser.StringLiteral - 82)))) != 0):
                self.state = 1066
                self.expressionList()


            self.state = 1069
            self.match(BraketPragmasParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubroutineDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def subroutineBlock(self):
            return self.getTypedRuleContext(BraketPragmasParser.SubroutineBlockContext,0)


        def anyTypeArgumentList(self):
            return self.getTypedRuleContext(BraketPragmasParser.AnyTypeArgumentListContext,0)


        def returnSignature(self):
            return self.getTypedRuleContext(BraketPragmasParser.ReturnSignatureContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_subroutineDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubroutineDefinition" ):
                listener.enterSubroutineDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubroutineDefinition" ):
                listener.exitSubroutineDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubroutineDefinition" ):
                return visitor.visitSubroutineDefinition(self)
            else:
                return visitor.visitChildren(self)




    def subroutineDefinition(self):

        localctx = BraketPragmasParser.SubroutineDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_subroutineDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.match(BraketPragmasParser.T__79)
            self.state = 1072
            self.match(BraketPragmasParser.Identifier)
            self.state = 1073
            self.match(BraketPragmasParser.LPAREN)
            self.state = 1075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__4) | (1 << BraketPragmasParser.T__5) | (1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (BraketPragmasParser.T__81 - 82)) | (1 << (BraketPragmasParser.T__82 - 82)) | (1 << (BraketPragmasParser.COMPLEX - 82)) | (1 << (BraketPragmasParser.CONST - 82)) | (1 << (BraketPragmasParser.MUTABLE - 82)))) != 0):
                self.state = 1074
                self.anyTypeArgumentList()


            self.state = 1077
            self.match(BraketPragmasParser.RPAREN)
            self.state = 1079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.ARROW:
                self.state = 1078
                self.returnSignature()


            self.state = 1081
            self.subroutineBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubroutineBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.StatementContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.StatementContext,i)


        def returnStatement(self):
            return self.getTypedRuleContext(BraketPragmasParser.ReturnStatementContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_subroutineBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubroutineBlock" ):
                listener.enterSubroutineBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubroutineBlock" ):
                listener.exitSubroutineBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubroutineBlock" ):
                return visitor.visitSubroutineBlock(self)
            else:
                return visitor.visitChildren(self)




    def subroutineBlock(self):

        localctx = BraketPragmasParser.SubroutineBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_subroutineBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.match(BraketPragmasParser.LBRACE)
            self.state = 1087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__13) | (1 << BraketPragmasParser.T__16) | (1 << BraketPragmasParser.T__17) | (1 << BraketPragmasParser.T__18) | (1 << BraketPragmasParser.T__19) | (1 << BraketPragmasParser.T__20) | (1 << BraketPragmasParser.T__21) | (1 << BraketPragmasParser.T__22) | (1 << BraketPragmasParser.T__24) | (1 << BraketPragmasParser.T__25) | (1 << BraketPragmasParser.T__26) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__28) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55) | (1 << BraketPragmasParser.T__56))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (BraketPragmasParser.T__69 - 70)) | (1 << (BraketPragmasParser.T__71 - 70)) | (1 << (BraketPragmasParser.T__73 - 70)) | (1 << (BraketPragmasParser.T__74 - 70)) | (1 << (BraketPragmasParser.T__81 - 70)) | (1 << (BraketPragmasParser.T__82 - 70)) | (1 << (BraketPragmasParser.T__83 - 70)) | (1 << (BraketPragmasParser.T__84 - 70)) | (1 << (BraketPragmasParser.T__85 - 70)) | (1 << (BraketPragmasParser.T__86 - 70)) | (1 << (BraketPragmasParser.LPAREN - 70)) | (1 << (BraketPragmasParser.MINUS - 70)) | (1 << (BraketPragmasParser.ImagNumber - 70)) | (1 << (BraketPragmasParser.COMPLEX - 70)) | (1 << (BraketPragmasParser.CONST - 70)) | (1 << (BraketPragmasParser.ARRAY - 70)) | (1 << (BraketPragmasParser.SIZEOF - 70)) | (1 << (BraketPragmasParser.Constant - 70)) | (1 << (BraketPragmasParser.Integer - 70)) | (1 << (BraketPragmasParser.Identifier - 70)) | (1 << (BraketPragmasParser.RealNumber - 70)) | (1 << (BraketPragmasParser.TimingLiteral - 70)) | (1 << (BraketPragmasParser.StringLiteral - 70)))) != 0):
                self.state = 1084
                self.statement()
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.T__75:
                self.state = 1090
                self.returnStatement()


            self.state = 1093
            self.match(BraketPragmasParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.StatementContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.StatementContext,i)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma" ):
                return visitor.visitPragma(self)
            else:
                return visitor.visitChildren(self)




    def pragma(self):

        localctx = BraketPragmasParser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_pragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(BraketPragmasParser.T__80)
            self.state = 1096
            self.match(BraketPragmasParser.LBRACE)
            self.state = 1100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__13) | (1 << BraketPragmasParser.T__16) | (1 << BraketPragmasParser.T__17) | (1 << BraketPragmasParser.T__18) | (1 << BraketPragmasParser.T__19) | (1 << BraketPragmasParser.T__20) | (1 << BraketPragmasParser.T__21) | (1 << BraketPragmasParser.T__22) | (1 << BraketPragmasParser.T__24) | (1 << BraketPragmasParser.T__25) | (1 << BraketPragmasParser.T__26) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__28) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55) | (1 << BraketPragmasParser.T__56))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (BraketPragmasParser.T__69 - 70)) | (1 << (BraketPragmasParser.T__71 - 70)) | (1 << (BraketPragmasParser.T__73 - 70)) | (1 << (BraketPragmasParser.T__74 - 70)) | (1 << (BraketPragmasParser.T__81 - 70)) | (1 << (BraketPragmasParser.T__82 - 70)) | (1 << (BraketPragmasParser.T__83 - 70)) | (1 << (BraketPragmasParser.T__84 - 70)) | (1 << (BraketPragmasParser.T__85 - 70)) | (1 << (BraketPragmasParser.T__86 - 70)) | (1 << (BraketPragmasParser.LPAREN - 70)) | (1 << (BraketPragmasParser.MINUS - 70)) | (1 << (BraketPragmasParser.ImagNumber - 70)) | (1 << (BraketPragmasParser.COMPLEX - 70)) | (1 << (BraketPragmasParser.CONST - 70)) | (1 << (BraketPragmasParser.ARRAY - 70)) | (1 << (BraketPragmasParser.SIZEOF - 70)) | (1 << (BraketPragmasParser.Constant - 70)) | (1 << (BraketPragmasParser.Integer - 70)) | (1 << (BraketPragmasParser.Identifier - 70)) | (1 << (BraketPragmasParser.RealNumber - 70)) | (1 << (BraketPragmasParser.TimingLiteral - 70)) | (1 << (BraketPragmasParser.StringLiteral - 70)))) != 0):
                self.state = 1097
                self.statement()
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1103
            self.match(BraketPragmasParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimingTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_timingType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingType" ):
                listener.enterTimingType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingType" ):
                listener.exitTimingType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingType" ):
                return visitor.visitTimingType(self)
            else:
                return visitor.visitChildren(self)




    def timingType(self):

        localctx = BraketPragmasParser.TimingTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_timingType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__81 or _la==BraketPragmasParser.T__82):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimingBoxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumBlock(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumBlockContext,0)


        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_timingBox

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingBox" ):
                listener.enterTimingBox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingBox" ):
                listener.exitTimingBox(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingBox" ):
                return visitor.visitTimingBox(self)
            else:
                return visitor.visitChildren(self)




    def timingBox(self):

        localctx = BraketPragmasParser.TimingBoxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_timingBox)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            self.match(BraketPragmasParser.T__83)
            self.state = 1109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LBRACKET:
                self.state = 1108
                self.designator()


            self.state = 1111
            self.quantumBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimingIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TimingLiteral(self):
            return self.getToken(BraketPragmasParser.TimingLiteral, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def quantumBlock(self):
            return self.getTypedRuleContext(BraketPragmasParser.QuantumBlockContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_timingIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingIdentifier" ):
                listener.enterTimingIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingIdentifier" ):
                listener.exitTimingIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingIdentifier" ):
                return visitor.visitTimingIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def timingIdentifier(self):

        localctx = BraketPragmasParser.TimingIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_timingIdentifier)
        try:
            self.state = 1121
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.TimingLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1113
                self.match(BraketPragmasParser.TimingLiteral)
                pass
            elif token in [BraketPragmasParser.T__84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1114
                self.match(BraketPragmasParser.T__84)
                self.state = 1115
                self.match(BraketPragmasParser.LPAREN)
                self.state = 1118
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [BraketPragmasParser.Identifier]:
                    self.state = 1116
                    self.match(BraketPragmasParser.Identifier)
                    pass
                elif token in [BraketPragmasParser.LBRACE]:
                    self.state = 1117
                    self.quantumBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1120
                self.match(BraketPragmasParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimingInstructionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_timingInstructionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingInstructionName" ):
                listener.enterTimingInstructionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingInstructionName" ):
                listener.exitTimingInstructionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingInstructionName" ):
                return visitor.visitTimingInstructionName(self)
            else:
                return visitor.visitChildren(self)




    def timingInstructionName(self):

        localctx = BraketPragmasParser.TimingInstructionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_timingInstructionName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__85 or _la==BraketPragmasParser.T__86):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimingInstructionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timingInstructionName(self):
            return self.getTypedRuleContext(BraketPragmasParser.TimingInstructionNameContext,0)


        def designator(self):
            return self.getTypedRuleContext(BraketPragmasParser.DesignatorContext,0)


        def indexedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BraketPragmasParser.IndexedIdentifierContext)
            else:
                return self.getTypedRuleContext(BraketPragmasParser.IndexedIdentifierContext,i)


        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BraketPragmasParser.COMMA)
            else:
                return self.getToken(BraketPragmasParser.COMMA, i)

        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_timingInstruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingInstruction" ):
                listener.enterTimingInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingInstruction" ):
                listener.exitTimingInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingInstruction" ):
                return visitor.visitTimingInstruction(self)
            else:
                return visitor.visitChildren(self)




    def timingInstruction(self):

        localctx = BraketPragmasParser.TimingInstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_timingInstruction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.timingInstructionName()
            self.state = 1131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LPAREN:
                self.state = 1126
                self.match(BraketPragmasParser.LPAREN)
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__28) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55) | (1 << BraketPragmasParser.T__56))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (BraketPragmasParser.T__81 - 82)) | (1 << (BraketPragmasParser.T__82 - 82)) | (1 << (BraketPragmasParser.T__84 - 82)) | (1 << (BraketPragmasParser.LPAREN - 82)) | (1 << (BraketPragmasParser.MINUS - 82)) | (1 << (BraketPragmasParser.ImagNumber - 82)) | (1 << (BraketPragmasParser.COMPLEX - 82)) | (1 << (BraketPragmasParser.ARRAY - 82)) | (1 << (BraketPragmasParser.SIZEOF - 82)) | (1 << (BraketPragmasParser.Constant - 82)) | (1 << (BraketPragmasParser.Integer - 82)) | (1 << (BraketPragmasParser.Identifier - 82)) | (1 << (BraketPragmasParser.RealNumber - 82)) | (1 << (BraketPragmasParser.TimingLiteral - 82)) | (1 << (BraketPragmasParser.StringLiteral - 82)))) != 0):
                    self.state = 1127
                    self.expressionList()


                self.state = 1130
                self.match(BraketPragmasParser.RPAREN)


            self.state = 1133
            self.designator()
            self.state = 1134
            self.indexedIdentifier()
            self.state = 1139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==BraketPragmasParser.COMMA:
                self.state = 1135
                self.match(BraketPragmasParser.COMMA)
                self.state = 1136
                self.indexedIdentifier()
                self.state = 1141
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimingStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timingInstruction(self):
            return self.getTypedRuleContext(BraketPragmasParser.TimingInstructionContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def timingBox(self):
            return self.getTypedRuleContext(BraketPragmasParser.TimingBoxContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_timingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingStatement" ):
                listener.enterTimingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingStatement" ):
                listener.exitTimingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingStatement" ):
                return visitor.visitTimingStatement(self)
            else:
                return visitor.visitChildren(self)




    def timingStatement(self):

        localctx = BraketPragmasParser.TimingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_timingStatement)
        try:
            self.state = 1146
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__85, BraketPragmasParser.T__86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1142
                self.timingInstruction()
                self.state = 1143
                self.match(BraketPragmasParser.SEMICOLON)
                pass
            elif token in [BraketPragmasParser.T__83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1145
                self.timingBox()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def calibrationGrammarDeclaration(self):
            return self.getTypedRuleContext(BraketPragmasParser.CalibrationGrammarDeclarationContext,0)


        def calibrationDefinition(self):
            return self.getTypedRuleContext(BraketPragmasParser.CalibrationDefinitionContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_calibration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibration" ):
                listener.enterCalibration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibration" ):
                listener.exitCalibration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibration" ):
                return visitor.visitCalibration(self)
            else:
                return visitor.visitChildren(self)




    def calibration(self):

        localctx = BraketPragmasParser.CalibrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_calibration)
        try:
            self.state = 1150
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [BraketPragmasParser.T__87]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1148
                self.calibrationGrammarDeclaration()
                pass
            elif token in [BraketPragmasParser.T__88]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1149
                self.calibrationDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationGrammarDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def calibrationGrammar(self):
            return self.getTypedRuleContext(BraketPragmasParser.CalibrationGrammarContext,0)


        def SEMICOLON(self):
            return self.getToken(BraketPragmasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_calibrationGrammarDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationGrammarDeclaration" ):
                listener.enterCalibrationGrammarDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationGrammarDeclaration" ):
                listener.exitCalibrationGrammarDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationGrammarDeclaration" ):
                return visitor.visitCalibrationGrammarDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def calibrationGrammarDeclaration(self):

        localctx = BraketPragmasParser.CalibrationGrammarDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_calibrationGrammarDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(BraketPragmasParser.T__87)
            self.state = 1153
            self.calibrationGrammar()
            self.state = 1154
            self.match(BraketPragmasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(BraketPragmasParser.Identifier, 0)

        def identifierList(self):
            return self.getTypedRuleContext(BraketPragmasParser.IdentifierListContext,0)


        def LBRACE(self):
            return self.getToken(BraketPragmasParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(BraketPragmasParser.RBRACE, 0)

        def LPAREN(self):
            return self.getToken(BraketPragmasParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BraketPragmasParser.RPAREN, 0)

        def returnSignature(self):
            return self.getTypedRuleContext(BraketPragmasParser.ReturnSignatureContext,0)


        def calibrationArgumentList(self):
            return self.getTypedRuleContext(BraketPragmasParser.CalibrationArgumentListContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_calibrationDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationDefinition" ):
                listener.enterCalibrationDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationDefinition" ):
                listener.exitCalibrationDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationDefinition" ):
                return visitor.visitCalibrationDefinition(self)
            else:
                return visitor.visitChildren(self)




    def calibrationDefinition(self):

        localctx = BraketPragmasParser.CalibrationDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_calibrationDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self.match(BraketPragmasParser.T__88)
            self.state = 1157
            self.match(BraketPragmasParser.Identifier)
            self.state = 1163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.LPAREN:
                self.state = 1158
                self.match(BraketPragmasParser.LPAREN)
                self.state = 1160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << BraketPragmasParser.T__6) | (1 << BraketPragmasParser.T__7) | (1 << BraketPragmasParser.T__8) | (1 << BraketPragmasParser.T__9) | (1 << BraketPragmasParser.T__10) | (1 << BraketPragmasParser.T__11) | (1 << BraketPragmasParser.T__12) | (1 << BraketPragmasParser.T__27) | (1 << BraketPragmasParser.T__28) | (1 << BraketPragmasParser.T__43) | (1 << BraketPragmasParser.T__44) | (1 << BraketPragmasParser.T__45) | (1 << BraketPragmasParser.T__46) | (1 << BraketPragmasParser.T__47) | (1 << BraketPragmasParser.T__48) | (1 << BraketPragmasParser.T__49) | (1 << BraketPragmasParser.T__50) | (1 << BraketPragmasParser.T__51) | (1 << BraketPragmasParser.T__52) | (1 << BraketPragmasParser.T__53) | (1 << BraketPragmasParser.T__54) | (1 << BraketPragmasParser.T__55) | (1 << BraketPragmasParser.T__56))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (BraketPragmasParser.T__81 - 82)) | (1 << (BraketPragmasParser.T__82 - 82)) | (1 << (BraketPragmasParser.T__84 - 82)) | (1 << (BraketPragmasParser.LPAREN - 82)) | (1 << (BraketPragmasParser.MINUS - 82)) | (1 << (BraketPragmasParser.ImagNumber - 82)) | (1 << (BraketPragmasParser.COMPLEX - 82)) | (1 << (BraketPragmasParser.CONST - 82)) | (1 << (BraketPragmasParser.MUTABLE - 82)) | (1 << (BraketPragmasParser.ARRAY - 82)) | (1 << (BraketPragmasParser.SIZEOF - 82)) | (1 << (BraketPragmasParser.Constant - 82)) | (1 << (BraketPragmasParser.Integer - 82)) | (1 << (BraketPragmasParser.Identifier - 82)) | (1 << (BraketPragmasParser.RealNumber - 82)) | (1 << (BraketPragmasParser.TimingLiteral - 82)) | (1 << (BraketPragmasParser.StringLiteral - 82)))) != 0):
                    self.state = 1159
                    self.calibrationArgumentList()


                self.state = 1162
                self.match(BraketPragmasParser.RPAREN)


            self.state = 1165
            self.identifierList()
            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==BraketPragmasParser.ARROW:
                self.state = 1166
                self.returnSignature()


            self.state = 1169
            self.match(BraketPragmasParser.LBRACE)
            self.state = 1173
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1170
                    self.matchWildcard() 
                self.state = 1175
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

            self.state = 1176
            self.match(BraketPragmasParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationGrammarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(BraketPragmasParser.StringLiteral, 0)

        def getRuleIndex(self):
            return BraketPragmasParser.RULE_calibrationGrammar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationGrammar" ):
                listener.enterCalibrationGrammar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationGrammar" ):
                listener.exitCalibrationGrammar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationGrammar" ):
                return visitor.visitCalibrationGrammar(self)
            else:
                return visitor.visitChildren(self)




    def calibrationGrammar(self):

        localctx = BraketPragmasParser.CalibrationGrammarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_calibrationGrammar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            _la = self._input.LA(1)
            if not(_la==BraketPragmasParser.T__89 or _la==BraketPragmasParser.StringLiteral):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalArgumentList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ClassicalArgumentListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(BraketPragmasParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return BraketPragmasParser.RULE_calibrationArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationArgumentList" ):
                listener.enterCalibrationArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationArgumentList" ):
                listener.exitCalibrationArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationArgumentList" ):
                return visitor.visitCalibrationArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def calibrationArgumentList(self):

        localctx = BraketPragmasParser.CalibrationArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_calibrationArgumentList)
        try:
            self.state = 1182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1180
                self.classicalArgumentList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1181
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[51] = self.aliasInitializer_sempred
        self._predicates[75] = self.expression_sempred
        self._predicates[76] = self.logicalAndExpression_sempred
        self._predicates[77] = self.bitOrExpression_sempred
        self._predicates[78] = self.xOrExpression_sempred
        self._predicates[79] = self.bitAndExpression_sempred
        self._predicates[80] = self.equalityExpression_sempred
        self._predicates[81] = self.comparisonExpression_sempred
        self._predicates[82] = self.bitShiftExpression_sempred
        self._predicates[83] = self.additiveExpression_sempred
        self._predicates[84] = self.multiplicativeExpression_sempred
        self._predicates[86] = self.powerExpression_sempred
        self._predicates[88] = self.indexExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def aliasInitializer_sempred(self, localctx:AliasInitializerContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def logicalAndExpression_sempred(self, localctx:LogicalAndExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def bitOrExpression_sempred(self, localctx:BitOrExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def xOrExpression_sempred(self, localctx:XOrExpressionContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def bitAndExpression_sempred(self, localctx:BitAndExpressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def equalityExpression_sempred(self, localctx:EqualityExpressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def comparisonExpression_sempred(self, localctx:ComparisonExpressionContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def bitShiftExpression_sempred(self, localctx:BitShiftExpressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         

    def additiveExpression_sempred(self, localctx:AdditiveExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def multiplicativeExpression_sempred(self, localctx:MultiplicativeExpressionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

    def powerExpression_sempred(self, localctx:PowerExpressionContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         

    def indexExpression_sempred(self, localctx:IndexExpressionContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         




